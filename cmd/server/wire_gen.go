// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"gitlab.bixin.com/mili/node-proxy/internal/biz"
	"gitlab.bixin.com/mili/node-proxy/internal/conf"
	"gitlab.bixin.com/mili/node-proxy/internal/data"
	"gitlab.bixin.com/mili/node-proxy/internal/server"
	"gitlab.bixin.com/mili/node-proxy/internal/service"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, tokenList *conf.TokenList, arg []*conf.Platform, nftList *conf.NFTList, logger log.Logger) (*kratos.App, func(), error) {
	db := data.NewDB(confData, logger)
	client := data.NewRedis(confData)
	tokenListRepo := data.NewTokenListRepo(tokenList, db, client, logger)
	tokenListUsecase := biz.NewTokenListUsecase(tokenListRepo, logger)
	tokenlistService := service.NewTokenlistService(tokenListUsecase)
	platformRepo := data.NewPlatformRepo(arg, logger)
	platformUseCase := biz.NewPlatformUseCase(platformRepo, logger)
	platformService := service.NewPlatformService(platformUseCase)
	nftRepo := data.NewNFTRepo(db, logger, nftList)
	nftUsecase := biz.NewNFTUsecase(nftRepo, logger)
	nftService := service.NewNFTService(nftUsecase)
	grpcServer := server.NewGRPCServer(confServer, tokenlistService, platformService, nftService, logger)
	app := newApp(logger, grpcServer)
	return app, func() {
	}, nil
}

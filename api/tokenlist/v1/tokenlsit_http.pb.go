// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.4.0
// - protoc             v3.15.8
// source: tokenlist/v1/tokenlsit.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationTokenlsitCreateTokenList = "/api.tokenlist.v1.Tokenlsit/CreateTokenList"
const OperationTokenlsitGetPrice = "/api.tokenlist.v1.Tokenlsit/GetPrice"
const OperationTokenlsitGetTokenList = "/api.tokenlist.v1.Tokenlsit/GetTokenList"

type TokenlsitHTTPServer interface {
	CreateTokenList(context.Context, *CreateTokenListReq) (*CreateTokenListResp, error)
	GetPrice(context.Context, *PriceReq) (*PriceResp, error)
	GetTokenList(context.Context, *GetTokenListReq) (*GetTokenListResp, error)
}

func RegisterTokenlsitHTTPServer(s *http.Server, srv TokenlsitHTTPServer) {
	r := s.Route("/")
	r.GET("/tokenlist/price", _Tokenlsit_GetPrice0_HTTP_Handler(srv))
	r.POST("/tokenlist", _Tokenlsit_CreateTokenList0_HTTP_Handler(srv))
	r.GET("/tokenlist", _Tokenlsit_GetTokenList0_HTTP_Handler(srv))
}

func _Tokenlsit_GetPrice0_HTTP_Handler(srv TokenlsitHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PriceReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTokenlsitGetPrice)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPrice(ctx, req.(*PriceReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PriceResp)
		return ctx.Result(200, reply)
	}
}

func _Tokenlsit_CreateTokenList0_HTTP_Handler(srv TokenlsitHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateTokenListReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTokenlsitCreateTokenList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateTokenList(ctx, req.(*CreateTokenListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateTokenListResp)
		return ctx.Result(200, reply)
	}
}

func _Tokenlsit_GetTokenList0_HTTP_Handler(srv TokenlsitHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTokenListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTokenlsitGetTokenList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTokenList(ctx, req.(*GetTokenListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTokenListResp)
		return ctx.Result(200, reply)
	}
}

type TokenlsitHTTPClient interface {
	CreateTokenList(ctx context.Context, req *CreateTokenListReq, opts ...http.CallOption) (rsp *CreateTokenListResp, err error)
	GetPrice(ctx context.Context, req *PriceReq, opts ...http.CallOption) (rsp *PriceResp, err error)
	GetTokenList(ctx context.Context, req *GetTokenListReq, opts ...http.CallOption) (rsp *GetTokenListResp, err error)
}

type TokenlsitHTTPClientImpl struct {
	cc *http.Client
}

func NewTokenlsitHTTPClient(client *http.Client) TokenlsitHTTPClient {
	return &TokenlsitHTTPClientImpl{client}
}

func (c *TokenlsitHTTPClientImpl) CreateTokenList(ctx context.Context, in *CreateTokenListReq, opts ...http.CallOption) (*CreateTokenListResp, error) {
	var out CreateTokenListResp
	pattern := "/tokenlist"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTokenlsitCreateTokenList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TokenlsitHTTPClientImpl) GetPrice(ctx context.Context, in *PriceReq, opts ...http.CallOption) (*PriceResp, error) {
	var out PriceResp
	pattern := "/tokenlist/price"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTokenlsitGetPrice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TokenlsitHTTPClientImpl) GetTokenList(ctx context.Context, in *GetTokenListReq, opts ...http.CallOption) (*GetTokenListResp, error) {
	var out GetTokenListResp
	pattern := "/tokenlist"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTokenlsitGetTokenList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

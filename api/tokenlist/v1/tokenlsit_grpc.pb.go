// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: tokenlist/v1/tokenlsit.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TokenlsitClient is the client API for Tokenlsit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TokenlsitClient interface {
	GetPrice(ctx context.Context, in *PriceReq, opts ...grpc.CallOption) (*PriceResp, error)
	CreateTokenList(ctx context.Context, in *CreateTokenListReq, opts ...grpc.CallOption) (*CreateTokenListResp, error)
	GetTokenList(ctx context.Context, in *GetTokenListReq, opts ...grpc.CallOption) (*GetTokenListResp, error)
}

type tokenlsitClient struct {
	cc grpc.ClientConnInterface
}

func NewTokenlsitClient(cc grpc.ClientConnInterface) TokenlsitClient {
	return &tokenlsitClient{cc}
}

func (c *tokenlsitClient) GetPrice(ctx context.Context, in *PriceReq, opts ...grpc.CallOption) (*PriceResp, error) {
	out := new(PriceResp)
	err := c.cc.Invoke(ctx, "/api.tokenlist.v1.Tokenlsit/GetPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenlsitClient) CreateTokenList(ctx context.Context, in *CreateTokenListReq, opts ...grpc.CallOption) (*CreateTokenListResp, error) {
	out := new(CreateTokenListResp)
	err := c.cc.Invoke(ctx, "/api.tokenlist.v1.Tokenlsit/CreateTokenList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenlsitClient) GetTokenList(ctx context.Context, in *GetTokenListReq, opts ...grpc.CallOption) (*GetTokenListResp, error) {
	out := new(GetTokenListResp)
	err := c.cc.Invoke(ctx, "/api.tokenlist.v1.Tokenlsit/GetTokenList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokenlsitServer is the server API for Tokenlsit service.
// All implementations must embed UnimplementedTokenlsitServer
// for forward compatibility
type TokenlsitServer interface {
	GetPrice(context.Context, *PriceReq) (*PriceResp, error)
	CreateTokenList(context.Context, *CreateTokenListReq) (*CreateTokenListResp, error)
	GetTokenList(context.Context, *GetTokenListReq) (*GetTokenListResp, error)
	mustEmbedUnimplementedTokenlsitServer()
}

// UnimplementedTokenlsitServer must be embedded to have forward compatible implementations.
type UnimplementedTokenlsitServer struct {
}

func (UnimplementedTokenlsitServer) GetPrice(context.Context, *PriceReq) (*PriceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrice not implemented")
}
func (UnimplementedTokenlsitServer) CreateTokenList(context.Context, *CreateTokenListReq) (*CreateTokenListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTokenList not implemented")
}
func (UnimplementedTokenlsitServer) GetTokenList(context.Context, *GetTokenListReq) (*GetTokenListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenList not implemented")
}
func (UnimplementedTokenlsitServer) mustEmbedUnimplementedTokenlsitServer() {}

// UnsafeTokenlsitServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TokenlsitServer will
// result in compilation errors.
type UnsafeTokenlsitServer interface {
	mustEmbedUnimplementedTokenlsitServer()
}

func RegisterTokenlsitServer(s grpc.ServiceRegistrar, srv TokenlsitServer) {
	s.RegisterService(&Tokenlsit_ServiceDesc, srv)
}

func _Tokenlsit_GetPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PriceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenlsitServer).GetPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.tokenlist.v1.Tokenlsit/GetPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenlsitServer).GetPrice(ctx, req.(*PriceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tokenlsit_CreateTokenList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTokenListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenlsitServer).CreateTokenList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.tokenlist.v1.Tokenlsit/CreateTokenList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenlsitServer).CreateTokenList(ctx, req.(*CreateTokenListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tokenlsit_GetTokenList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenlsitServer).GetTokenList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.tokenlist.v1.Tokenlsit/GetTokenList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenlsitServer).GetTokenList(ctx, req.(*GetTokenListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Tokenlsit_ServiceDesc is the grpc.ServiceDesc for Tokenlsit service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tokenlsit_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.tokenlist.v1.Tokenlsit",
	HandlerType: (*TokenlsitServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPrice",
			Handler:    _Tokenlsit_GetPrice_Handler,
		},
		{
			MethodName: "CreateTokenList",
			Handler:    _Tokenlsit_CreateTokenList_Handler,
		},
		{
			MethodName: "GetTokenList",
			Handler:    _Tokenlsit_GetTokenList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tokenlist/v1/tokenlsit.proto",
}

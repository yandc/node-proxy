// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: api/tokenlist/v1/tokenlist.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TokenlistClient is the client API for Tokenlist service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TokenlistClient interface {
	GetPrice(ctx context.Context, in *PriceReq, opts ...grpc.CallOption) (*PriceResp, error)
	GetTokenList(ctx context.Context, in *GetTokenListReq, opts ...grpc.CallOption) (*GetTokenListResp, error)
	GetTokenInfo(ctx context.Context, in *GetTokenInfoReq, opts ...grpc.CallOption) (*GetTokenInfoResp, error)
}

type tokenlistClient struct {
	cc grpc.ClientConnInterface
}

func NewTokenlistClient(cc grpc.ClientConnInterface) TokenlistClient {
	return &tokenlistClient{cc}
}

func (c *tokenlistClient) GetPrice(ctx context.Context, in *PriceReq, opts ...grpc.CallOption) (*PriceResp, error) {
	out := new(PriceResp)
	err := c.cc.Invoke(ctx, "/api.tokenlist.v1.Tokenlist/GetPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenlistClient) GetTokenList(ctx context.Context, in *GetTokenListReq, opts ...grpc.CallOption) (*GetTokenListResp, error) {
	out := new(GetTokenListResp)
	err := c.cc.Invoke(ctx, "/api.tokenlist.v1.Tokenlist/GetTokenList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenlistClient) GetTokenInfo(ctx context.Context, in *GetTokenInfoReq, opts ...grpc.CallOption) (*GetTokenInfoResp, error) {
	out := new(GetTokenInfoResp)
	err := c.cc.Invoke(ctx, "/api.tokenlist.v1.Tokenlist/GetTokenInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokenlistServer is the server API for Tokenlist service.
// All implementations must embed UnimplementedTokenlistServer
// for forward compatibility
type TokenlistServer interface {
	GetPrice(context.Context, *PriceReq) (*PriceResp, error)
	GetTokenList(context.Context, *GetTokenListReq) (*GetTokenListResp, error)
	GetTokenInfo(context.Context, *GetTokenInfoReq) (*GetTokenInfoResp, error)
	mustEmbedUnimplementedTokenlistServer()
}

// UnimplementedTokenlistServer must be embedded to have forward compatible implementations.
type UnimplementedTokenlistServer struct {
}

func (UnimplementedTokenlistServer) GetPrice(context.Context, *PriceReq) (*PriceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrice not implemented")
}
func (UnimplementedTokenlistServer) GetTokenList(context.Context, *GetTokenListReq) (*GetTokenListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenList not implemented")
}
func (UnimplementedTokenlistServer) GetTokenInfo(context.Context, *GetTokenInfoReq) (*GetTokenInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenInfo not implemented")
}
func (UnimplementedTokenlistServer) mustEmbedUnimplementedTokenlistServer() {}

// UnsafeTokenlistServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TokenlistServer will
// result in compilation errors.
type UnsafeTokenlistServer interface {
	mustEmbedUnimplementedTokenlistServer()
}

func RegisterTokenlistServer(s grpc.ServiceRegistrar, srv TokenlistServer) {
	s.RegisterService(&Tokenlist_ServiceDesc, srv)
}

func _Tokenlist_GetPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PriceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenlistServer).GetPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.tokenlist.v1.Tokenlist/GetPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenlistServer).GetPrice(ctx, req.(*PriceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tokenlist_GetTokenList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenlistServer).GetTokenList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.tokenlist.v1.Tokenlist/GetTokenList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenlistServer).GetTokenList(ctx, req.(*GetTokenListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tokenlist_GetTokenInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenlistServer).GetTokenInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.tokenlist.v1.Tokenlist/GetTokenInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenlistServer).GetTokenInfo(ctx, req.(*GetTokenInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Tokenlist_ServiceDesc is the grpc.ServiceDesc for Tokenlist service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tokenlist_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.tokenlist.v1.Tokenlist",
	HandlerType: (*TokenlistServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPrice",
			Handler:    _Tokenlist_GetPrice_Handler,
		},
		{
			MethodName: "GetTokenList",
			Handler:    _Tokenlist_GetTokenList_Handler,
		},
		{
			MethodName: "GetTokenInfo",
			Handler:    _Tokenlist_GetTokenInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/tokenlist/v1/tokenlist.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: api/nft-marketplace/v2/collection_api.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CollectionApiClient is the client API for CollectionApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CollectionApiClient interface {
	Info(ctx context.Context, in *InfoApiReq, opts ...grpc.CallOption) (*InfoApiResp, error)
}

type collectionApiClient struct {
	cc grpc.ClientConnInterface
}

func NewCollectionApiClient(cc grpc.ClientConnInterface) CollectionApiClient {
	return &collectionApiClient{cc}
}

func (c *collectionApiClient) Info(ctx context.Context, in *InfoApiReq, opts ...grpc.CallOption) (*InfoApiResp, error) {
	out := new(InfoApiResp)
	err := c.cc.Invoke(ctx, "/collection.v1.CollectionApi/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollectionApiServer is the server API for CollectionApi service.
// All implementations must embed UnimplementedCollectionApiServer
// for forward compatibility
type CollectionApiServer interface {
	Info(context.Context, *InfoApiReq) (*InfoApiResp, error)
	mustEmbedUnimplementedCollectionApiServer()
}

// UnimplementedCollectionApiServer must be embedded to have forward compatible implementations.
type UnimplementedCollectionApiServer struct {
}

func (UnimplementedCollectionApiServer) Info(context.Context, *InfoApiReq) (*InfoApiResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedCollectionApiServer) mustEmbedUnimplementedCollectionApiServer() {}

// UnsafeCollectionApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollectionApiServer will
// result in compilation errors.
type UnsafeCollectionApiServer interface {
	mustEmbedUnimplementedCollectionApiServer()
}

func RegisterCollectionApiServer(s grpc.ServiceRegistrar, srv CollectionApiServer) {
	s.RegisterService(&CollectionApi_ServiceDesc, srv)
}

func _CollectionApi_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoApiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionApiServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collection.v1.CollectionApi/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionApiServer).Info(ctx, req.(*InfoApiReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CollectionApi_ServiceDesc is the grpc.ServiceDesc for CollectionApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CollectionApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "collection.v1.CollectionApi",
	HandlerType: (*CollectionApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _CollectionApi_Info_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/nft-marketplace/v2/collection_api.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: api/chainlist/v1/chainlist.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChainListClient is the client API for ChainList service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChainListClient interface {
	//获取所有链列表
	GetAllChainList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllChainListResp, error)
	//批量获取链列表
	GetChainList(ctx context.Context, in *GetChainListReq, opts ...grpc.CallOption) (*GetChainListResp, error)
	//获取对应链节点列表
	GetChainNodeList(ctx context.Context, in *GetChainNodeListReq, opts ...grpc.CallOption) (*GetChainNodeListResp, error)
	//获取使用中的节点列表
	GetChainNodeInUsedList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetChainNodeInUsedListResp, error)
	//标记节点为使用状态
	UseChainNode(ctx context.Context, in *UseChainNodeReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type chainListClient struct {
	cc grpc.ClientConnInterface
}

func NewChainListClient(cc grpc.ClientConnInterface) ChainListClient {
	return &chainListClient{cc}
}

func (c *chainListClient) GetAllChainList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllChainListResp, error) {
	out := new(GetAllChainListResp)
	err := c.cc.Invoke(ctx, "/api.chainlist.v1.ChainList/GetAllChainList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainListClient) GetChainList(ctx context.Context, in *GetChainListReq, opts ...grpc.CallOption) (*GetChainListResp, error) {
	out := new(GetChainListResp)
	err := c.cc.Invoke(ctx, "/api.chainlist.v1.ChainList/GetChainList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainListClient) GetChainNodeList(ctx context.Context, in *GetChainNodeListReq, opts ...grpc.CallOption) (*GetChainNodeListResp, error) {
	out := new(GetChainNodeListResp)
	err := c.cc.Invoke(ctx, "/api.chainlist.v1.ChainList/GetChainNodeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainListClient) GetChainNodeInUsedList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetChainNodeInUsedListResp, error) {
	out := new(GetChainNodeInUsedListResp)
	err := c.cc.Invoke(ctx, "/api.chainlist.v1.ChainList/GetChainNodeInUsedList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainListClient) UseChainNode(ctx context.Context, in *UseChainNodeReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.chainlist.v1.ChainList/UseChainNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChainListServer is the server API for ChainList service.
// All implementations must embed UnimplementedChainListServer
// for forward compatibility
type ChainListServer interface {
	//获取所有链列表
	GetAllChainList(context.Context, *emptypb.Empty) (*GetAllChainListResp, error)
	//批量获取链列表
	GetChainList(context.Context, *GetChainListReq) (*GetChainListResp, error)
	//获取对应链节点列表
	GetChainNodeList(context.Context, *GetChainNodeListReq) (*GetChainNodeListResp, error)
	//获取使用中的节点列表
	GetChainNodeInUsedList(context.Context, *emptypb.Empty) (*GetChainNodeInUsedListResp, error)
	//标记节点为使用状态
	UseChainNode(context.Context, *UseChainNodeReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedChainListServer()
}

// UnimplementedChainListServer must be embedded to have forward compatible implementations.
type UnimplementedChainListServer struct {
}

func (UnimplementedChainListServer) GetAllChainList(context.Context, *emptypb.Empty) (*GetAllChainListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllChainList not implemented")
}
func (UnimplementedChainListServer) GetChainList(context.Context, *GetChainListReq) (*GetChainListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChainList not implemented")
}
func (UnimplementedChainListServer) GetChainNodeList(context.Context, *GetChainNodeListReq) (*GetChainNodeListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChainNodeList not implemented")
}
func (UnimplementedChainListServer) GetChainNodeInUsedList(context.Context, *emptypb.Empty) (*GetChainNodeInUsedListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChainNodeInUsedList not implemented")
}
func (UnimplementedChainListServer) UseChainNode(context.Context, *UseChainNodeReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UseChainNode not implemented")
}
func (UnimplementedChainListServer) mustEmbedUnimplementedChainListServer() {}

// UnsafeChainListServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChainListServer will
// result in compilation errors.
type UnsafeChainListServer interface {
	mustEmbedUnimplementedChainListServer()
}

func RegisterChainListServer(s grpc.ServiceRegistrar, srv ChainListServer) {
	s.RegisterService(&ChainList_ServiceDesc, srv)
}

func _ChainList_GetAllChainList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainListServer).GetAllChainList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.chainlist.v1.ChainList/GetAllChainList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainListServer).GetAllChainList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainList_GetChainList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChainListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainListServer).GetChainList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.chainlist.v1.ChainList/GetChainList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainListServer).GetChainList(ctx, req.(*GetChainListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainList_GetChainNodeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChainNodeListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainListServer).GetChainNodeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.chainlist.v1.ChainList/GetChainNodeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainListServer).GetChainNodeList(ctx, req.(*GetChainNodeListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainList_GetChainNodeInUsedList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainListServer).GetChainNodeInUsedList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.chainlist.v1.ChainList/GetChainNodeInUsedList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainListServer).GetChainNodeInUsedList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainList_UseChainNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UseChainNodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainListServer).UseChainNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.chainlist.v1.ChainList/UseChainNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainListServer).UseChainNode(ctx, req.(*UseChainNodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ChainList_ServiceDesc is the grpc.ServiceDesc for ChainList service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChainList_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.chainlist.v1.ChainList",
	HandlerType: (*ChainListServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllChainList",
			Handler:    _ChainList_GetAllChainList_Handler,
		},
		{
			MethodName: "GetChainList",
			Handler:    _ChainList_GetChainList_Handler,
		},
		{
			MethodName: "GetChainNodeList",
			Handler:    _ChainList_GetChainNodeList_Handler,
		},
		{
			MethodName: "GetChainNodeInUsedList",
			Handler:    _ChainList_GetChainNodeInUsedList_Handler,
		},
		{
			MethodName: "UseChainNode",
			Handler:    _ChainList_UseChainNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/chainlist/v1/chainlist.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: api/platform/v1/platform.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlatformClient is the client API for Platform service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlatformClient interface {
	GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceReply, error)
	BuildWasmRequest(ctx context.Context, in *BuildWasmRequestRequest, opts ...grpc.CallOption) (*BuildWasmRequestReply, error)
	AnalysisWasmResponse(ctx context.Context, in *AnalysisWasmResponseRequest, opts ...grpc.CallOption) (*AnalysisWasmResponseReply, error)
	GetGasEstimate(ctx context.Context, in *GetGasEstimateRequest, opts ...grpc.CallOption) (*GetGasEstimateReply, error)
}

type platformClient struct {
	cc grpc.ClientConnInterface
}

func NewPlatformClient(cc grpc.ClientConnInterface) PlatformClient {
	return &platformClient{cc}
}

func (c *platformClient) GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceReply, error) {
	out := new(GetBalanceReply)
	err := c.cc.Invoke(ctx, "/api.platform.v1.Platform/GetBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformClient) BuildWasmRequest(ctx context.Context, in *BuildWasmRequestRequest, opts ...grpc.CallOption) (*BuildWasmRequestReply, error) {
	out := new(BuildWasmRequestReply)
	err := c.cc.Invoke(ctx, "/api.platform.v1.Platform/BuildWasmRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformClient) AnalysisWasmResponse(ctx context.Context, in *AnalysisWasmResponseRequest, opts ...grpc.CallOption) (*AnalysisWasmResponseReply, error) {
	out := new(AnalysisWasmResponseReply)
	err := c.cc.Invoke(ctx, "/api.platform.v1.Platform/AnalysisWasmResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformClient) GetGasEstimate(ctx context.Context, in *GetGasEstimateRequest, opts ...grpc.CallOption) (*GetGasEstimateReply, error) {
	out := new(GetGasEstimateReply)
	err := c.cc.Invoke(ctx, "/api.platform.v1.Platform/GetGasEstimate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlatformServer is the server API for Platform service.
// All implementations must embed UnimplementedPlatformServer
// for forward compatibility
type PlatformServer interface {
	GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceReply, error)
	BuildWasmRequest(context.Context, *BuildWasmRequestRequest) (*BuildWasmRequestReply, error)
	AnalysisWasmResponse(context.Context, *AnalysisWasmResponseRequest) (*AnalysisWasmResponseReply, error)
	GetGasEstimate(context.Context, *GetGasEstimateRequest) (*GetGasEstimateReply, error)
	mustEmbedUnimplementedPlatformServer()
}

// UnimplementedPlatformServer must be embedded to have forward compatible implementations.
type UnimplementedPlatformServer struct {
}

func (UnimplementedPlatformServer) GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedPlatformServer) BuildWasmRequest(context.Context, *BuildWasmRequestRequest) (*BuildWasmRequestReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildWasmRequest not implemented")
}
func (UnimplementedPlatformServer) AnalysisWasmResponse(context.Context, *AnalysisWasmResponseRequest) (*AnalysisWasmResponseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalysisWasmResponse not implemented")
}
func (UnimplementedPlatformServer) GetGasEstimate(context.Context, *GetGasEstimateRequest) (*GetGasEstimateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGasEstimate not implemented")
}
func (UnimplementedPlatformServer) mustEmbedUnimplementedPlatformServer() {}

// UnsafePlatformServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlatformServer will
// result in compilation errors.
type UnsafePlatformServer interface {
	mustEmbedUnimplementedPlatformServer()
}

func RegisterPlatformServer(s grpc.ServiceRegistrar, srv PlatformServer) {
	s.RegisterService(&Platform_ServiceDesc, srv)
}

func _Platform_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.platform.v1.Platform/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServer).GetBalance(ctx, req.(*GetBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Platform_BuildWasmRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildWasmRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServer).BuildWasmRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.platform.v1.Platform/BuildWasmRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServer).BuildWasmRequest(ctx, req.(*BuildWasmRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Platform_AnalysisWasmResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalysisWasmResponseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServer).AnalysisWasmResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.platform.v1.Platform/AnalysisWasmResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServer).AnalysisWasmResponse(ctx, req.(*AnalysisWasmResponseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Platform_GetGasEstimate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGasEstimateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServer).GetGasEstimate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.platform.v1.Platform/GetGasEstimate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServer).GetGasEstimate(ctx, req.(*GetGasEstimateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Platform_ServiceDesc is the grpc.ServiceDesc for Platform service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Platform_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.platform.v1.Platform",
	HandlerType: (*PlatformServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBalance",
			Handler:    _Platform_GetBalance_Handler,
		},
		{
			MethodName: "BuildWasmRequest",
			Handler:    _Platform_BuildWasmRequest_Handler,
		},
		{
			MethodName: "AnalysisWasmResponse",
			Handler:    _Platform_AnalysisWasmResponse_Handler,
		},
		{
			MethodName: "GetGasEstimate",
			Handler:    _Platform_GetGasEstimate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/platform/v1/platform.proto",
}

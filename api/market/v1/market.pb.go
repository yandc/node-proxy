// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.4
// source: api/market/v1/market.proto

package v1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DescribeCexCoinsRequest_SortFieldEnum int32

const (
	DescribeCexCoinsRequest_Price         DescribeCexCoinsRequest_SortFieldEnum = 0
	DescribeCexCoinsRequest_PriceDelta24h DescribeCexCoinsRequest_SortFieldEnum = 1
	DescribeCexCoinsRequest_Volume24h     DescribeCexCoinsRequest_SortFieldEnum = 2
	DescribeCexCoinsRequest_MarketCap     DescribeCexCoinsRequest_SortFieldEnum = 3
	DescribeCexCoinsRequest_PriceDelta7d  DescribeCexCoinsRequest_SortFieldEnum = 4
)

// Enum value maps for DescribeCexCoinsRequest_SortFieldEnum.
var (
	DescribeCexCoinsRequest_SortFieldEnum_name = map[int32]string{
		0: "Price",
		1: "PriceDelta24h",
		2: "Volume24h",
		3: "MarketCap",
		4: "PriceDelta7d",
	}
	DescribeCexCoinsRequest_SortFieldEnum_value = map[string]int32{
		"Price":         0,
		"PriceDelta24h": 1,
		"Volume24h":     2,
		"MarketCap":     3,
		"PriceDelta7d":  4,
	}
)

func (x DescribeCexCoinsRequest_SortFieldEnum) Enum() *DescribeCexCoinsRequest_SortFieldEnum {
	p := new(DescribeCexCoinsRequest_SortFieldEnum)
	*p = x
	return p
}

func (x DescribeCexCoinsRequest_SortFieldEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DescribeCexCoinsRequest_SortFieldEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_api_market_v1_market_proto_enumTypes[0].Descriptor()
}

func (DescribeCexCoinsRequest_SortFieldEnum) Type() protoreflect.EnumType {
	return &file_api_market_v1_market_proto_enumTypes[0]
}

func (x DescribeCexCoinsRequest_SortFieldEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DescribeCexCoinsRequest_SortFieldEnum.Descriptor instead.
func (DescribeCexCoinsRequest_SortFieldEnum) EnumDescriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{18, 0}
}

type DescribeDeFiCoinsRequest_SortFieldDefine int32

const (
	DescribeDeFiCoinsRequest_Liquidity     DescribeDeFiCoinsRequest_SortFieldDefine = 0
	DescribeDeFiCoinsRequest_Volume24h     DescribeDeFiCoinsRequest_SortFieldDefine = 1
	DescribeDeFiCoinsRequest_Orders24h     DescribeDeFiCoinsRequest_SortFieldDefine = 2
	DescribeDeFiCoinsRequest_Users24h      DescribeDeFiCoinsRequest_SortFieldDefine = 3
	DescribeDeFiCoinsRequest_Price         DescribeDeFiCoinsRequest_SortFieldDefine = 4
	DescribeDeFiCoinsRequest_PriceDelta24h DescribeDeFiCoinsRequest_SortFieldDefine = 5
	DescribeDeFiCoinsRequest_Name          DescribeDeFiCoinsRequest_SortFieldDefine = 6
)

// Enum value maps for DescribeDeFiCoinsRequest_SortFieldDefine.
var (
	DescribeDeFiCoinsRequest_SortFieldDefine_name = map[int32]string{
		0: "Liquidity",
		1: "Volume24h",
		2: "Orders24h",
		3: "Users24h",
		4: "Price",
		5: "PriceDelta24h",
		6: "Name",
	}
	DescribeDeFiCoinsRequest_SortFieldDefine_value = map[string]int32{
		"Liquidity":     0,
		"Volume24h":     1,
		"Orders24h":     2,
		"Users24h":      3,
		"Price":         4,
		"PriceDelta24h": 5,
		"Name":          6,
	}
)

func (x DescribeDeFiCoinsRequest_SortFieldDefine) Enum() *DescribeDeFiCoinsRequest_SortFieldDefine {
	p := new(DescribeDeFiCoinsRequest_SortFieldDefine)
	*p = x
	return p
}

func (x DescribeDeFiCoinsRequest_SortFieldDefine) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DescribeDeFiCoinsRequest_SortFieldDefine) Descriptor() protoreflect.EnumDescriptor {
	return file_api_market_v1_market_proto_enumTypes[1].Descriptor()
}

func (DescribeDeFiCoinsRequest_SortFieldDefine) Type() protoreflect.EnumType {
	return &file_api_market_v1_market_proto_enumTypes[1]
}

func (x DescribeDeFiCoinsRequest_SortFieldDefine) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DescribeDeFiCoinsRequest_SortFieldDefine.Descriptor instead.
func (DescribeDeFiCoinsRequest_SortFieldDefine) EnumDescriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{42, 0}
}

type ModifyColumnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId  string            `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	ColumnID int32             `protobuf:"varint,2,opt,name=columnID,proto3" json:"columnID,omitempty"`
	Name     map[string]string `protobuf:"bytes,3,rep,name=name,proto3" json:"name,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Category []string          `protobuf:"bytes,4,rep,name=category,proto3" json:"category,omitempty"`
	Type     int32             `protobuf:"varint,5,opt,name=type,proto3" json:"type,omitempty"`
	Weight   int32             `protobuf:"varint,6,opt,name=weight,proto3" json:"weight,omitempty"`
	Valid    *bool             `protobuf:"varint,7,opt,name=valid,proto3,oneof" json:"valid,omitempty"`
}

func (x *ModifyColumnRequest) Reset() {
	*x = ModifyColumnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyColumnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyColumnRequest) ProtoMessage() {}

func (x *ModifyColumnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyColumnRequest.ProtoReflect.Descriptor instead.
func (*ModifyColumnRequest) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{0}
}

func (x *ModifyColumnRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *ModifyColumnRequest) GetColumnID() int32 {
	if x != nil {
		return x.ColumnID
	}
	return 0
}

func (x *ModifyColumnRequest) GetName() map[string]string {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ModifyColumnRequest) GetCategory() []string {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *ModifyColumnRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ModifyColumnRequest) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *ModifyColumnRequest) GetValid() bool {
	if x != nil && x.Valid != nil {
		return *x.Valid
	}
	return false
}

type ModifyColumnReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	EventId string `protobuf:"bytes,3,opt,name=eventId,proto3" json:"eventId,omitempty"`
}

func (x *ModifyColumnReply) Reset() {
	*x = ModifyColumnReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyColumnReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyColumnReply) ProtoMessage() {}

func (x *ModifyColumnReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyColumnReply.ProtoReflect.Descriptor instead.
func (*ModifyColumnReply) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{1}
}

func (x *ModifyColumnReply) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ModifyColumnReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ModifyColumnReply) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

type RemoveColumnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId   string  `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	ColumnIDs []int32 `protobuf:"varint,2,rep,packed,name=columnIDs,proto3" json:"columnIDs,omitempty"`
}

func (x *RemoveColumnRequest) Reset() {
	*x = RemoveColumnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveColumnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveColumnRequest) ProtoMessage() {}

func (x *RemoveColumnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveColumnRequest.ProtoReflect.Descriptor instead.
func (*RemoveColumnRequest) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{2}
}

func (x *RemoveColumnRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *RemoveColumnRequest) GetColumnIDs() []int32 {
	if x != nil {
		return x.ColumnIDs
	}
	return nil
}

type RemoveColumnReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	EventId string `protobuf:"bytes,3,opt,name=eventId,proto3" json:"eventId,omitempty"`
}

func (x *RemoveColumnReply) Reset() {
	*x = RemoveColumnReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveColumnReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveColumnReply) ProtoMessage() {}

func (x *RemoveColumnReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveColumnReply.ProtoReflect.Descriptor instead.
func (*RemoveColumnReply) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{3}
}

func (x *RemoveColumnReply) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *RemoveColumnReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RemoveColumnReply) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

type CreateColumnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId  string            `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Name     map[string]string `protobuf:"bytes,2,rep,name=name,proto3" json:"name,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Category []string          `protobuf:"bytes,3,rep,name=category,proto3" json:"category,omitempty"`
	Type     int32             `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	Weight   int32             `protobuf:"varint,5,opt,name=weight,proto3" json:"weight,omitempty"`
	Valid    *bool             `protobuf:"varint,6,opt,name=valid,proto3,oneof" json:"valid,omitempty"`
}

func (x *CreateColumnRequest) Reset() {
	*x = CreateColumnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateColumnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateColumnRequest) ProtoMessage() {}

func (x *CreateColumnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateColumnRequest.ProtoReflect.Descriptor instead.
func (*CreateColumnRequest) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{4}
}

func (x *CreateColumnRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *CreateColumnRequest) GetName() map[string]string {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *CreateColumnRequest) GetCategory() []string {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *CreateColumnRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *CreateColumnRequest) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *CreateColumnRequest) GetValid() bool {
	if x != nil && x.Valid != nil {
		return *x.Valid
	}
	return false
}

type CreateColumnReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	EventId string `protobuf:"bytes,3,opt,name=eventId,proto3" json:"eventId,omitempty"`
}

func (x *CreateColumnReply) Reset() {
	*x = CreateColumnReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateColumnReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateColumnReply) ProtoMessage() {}

func (x *CreateColumnReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateColumnReply.ProtoReflect.Descriptor instead.
func (*CreateColumnReply) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{5}
}

func (x *CreateColumnReply) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *CreateColumnReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateColumnReply) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

type DescribeColumnListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId  string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type     int32  `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	Category string `protobuf:"bytes,4,opt,name=category,proto3" json:"category,omitempty"`
	Valid    *bool  `protobuf:"varint,5,opt,name=valid,proto3,oneof" json:"valid,omitempty"`
	Page     int32  `protobuf:"varint,6,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int32  `protobuf:"varint,7,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *DescribeColumnListRequest) Reset() {
	*x = DescribeColumnListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeColumnListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeColumnListRequest) ProtoMessage() {}

func (x *DescribeColumnListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeColumnListRequest.ProtoReflect.Descriptor instead.
func (*DescribeColumnListRequest) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{6}
}

func (x *DescribeColumnListRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribeColumnListRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DescribeColumnListRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *DescribeColumnListRequest) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *DescribeColumnListRequest) GetValid() bool {
	if x != nil && x.Valid != nil {
		return *x.Valid
	}
	return false
}

func (x *DescribeColumnListRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *DescribeColumnListRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type DescribeColumnListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total   int32                             `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Columns []*DescribeColumnListReply_Column `protobuf:"bytes,2,rep,name=columns,proto3" json:"columns,omitempty"`
}

func (x *DescribeColumnListReply) Reset() {
	*x = DescribeColumnListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeColumnListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeColumnListReply) ProtoMessage() {}

func (x *DescribeColumnListReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeColumnListReply.ProtoReflect.Descriptor instead.
func (*DescribeColumnListReply) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{7}
}

func (x *DescribeColumnListReply) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *DescribeColumnListReply) GetColumns() []*DescribeColumnListReply_Column {
	if x != nil {
		return x.Columns
	}
	return nil
}

type DescribeAllExtraDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	CoinID  string `protobuf:"bytes,2,opt,name=coinID,proto3" json:"coinID,omitempty"`
}

func (x *DescribeAllExtraDetailRequest) Reset() {
	*x = DescribeAllExtraDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeAllExtraDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeAllExtraDetailRequest) ProtoMessage() {}

func (x *DescribeAllExtraDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeAllExtraDetailRequest.ProtoReflect.Descriptor instead.
func (*DescribeAllExtraDetailRequest) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{8}
}

func (x *DescribeAllExtraDetailRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribeAllExtraDetailRequest) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

type DescribeAllExtraDetailReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinID         string            `protobuf:"bytes,1,opt,name=coinID,proto3" json:"coinID,omitempty"`
	HomePage       []string          `protobuf:"bytes,2,rep,name=homePage,proto3" json:"homePage,omitempty"`
	BlockChainSite []string          `protobuf:"bytes,3,rep,name=blockChainSite,proto3" json:"blockChainSite,omitempty"`
	GenesisDate    string            `protobuf:"bytes,4,opt,name=genesisDate,proto3" json:"genesisDate,omitempty"`
	DexCategory    []string          `protobuf:"bytes,5,rep,name=dexCategory,proto3" json:"dexCategory,omitempty"`
	Desc           map[string]string `protobuf:"bytes,6,rep,name=desc,proto3" json:"desc,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DescribeAllExtraDetailReply) Reset() {
	*x = DescribeAllExtraDetailReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeAllExtraDetailReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeAllExtraDetailReply) ProtoMessage() {}

func (x *DescribeAllExtraDetailReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeAllExtraDetailReply.ProtoReflect.Descriptor instead.
func (*DescribeAllExtraDetailReply) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{9}
}

func (x *DescribeAllExtraDetailReply) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *DescribeAllExtraDetailReply) GetHomePage() []string {
	if x != nil {
		return x.HomePage
	}
	return nil
}

func (x *DescribeAllExtraDetailReply) GetBlockChainSite() []string {
	if x != nil {
		return x.BlockChainSite
	}
	return nil
}

func (x *DescribeAllExtraDetailReply) GetGenesisDate() string {
	if x != nil {
		return x.GenesisDate
	}
	return ""
}

func (x *DescribeAllExtraDetailReply) GetDexCategory() []string {
	if x != nil {
		return x.DexCategory
	}
	return nil
}

func (x *DescribeAllExtraDetailReply) GetDesc() map[string]string {
	if x != nil {
		return x.Desc
	}
	return nil
}

type DescribeCategoryListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
}

func (x *DescribeCategoryListRequest) Reset() {
	*x = DescribeCategoryListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCategoryListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCategoryListRequest) ProtoMessage() {}

func (x *DescribeCategoryListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCategoryListRequest.ProtoReflect.Descriptor instead.
func (*DescribeCategoryListRequest) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{10}
}

func (x *DescribeCategoryListRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

type DescribeCategoryListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category []string `protobuf:"bytes,1,rep,name=category,proto3" json:"category,omitempty"`
}

func (x *DescribeCategoryListReply) Reset() {
	*x = DescribeCategoryListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCategoryListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCategoryListReply) ProtoMessage() {}

func (x *DescribeCategoryListReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCategoryListReply.ProtoReflect.Descriptor instead.
func (*DescribeCategoryListReply) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{11}
}

func (x *DescribeCategoryListReply) GetCategory() []string {
	if x != nil {
		return x.Category
	}
	return nil
}

type ModifyMenuCategoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId  string   `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Type     int32    `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Category []string `protobuf:"bytes,3,rep,name=category,proto3" json:"category,omitempty"`
}

func (x *ModifyMenuCategoryRequest) Reset() {
	*x = ModifyMenuCategoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyMenuCategoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyMenuCategoryRequest) ProtoMessage() {}

func (x *ModifyMenuCategoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyMenuCategoryRequest.ProtoReflect.Descriptor instead.
func (*ModifyMenuCategoryRequest) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{12}
}

func (x *ModifyMenuCategoryRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *ModifyMenuCategoryRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ModifyMenuCategoryRequest) GetCategory() []string {
	if x != nil {
		return x.Category
	}
	return nil
}

type ModifyMenuCategoryReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	EventId string `protobuf:"bytes,3,opt,name=eventId,proto3" json:"eventId,omitempty"`
}

func (x *ModifyMenuCategoryReply) Reset() {
	*x = ModifyMenuCategoryReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyMenuCategoryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyMenuCategoryReply) ProtoMessage() {}

func (x *ModifyMenuCategoryReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyMenuCategoryReply.ProtoReflect.Descriptor instead.
func (*ModifyMenuCategoryReply) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{13}
}

func (x *ModifyMenuCategoryReply) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ModifyMenuCategoryReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ModifyMenuCategoryReply) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

type CreateCoinCategoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId  string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Category string `protobuf:"bytes,2,opt,name=category,proto3" json:"category,omitempty"`
}

func (x *CreateCoinCategoryRequest) Reset() {
	*x = CreateCoinCategoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCoinCategoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCoinCategoryRequest) ProtoMessage() {}

func (x *CreateCoinCategoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCoinCategoryRequest.ProtoReflect.Descriptor instead.
func (*CreateCoinCategoryRequest) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{14}
}

func (x *CreateCoinCategoryRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *CreateCoinCategoryRequest) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

type CreateCoinCategoryReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	EventId string `protobuf:"bytes,3,opt,name=eventId,proto3" json:"eventId,omitempty"`
}

func (x *CreateCoinCategoryReply) Reset() {
	*x = CreateCoinCategoryReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCoinCategoryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCoinCategoryReply) ProtoMessage() {}

func (x *CreateCoinCategoryReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCoinCategoryReply.ProtoReflect.Descriptor instead.
func (*CreateCoinCategoryReply) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{15}
}

func (x *CreateCoinCategoryReply) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *CreateCoinCategoryReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateCoinCategoryReply) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

type ModifyCoinDescriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string            `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	CoinID  string            `protobuf:"bytes,2,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Desc    map[string]string `protobuf:"bytes,3,rep,name=desc,proto3" json:"desc,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ModifyCoinDescriptionRequest) Reset() {
	*x = ModifyCoinDescriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyCoinDescriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyCoinDescriptionRequest) ProtoMessage() {}

func (x *ModifyCoinDescriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyCoinDescriptionRequest.ProtoReflect.Descriptor instead.
func (*ModifyCoinDescriptionRequest) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{16}
}

func (x *ModifyCoinDescriptionRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *ModifyCoinDescriptionRequest) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *ModifyCoinDescriptionRequest) GetDesc() map[string]string {
	if x != nil {
		return x.Desc
	}
	return nil
}

type ModifyCoinDescriptionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	EventId string `protobuf:"bytes,3,opt,name=eventId,proto3" json:"eventId,omitempty"`
	CoinID  string `protobuf:"bytes,4,opt,name=coinID,proto3" json:"coinID,omitempty"`
}

func (x *ModifyCoinDescriptionReply) Reset() {
	*x = ModifyCoinDescriptionReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyCoinDescriptionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyCoinDescriptionReply) ProtoMessage() {}

func (x *ModifyCoinDescriptionReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyCoinDescriptionReply.ProtoReflect.Descriptor instead.
func (*ModifyCoinDescriptionReply) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{17}
}

func (x *ModifyCoinDescriptionReply) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ModifyCoinDescriptionReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ModifyCoinDescriptionReply) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *ModifyCoinDescriptionReply) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

type DescribeCexCoinsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId   string                                `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	CoinIDs   []string                              `protobuf:"bytes,2,rep,name=coinIDs,proto3" json:"coinIDs,omitempty"`
	Currency  string                                `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
	Category  *string                               `protobuf:"bytes,4,opt,name=category,proto3,oneof" json:"category,omitempty"`
	Page      int32                                 `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`
	PageSize  int32                                 `protobuf:"varint,6,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	SortField DescribeCexCoinsRequest_SortFieldEnum `protobuf:"varint,7,opt,name=sortField,proto3,enum=api.market.v1.DescribeCexCoinsRequest_SortFieldEnum" json:"sortField,omitempty"`
	SortType  string                                `protobuf:"bytes,8,opt,name=sortType,proto3" json:"sortType,omitempty"`
	ColumnID  int32                                 `protobuf:"varint,9,opt,name=columnID,proto3" json:"columnID,omitempty"`
}

func (x *DescribeCexCoinsRequest) Reset() {
	*x = DescribeCexCoinsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCexCoinsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCexCoinsRequest) ProtoMessage() {}

func (x *DescribeCexCoinsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCexCoinsRequest.ProtoReflect.Descriptor instead.
func (*DescribeCexCoinsRequest) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{18}
}

func (x *DescribeCexCoinsRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribeCexCoinsRequest) GetCoinIDs() []string {
	if x != nil {
		return x.CoinIDs
	}
	return nil
}

func (x *DescribeCexCoinsRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *DescribeCexCoinsRequest) GetCategory() string {
	if x != nil && x.Category != nil {
		return *x.Category
	}
	return ""
}

func (x *DescribeCexCoinsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *DescribeCexCoinsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *DescribeCexCoinsRequest) GetSortField() DescribeCexCoinsRequest_SortFieldEnum {
	if x != nil {
		return x.SortField
	}
	return DescribeCexCoinsRequest_Price
}

func (x *DescribeCexCoinsRequest) GetSortType() string {
	if x != nil {
		return x.SortType
	}
	return ""
}

func (x *DescribeCexCoinsRequest) GetColumnID() int32 {
	if x != nil {
		return x.ColumnID
	}
	return 0
}

type DescribeCexCoinsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coins []*DescribeCexCoinsReply_Coin `protobuf:"bytes,1,rep,name=coins,proto3" json:"coins,omitempty"`
	Total int32                         `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *DescribeCexCoinsReply) Reset() {
	*x = DescribeCexCoinsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCexCoinsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCexCoinsReply) ProtoMessage() {}

func (x *DescribeCexCoinsReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCexCoinsReply.ProtoReflect.Descriptor instead.
func (*DescribeCexCoinsReply) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{19}
}

func (x *DescribeCexCoinsReply) GetCoins() []*DescribeCexCoinsReply_Coin {
	if x != nil {
		return x.Coins
	}
	return nil
}

func (x *DescribeCexCoinsReply) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ModifyCoinCategoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId  string   `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	CoinID   string   `protobuf:"bytes,2,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Type     int32    `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	Category []string `protobuf:"bytes,4,rep,name=category,proto3" json:"category,omitempty"`
}

func (x *ModifyCoinCategoryRequest) Reset() {
	*x = ModifyCoinCategoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyCoinCategoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyCoinCategoryRequest) ProtoMessage() {}

func (x *ModifyCoinCategoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyCoinCategoryRequest.ProtoReflect.Descriptor instead.
func (*ModifyCoinCategoryRequest) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{20}
}

func (x *ModifyCoinCategoryRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *ModifyCoinCategoryRequest) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *ModifyCoinCategoryRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ModifyCoinCategoryRequest) GetCategory() []string {
	if x != nil {
		return x.Category
	}
	return nil
}

type ModifyCoinCategoryReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	EventId string `protobuf:"bytes,3,opt,name=eventId,proto3" json:"eventId,omitempty"`
	CoinID  string `protobuf:"bytes,4,opt,name=coinID,proto3" json:"coinID,omitempty"`
}

func (x *ModifyCoinCategoryReply) Reset() {
	*x = ModifyCoinCategoryReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyCoinCategoryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyCoinCategoryReply) ProtoMessage() {}

func (x *ModifyCoinCategoryReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyCoinCategoryReply.ProtoReflect.Descriptor instead.
func (*ModifyCoinCategoryReply) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{21}
}

func (x *ModifyCoinCategoryReply) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ModifyCoinCategoryReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ModifyCoinCategoryReply) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *ModifyCoinCategoryReply) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

type DescribeMenuCategoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Type    int32  `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *DescribeMenuCategoryRequest) Reset() {
	*x = DescribeMenuCategoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeMenuCategoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeMenuCategoryRequest) ProtoMessage() {}

func (x *DescribeMenuCategoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeMenuCategoryRequest.ProtoReflect.Descriptor instead.
func (*DescribeMenuCategoryRequest) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{22}
}

func (x *DescribeMenuCategoryRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribeMenuCategoryRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type DescribeMenuCategoryReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category []string `protobuf:"bytes,1,rep,name=category,proto3" json:"category,omitempty"`
}

func (x *DescribeMenuCategoryReply) Reset() {
	*x = DescribeMenuCategoryReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeMenuCategoryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeMenuCategoryReply) ProtoMessage() {}

func (x *DescribeMenuCategoryReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeMenuCategoryReply.ProtoReflect.Descriptor instead.
func (*DescribeMenuCategoryReply) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{23}
}

func (x *DescribeMenuCategoryReply) GetCategory() []string {
	if x != nil {
		return x.Category
	}
	return nil
}

type DescribeMarketExtraDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId  string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Currency string `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	CoinID   string `protobuf:"bytes,3,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Lang     string `protobuf:"bytes,4,opt,name=lang,proto3" json:"lang,omitempty"`
}

func (x *DescribeMarketExtraDetailRequest) Reset() {
	*x = DescribeMarketExtraDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeMarketExtraDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeMarketExtraDetailRequest) ProtoMessage() {}

func (x *DescribeMarketExtraDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeMarketExtraDetailRequest.ProtoReflect.Descriptor instead.
func (*DescribeMarketExtraDetailRequest) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{24}
}

func (x *DescribeMarketExtraDetailRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribeMarketExtraDetailRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *DescribeMarketExtraDetailRequest) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *DescribeMarketExtraDetailRequest) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

type DescribeMarketExtraDetailReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinID         string                                         `protobuf:"bytes,1,opt,name=coinID,proto3" json:"coinID,omitempty"`
	GenesisDate    string                                         `protobuf:"bytes,2,opt,name=genesisDate,proto3" json:"genesisDate,omitempty"`
	Description    string                                         `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	HomePage       []string                                       `protobuf:"bytes,4,rep,name=homePage,proto3" json:"homePage,omitempty"`
	BlockChainSite []string                                       `protobuf:"bytes,5,rep,name=blockChainSite,proto3" json:"blockChainSite,omitempty"`
	ChainAddress   []*DescribeMarketExtraDetailReply_ChainAddress `protobuf:"bytes,6,rep,name=chainAddress,proto3" json:"chainAddress,omitempty"`
	SocialLink     *DescribeMarketExtraDetailReply_SocialLink     `protobuf:"bytes,7,opt,name=socialLink,proto3" json:"socialLink,omitempty"`
}

func (x *DescribeMarketExtraDetailReply) Reset() {
	*x = DescribeMarketExtraDetailReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeMarketExtraDetailReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeMarketExtraDetailReply) ProtoMessage() {}

func (x *DescribeMarketExtraDetailReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeMarketExtraDetailReply.ProtoReflect.Descriptor instead.
func (*DescribeMarketExtraDetailReply) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{25}
}

func (x *DescribeMarketExtraDetailReply) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *DescribeMarketExtraDetailReply) GetGenesisDate() string {
	if x != nil {
		return x.GenesisDate
	}
	return ""
}

func (x *DescribeMarketExtraDetailReply) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DescribeMarketExtraDetailReply) GetHomePage() []string {
	if x != nil {
		return x.HomePage
	}
	return nil
}

func (x *DescribeMarketExtraDetailReply) GetBlockChainSite() []string {
	if x != nil {
		return x.BlockChainSite
	}
	return nil
}

func (x *DescribeMarketExtraDetailReply) GetChainAddress() []*DescribeMarketExtraDetailReply_ChainAddress {
	if x != nil {
		return x.ChainAddress
	}
	return nil
}

func (x *DescribeMarketExtraDetailReply) GetSocialLink() *DescribeMarketExtraDetailReply_SocialLink {
	if x != nil {
		return x.SocialLink
	}
	return nil
}

type DescribeCoinPriceChartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId    string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	CoinID     string `protobuf:"bytes,2,opt,name=coinID,proto3" json:"coinID,omitempty"`
	VsCurrency string `protobuf:"bytes,3,opt,name=vsCurrency,proto3" json:"vsCurrency,omitempty"`
	Days       int32  `protobuf:"varint,4,opt,name=days,proto3" json:"days,omitempty"`
}

func (x *DescribeCoinPriceChartRequest) Reset() {
	*x = DescribeCoinPriceChartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinPriceChartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinPriceChartRequest) ProtoMessage() {}

func (x *DescribeCoinPriceChartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinPriceChartRequest.ProtoReflect.Descriptor instead.
func (*DescribeCoinPriceChartRequest) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{26}
}

func (x *DescribeCoinPriceChartRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribeCoinPriceChartRequest) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *DescribeCoinPriceChartRequest) GetVsCurrency() string {
	if x != nil {
		return x.VsCurrency
	}
	return ""
}

func (x *DescribeCoinPriceChartRequest) GetDays() int32 {
	if x != nil {
		return x.Days
	}
	return 0
}

type DescribeCoinPriceChartReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prices       []*DescribeCoinPriceChartReply_PriceChart  `protobuf:"bytes,1,rep,name=prices,proto3" json:"prices,omitempty"`
	MarketCaps   []*DescribeCoinPriceChartReply_CapChart    `protobuf:"bytes,2,rep,name=market_caps,json=marketCaps,proto3" json:"market_caps,omitempty"`
	TotalVolumes []*DescribeCoinPriceChartReply_VolumeChart `protobuf:"bytes,3,rep,name=total_volumes,json=totalVolumes,proto3" json:"total_volumes,omitempty"`
}

func (x *DescribeCoinPriceChartReply) Reset() {
	*x = DescribeCoinPriceChartReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinPriceChartReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinPriceChartReply) ProtoMessage() {}

func (x *DescribeCoinPriceChartReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinPriceChartReply.ProtoReflect.Descriptor instead.
func (*DescribeCoinPriceChartReply) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{27}
}

func (x *DescribeCoinPriceChartReply) GetPrices() []*DescribeCoinPriceChartReply_PriceChart {
	if x != nil {
		return x.Prices
	}
	return nil
}

func (x *DescribeCoinPriceChartReply) GetMarketCaps() []*DescribeCoinPriceChartReply_CapChart {
	if x != nil {
		return x.MarketCaps
	}
	return nil
}

func (x *DescribeCoinPriceChartReply) GetTotalVolumes() []*DescribeCoinPriceChartReply_VolumeChart {
	if x != nil {
		return x.TotalVolumes
	}
	return nil
}

type DescribeCoinSwapsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId        string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	CoinID         string `protobuf:"bytes,2,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Currency       string `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
	BeginTimestamp uint32 `protobuf:"varint,4,opt,name=beginTimestamp,proto3" json:"beginTimestamp,omitempty"`
	EndTimestamp   uint32 `protobuf:"varint,5,opt,name=endTimestamp,proto3" json:"endTimestamp,omitempty"`
	Page           int32  `protobuf:"varint,6,opt,name=page,proto3" json:"page,omitempty"`
	PageSize       int32  `protobuf:"varint,7,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *DescribeCoinSwapsRequest) Reset() {
	*x = DescribeCoinSwapsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinSwapsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinSwapsRequest) ProtoMessage() {}

func (x *DescribeCoinSwapsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinSwapsRequest.ProtoReflect.Descriptor instead.
func (*DescribeCoinSwapsRequest) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{28}
}

func (x *DescribeCoinSwapsRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribeCoinSwapsRequest) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *DescribeCoinSwapsRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *DescribeCoinSwapsRequest) GetBeginTimestamp() uint32 {
	if x != nil {
		return x.BeginTimestamp
	}
	return 0
}

func (x *DescribeCoinSwapsRequest) GetEndTimestamp() uint32 {
	if x != nil {
		return x.EndTimestamp
	}
	return 0
}

func (x *DescribeCoinSwapsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *DescribeCoinSwapsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type DescribeCoinSwapsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Swaps []*DescribeCoinSwapsReply_CoinSwapsDetail `protobuf:"bytes,1,rep,name=swaps,proto3" json:"swaps,omitempty"`
	Total uint64                                    `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *DescribeCoinSwapsReply) Reset() {
	*x = DescribeCoinSwapsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinSwapsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinSwapsReply) ProtoMessage() {}

func (x *DescribeCoinSwapsReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinSwapsReply.ProtoReflect.Descriptor instead.
func (*DescribeCoinSwapsReply) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{29}
}

func (x *DescribeCoinSwapsReply) GetSwaps() []*DescribeCoinSwapsReply_CoinSwapsDetail {
	if x != nil {
		return x.Swaps
	}
	return nil
}

func (x *DescribeCoinSwapsReply) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type DescribeCoinLiquidityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId        string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	CoinID         string `protobuf:"bytes,2,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Currency       string `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
	BeginTimestamp uint32 `protobuf:"varint,4,opt,name=beginTimestamp,proto3" json:"beginTimestamp,omitempty"`
	EndTimestamp   uint32 `protobuf:"varint,5,opt,name=endTimestamp,proto3" json:"endTimestamp,omitempty"`
	Page           int32  `protobuf:"varint,6,opt,name=page,proto3" json:"page,omitempty"`
	PageSize       int32  `protobuf:"varint,7,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *DescribeCoinLiquidityRequest) Reset() {
	*x = DescribeCoinLiquidityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinLiquidityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinLiquidityRequest) ProtoMessage() {}

func (x *DescribeCoinLiquidityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinLiquidityRequest.ProtoReflect.Descriptor instead.
func (*DescribeCoinLiquidityRequest) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{30}
}

func (x *DescribeCoinLiquidityRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribeCoinLiquidityRequest) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *DescribeCoinLiquidityRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *DescribeCoinLiquidityRequest) GetBeginTimestamp() uint32 {
	if x != nil {
		return x.BeginTimestamp
	}
	return 0
}

func (x *DescribeCoinLiquidityRequest) GetEndTimestamp() uint32 {
	if x != nil {
		return x.EndTimestamp
	}
	return 0
}

func (x *DescribeCoinLiquidityRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *DescribeCoinLiquidityRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type DescribeCoinLiquidityReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Liquidity []*DescribeCoinLiquidityReply_CoinLiquidityDetail `protobuf:"bytes,1,rep,name=liquidity,proto3" json:"liquidity,omitempty"`
	Total     uint64                                            `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *DescribeCoinLiquidityReply) Reset() {
	*x = DescribeCoinLiquidityReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinLiquidityReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinLiquidityReply) ProtoMessage() {}

func (x *DescribeCoinLiquidityReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinLiquidityReply.ProtoReflect.Descriptor instead.
func (*DescribeCoinLiquidityReply) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{31}
}

func (x *DescribeCoinLiquidityReply) GetLiquidity() []*DescribeCoinLiquidityReply_CoinLiquidityDetail {
	if x != nil {
		return x.Liquidity
	}
	return nil
}

func (x *DescribeCoinLiquidityReply) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type DescribeCoinLiquidityChartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId  string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	CoinID   string `protobuf:"bytes,2,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Currency string `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
	Days     int32  `protobuf:"varint,4,opt,name=days,proto3" json:"days,omitempty"`
}

func (x *DescribeCoinLiquidityChartRequest) Reset() {
	*x = DescribeCoinLiquidityChartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinLiquidityChartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinLiquidityChartRequest) ProtoMessage() {}

func (x *DescribeCoinLiquidityChartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinLiquidityChartRequest.ProtoReflect.Descriptor instead.
func (*DescribeCoinLiquidityChartRequest) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{32}
}

func (x *DescribeCoinLiquidityChartRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribeCoinLiquidityChartRequest) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *DescribeCoinLiquidityChartRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *DescribeCoinLiquidityChartRequest) GetDays() int32 {
	if x != nil {
		return x.Days
	}
	return 0
}

type DescribeCoinLiquidityChartReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Liquidity []*DescribeCoinLiquidityChartReply_LiquidityChart `protobuf:"bytes,1,rep,name=liquidity,proto3" json:"liquidity,omitempty"`
}

func (x *DescribeCoinLiquidityChartReply) Reset() {
	*x = DescribeCoinLiquidityChartReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinLiquidityChartReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinLiquidityChartReply) ProtoMessage() {}

func (x *DescribeCoinLiquidityChartReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinLiquidityChartReply.ProtoReflect.Descriptor instead.
func (*DescribeCoinLiquidityChartReply) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{33}
}

func (x *DescribeCoinLiquidityChartReply) GetLiquidity() []*DescribeCoinLiquidityChartReply_LiquidityChart {
	if x != nil {
		return x.Liquidity
	}
	return nil
}

type DescribeCoinUserChartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	CoinID  string `protobuf:"bytes,2,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Days    int32  `protobuf:"varint,3,opt,name=days,proto3" json:"days,omitempty"`
}

func (x *DescribeCoinUserChartRequest) Reset() {
	*x = DescribeCoinUserChartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinUserChartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinUserChartRequest) ProtoMessage() {}

func (x *DescribeCoinUserChartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinUserChartRequest.ProtoReflect.Descriptor instead.
func (*DescribeCoinUserChartRequest) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{34}
}

func (x *DescribeCoinUserChartRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribeCoinUserChartRequest) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *DescribeCoinUserChartRequest) GetDays() int32 {
	if x != nil {
		return x.Days
	}
	return 0
}

type DescribeCoinUserChartReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []*DescribeCoinUserChartReply_UserChart `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *DescribeCoinUserChartReply) Reset() {
	*x = DescribeCoinUserChartReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinUserChartReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinUserChartReply) ProtoMessage() {}

func (x *DescribeCoinUserChartReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinUserChartReply.ProtoReflect.Descriptor instead.
func (*DescribeCoinUserChartReply) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{35}
}

func (x *DescribeCoinUserChartReply) GetUsers() []*DescribeCoinUserChartReply_UserChart {
	if x != nil {
		return x.Users
	}
	return nil
}

type DescribeCoinOrderChartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	CoinID  string `protobuf:"bytes,2,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Days    int32  `protobuf:"varint,3,opt,name=days,proto3" json:"days,omitempty"`
}

func (x *DescribeCoinOrderChartRequest) Reset() {
	*x = DescribeCoinOrderChartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinOrderChartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinOrderChartRequest) ProtoMessage() {}

func (x *DescribeCoinOrderChartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinOrderChartRequest.ProtoReflect.Descriptor instead.
func (*DescribeCoinOrderChartRequest) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{36}
}

func (x *DescribeCoinOrderChartRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribeCoinOrderChartRequest) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *DescribeCoinOrderChartRequest) GetDays() int32 {
	if x != nil {
		return x.Days
	}
	return 0
}

type DescribeCoinOrderChartReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Orders []*DescribeCoinOrderChartReply_OrderChart `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
}

func (x *DescribeCoinOrderChartReply) Reset() {
	*x = DescribeCoinOrderChartReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinOrderChartReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinOrderChartReply) ProtoMessage() {}

func (x *DescribeCoinOrderChartReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinOrderChartReply.ProtoReflect.Descriptor instead.
func (*DescribeCoinOrderChartReply) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{37}
}

func (x *DescribeCoinOrderChartReply) GetOrders() []*DescribeCoinOrderChartReply_OrderChart {
	if x != nil {
		return x.Orders
	}
	return nil
}

type DescribeCoinVolumeChartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId  string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	CoinID   string `protobuf:"bytes,2,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Currency string `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
	Days     int32  `protobuf:"varint,4,opt,name=days,proto3" json:"days,omitempty"`
}

func (x *DescribeCoinVolumeChartRequest) Reset() {
	*x = DescribeCoinVolumeChartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinVolumeChartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinVolumeChartRequest) ProtoMessage() {}

func (x *DescribeCoinVolumeChartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinVolumeChartRequest.ProtoReflect.Descriptor instead.
func (*DescribeCoinVolumeChartRequest) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{38}
}

func (x *DescribeCoinVolumeChartRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribeCoinVolumeChartRequest) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *DescribeCoinVolumeChartRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *DescribeCoinVolumeChartRequest) GetDays() int32 {
	if x != nil {
		return x.Days
	}
	return 0
}

type DescribeCoinVolumeChartReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Volumes []*DescribeCoinVolumeChartReply_VolumeChart `protobuf:"bytes,1,rep,name=volumes,proto3" json:"volumes,omitempty"`
}

func (x *DescribeCoinVolumeChartReply) Reset() {
	*x = DescribeCoinVolumeChartReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinVolumeChartReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinVolumeChartReply) ProtoMessage() {}

func (x *DescribeCoinVolumeChartReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinVolumeChartReply.ProtoReflect.Descriptor instead.
func (*DescribeCoinVolumeChartReply) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{39}
}

func (x *DescribeCoinVolumeChartReply) GetVolumes() []*DescribeCoinVolumeChartReply_VolumeChart {
	if x != nil {
		return x.Volumes
	}
	return nil
}

type DescribeCoinSwapStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId  string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	CoinID   string `protobuf:"bytes,2,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Currency string `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *DescribeCoinSwapStatsRequest) Reset() {
	*x = DescribeCoinSwapStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinSwapStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinSwapStatsRequest) ProtoMessage() {}

func (x *DescribeCoinSwapStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinSwapStatsRequest.ProtoReflect.Descriptor instead.
func (*DescribeCoinSwapStatsRequest) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{40}
}

func (x *DescribeCoinSwapStatsRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribeCoinSwapStatsRequest) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *DescribeCoinSwapStatsRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

type DescribeCoinSwapStatsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Liquidity float64                                    `protobuf:"fixed64,1,opt,name=liquidity,proto3" json:"liquidity,omitempty"`
	Volume24H *DescribeCoinSwapStatsReply_SwapStatDouble `protobuf:"bytes,2,opt,name=volume24h,proto3" json:"volume24h,omitempty"`
	Orders24H *DescribeCoinSwapStatsReply_SwapStatInt    `protobuf:"bytes,3,opt,name=orders24h,proto3" json:"orders24h,omitempty"`
	Users24H  *DescribeCoinSwapStatsReply_SwapStatInt    `protobuf:"bytes,4,opt,name=users24h,proto3" json:"users24h,omitempty"`
}

func (x *DescribeCoinSwapStatsReply) Reset() {
	*x = DescribeCoinSwapStatsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinSwapStatsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinSwapStatsReply) ProtoMessage() {}

func (x *DescribeCoinSwapStatsReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinSwapStatsReply.ProtoReflect.Descriptor instead.
func (*DescribeCoinSwapStatsReply) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{41}
}

func (x *DescribeCoinSwapStatsReply) GetLiquidity() float64 {
	if x != nil {
		return x.Liquidity
	}
	return 0
}

func (x *DescribeCoinSwapStatsReply) GetVolume24H() *DescribeCoinSwapStatsReply_SwapStatDouble {
	if x != nil {
		return x.Volume24H
	}
	return nil
}

func (x *DescribeCoinSwapStatsReply) GetOrders24H() *DescribeCoinSwapStatsReply_SwapStatInt {
	if x != nil {
		return x.Orders24H
	}
	return nil
}

func (x *DescribeCoinSwapStatsReply) GetUsers24H() *DescribeCoinSwapStatsReply_SwapStatInt {
	if x != nil {
		return x.Users24H
	}
	return nil
}

type DescribeDeFiCoinsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId   string                                   `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Currency  string                                   `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	Page      int32                                    `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PageSize  int32                                    `protobuf:"varint,4,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	SortField DescribeDeFiCoinsRequest_SortFieldDefine `protobuf:"varint,5,opt,name=sortField,proto3,enum=api.market.v1.DescribeDeFiCoinsRequest_SortFieldDefine" json:"sortField,omitempty"`
	SortType  string                                   `protobuf:"bytes,6,opt,name=sortType,proto3" json:"sortType,omitempty"`
	Category  string                                   `protobuf:"bytes,7,opt,name=category,proto3" json:"category,omitempty"`
	CoinID    string                                   `protobuf:"bytes,8,opt,name=coinID,proto3" json:"coinID,omitempty"`
	CoinIDs   []string                                 `protobuf:"bytes,9,rep,name=coinIDs,proto3" json:"coinIDs,omitempty"`
	ColumnID  int32                                    `protobuf:"varint,10,opt,name=columnID,proto3" json:"columnID,omitempty"`
}

func (x *DescribeDeFiCoinsRequest) Reset() {
	*x = DescribeDeFiCoinsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeDeFiCoinsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeDeFiCoinsRequest) ProtoMessage() {}

func (x *DescribeDeFiCoinsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeDeFiCoinsRequest.ProtoReflect.Descriptor instead.
func (*DescribeDeFiCoinsRequest) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{42}
}

func (x *DescribeDeFiCoinsRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribeDeFiCoinsRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *DescribeDeFiCoinsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *DescribeDeFiCoinsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *DescribeDeFiCoinsRequest) GetSortField() DescribeDeFiCoinsRequest_SortFieldDefine {
	if x != nil {
		return x.SortField
	}
	return DescribeDeFiCoinsRequest_Liquidity
}

func (x *DescribeDeFiCoinsRequest) GetSortType() string {
	if x != nil {
		return x.SortType
	}
	return ""
}

func (x *DescribeDeFiCoinsRequest) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *DescribeDeFiCoinsRequest) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *DescribeDeFiCoinsRequest) GetCoinIDs() []string {
	if x != nil {
		return x.CoinIDs
	}
	return nil
}

func (x *DescribeDeFiCoinsRequest) GetColumnID() int32 {
	if x != nil {
		return x.ColumnID
	}
	return 0
}

type DescribeDeFiCoinsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coins []*DescribeDeFiCoinsReply_DeFiCoin `protobuf:"bytes,1,rep,name=coins,proto3" json:"coins,omitempty"`
	Total int32                              `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *DescribeDeFiCoinsReply) Reset() {
	*x = DescribeDeFiCoinsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeDeFiCoinsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeDeFiCoinsReply) ProtoMessage() {}

func (x *DescribeDeFiCoinsReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeDeFiCoinsReply.ProtoReflect.Descriptor instead.
func (*DescribeDeFiCoinsReply) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{43}
}

func (x *DescribeDeFiCoinsReply) GetCoins() []*DescribeDeFiCoinsReply_DeFiCoin {
	if x != nil {
		return x.Coins
	}
	return nil
}

func (x *DescribeDeFiCoinsReply) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type DescribeCoinSimplesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string   `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	CoinIDs []string `protobuf:"bytes,2,rep,name=coinIDs,proto3" json:"coinIDs,omitempty"`
}

func (x *DescribeCoinSimplesRequest) Reset() {
	*x = DescribeCoinSimplesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinSimplesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinSimplesRequest) ProtoMessage() {}

func (x *DescribeCoinSimplesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinSimplesRequest.ProtoReflect.Descriptor instead.
func (*DescribeCoinSimplesRequest) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{44}
}

func (x *DescribeCoinSimplesRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribeCoinSimplesRequest) GetCoinIDs() []string {
	if x != nil {
		return x.CoinIDs
	}
	return nil
}

type DescribeCoinSimplesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coins []*DescribeCoinSimplesReply_CoinSimple `protobuf:"bytes,1,rep,name=coins,proto3" json:"coins,omitempty"`
}

func (x *DescribeCoinSimplesReply) Reset() {
	*x = DescribeCoinSimplesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinSimplesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinSimplesReply) ProtoMessage() {}

func (x *DescribeCoinSimplesReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinSimplesReply.ProtoReflect.Descriptor instead.
func (*DescribeCoinSimplesReply) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{45}
}

func (x *DescribeCoinSimplesReply) GetCoins() []*DescribeCoinSimplesReply_CoinSimple {
	if x != nil {
		return x.Coins
	}
	return nil
}

type SearchCoinsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId  string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Keyword  string `protobuf:"bytes,2,opt,name=keyword,proto3" json:"keyword,omitempty"`
	PageSize int32  `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *SearchCoinsRequest) Reset() {
	*x = SearchCoinsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchCoinsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchCoinsRequest) ProtoMessage() {}

func (x *SearchCoinsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchCoinsRequest.ProtoReflect.Descriptor instead.
func (*SearchCoinsRequest) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{46}
}

func (x *SearchCoinsRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *SearchCoinsRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SearchCoinsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type SearchCoinsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coins []*SearchCoinsReply_CoinSimple `protobuf:"bytes,1,rep,name=coins,proto3" json:"coins,omitempty"`
}

func (x *SearchCoinsReply) Reset() {
	*x = SearchCoinsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchCoinsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchCoinsReply) ProtoMessage() {}

func (x *SearchCoinsReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchCoinsReply.ProtoReflect.Descriptor instead.
func (*SearchCoinsReply) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{47}
}

func (x *SearchCoinsReply) GetCoins() []*SearchCoinsReply_CoinSimple {
	if x != nil {
		return x.Coins
	}
	return nil
}

type DescribeTokensRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId  string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	CoinID   string `protobuf:"bytes,2,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Symbol   string `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Address  string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	Chain    string `protobuf:"bytes,5,opt,name=chain,proto3" json:"chain,omitempty"`
	Page     int32  `protobuf:"varint,6,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int32  `protobuf:"varint,7,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *DescribeTokensRequest) Reset() {
	*x = DescribeTokensRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTokensRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTokensRequest) ProtoMessage() {}

func (x *DescribeTokensRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTokensRequest.ProtoReflect.Descriptor instead.
func (*DescribeTokensRequest) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{48}
}

func (x *DescribeTokensRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribeTokensRequest) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *DescribeTokensRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *DescribeTokensRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *DescribeTokensRequest) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *DescribeTokensRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *DescribeTokensRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type DescribeTokensReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total  int32                        `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Tokens []*DescribeTokensReply_Token `protobuf:"bytes,2,rep,name=tokens,proto3" json:"tokens,omitempty"`
}

func (x *DescribeTokensReply) Reset() {
	*x = DescribeTokensReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTokensReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTokensReply) ProtoMessage() {}

func (x *DescribeTokensReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTokensReply.ProtoReflect.Descriptor instead.
func (*DescribeTokensReply) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{49}
}

func (x *DescribeTokensReply) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *DescribeTokensReply) GetTokens() []*DescribeTokensReply_Token {
	if x != nil {
		return x.Tokens
	}
	return nil
}

type DescribeGuruChainsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
}

func (x *DescribeGuruChainsRequest) Reset() {
	*x = DescribeGuruChainsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeGuruChainsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeGuruChainsRequest) ProtoMessage() {}

func (x *DescribeGuruChainsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeGuruChainsRequest.ProtoReflect.Descriptor instead.
func (*DescribeGuruChainsRequest) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{50}
}

func (x *DescribeGuruChainsRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

type DescribeGuruChainsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chains []*DescribeGuruChainsReply_Chain `protobuf:"bytes,1,rep,name=chains,proto3" json:"chains,omitempty"`
}

func (x *DescribeGuruChainsReply) Reset() {
	*x = DescribeGuruChainsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeGuruChainsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeGuruChainsReply) ProtoMessage() {}

func (x *DescribeGuruChainsReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeGuruChainsReply.ProtoReflect.Descriptor instead.
func (*DescribeGuruChainsReply) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{51}
}

func (x *DescribeGuruChainsReply) GetChains() []*DescribeGuruChainsReply_Chain {
	if x != nil {
		return x.Chains
	}
	return nil
}

type DescribeSwapConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	CoinID  string `protobuf:"bytes,2,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Client  int32  `protobuf:"varint,3,opt,name=client,proto3" json:"client,omitempty"`
}

func (x *DescribeSwapConfigRequest) Reset() {
	*x = DescribeSwapConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeSwapConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeSwapConfigRequest) ProtoMessage() {}

func (x *DescribeSwapConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeSwapConfigRequest.ProtoReflect.Descriptor instead.
func (*DescribeSwapConfigRequest) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{52}
}

func (x *DescribeSwapConfigRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribeSwapConfigRequest) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *DescribeSwapConfigRequest) GetClient() int32 {
	if x != nil {
		return x.Client
	}
	return 0
}

type DescribeSwapConfigReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category int32  `protobuf:"varint,1,opt,name=category,proto3" json:"category,omitempty"`
	Config   string `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *DescribeSwapConfigReply) Reset() {
	*x = DescribeSwapConfigReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeSwapConfigReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeSwapConfigReply) ProtoMessage() {}

func (x *DescribeSwapConfigReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeSwapConfigReply.ProtoReflect.Descriptor instead.
func (*DescribeSwapConfigReply) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{53}
}

func (x *DescribeSwapConfigReply) GetCategory() int32 {
	if x != nil {
		return x.Category
	}
	return 0
}

func (x *DescribeSwapConfigReply) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

type DescribeCoinsByFieldsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string   `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	CoinIDs []string `protobuf:"bytes,2,rep,name=coinIDs,proto3" json:"coinIDs,omitempty"`
	Fields  []string `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *DescribeCoinsByFieldsRequest) Reset() {
	*x = DescribeCoinsByFieldsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinsByFieldsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinsByFieldsRequest) ProtoMessage() {}

func (x *DescribeCoinsByFieldsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinsByFieldsRequest.ProtoReflect.Descriptor instead.
func (*DescribeCoinsByFieldsRequest) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{54}
}

func (x *DescribeCoinsByFieldsRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribeCoinsByFieldsRequest) GetCoinIDs() []string {
	if x != nil {
		return x.CoinIDs
	}
	return nil
}

func (x *DescribeCoinsByFieldsRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

type DescribeCoinsByFieldsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coins []*DescribeCoinsByFieldsReply_Coin `protobuf:"bytes,1,rep,name=coins,proto3" json:"coins,omitempty"`
}

func (x *DescribeCoinsByFieldsReply) Reset() {
	*x = DescribeCoinsByFieldsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinsByFieldsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinsByFieldsReply) ProtoMessage() {}

func (x *DescribeCoinsByFieldsReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinsByFieldsReply.ProtoReflect.Descriptor instead.
func (*DescribeCoinsByFieldsReply) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{55}
}

func (x *DescribeCoinsByFieldsReply) GetCoins() []*DescribeCoinsByFieldsReply_Coin {
	if x != nil {
		return x.Coins
	}
	return nil
}

type DescribeTokensByFieldsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string   `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Address []string `protobuf:"bytes,2,rep,name=address,proto3" json:"address,omitempty"`
	Fields  []string `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *DescribeTokensByFieldsRequest) Reset() {
	*x = DescribeTokensByFieldsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTokensByFieldsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTokensByFieldsRequest) ProtoMessage() {}

func (x *DescribeTokensByFieldsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTokensByFieldsRequest.ProtoReflect.Descriptor instead.
func (*DescribeTokensByFieldsRequest) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{56}
}

func (x *DescribeTokensByFieldsRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *DescribeTokensByFieldsRequest) GetAddress() []string {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *DescribeTokensByFieldsRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

type DescribeTokensByFieldsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tokens []*DescribeTokensByFieldsReply_Token `protobuf:"bytes,1,rep,name=tokens,proto3" json:"tokens,omitempty"`
}

func (x *DescribeTokensByFieldsReply) Reset() {
	*x = DescribeTokensByFieldsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTokensByFieldsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTokensByFieldsReply) ProtoMessage() {}

func (x *DescribeTokensByFieldsReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTokensByFieldsReply.ProtoReflect.Descriptor instead.
func (*DescribeTokensByFieldsReply) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{57}
}

func (x *DescribeTokensByFieldsReply) GetTokens() []*DescribeTokensByFieldsReply_Token {
	if x != nil {
		return x.Tokens
	}
	return nil
}

type Currency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cny float64 `protobuf:"fixed64,1,opt,name=cny,proto3" json:"cny,omitempty"`
	Usd float64 `protobuf:"fixed64,2,opt,name=usd,proto3" json:"usd,omitempty"`
}

func (x *Currency) Reset() {
	*x = Currency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Currency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Currency) ProtoMessage() {}

func (x *Currency) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Currency.ProtoReflect.Descriptor instead.
func (*Currency) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{58}
}

func (x *Currency) GetCny() float64 {
	if x != nil {
		return x.Cny
	}
	return 0
}

func (x *Currency) GetUsd() float64 {
	if x != nil {
		return x.Usd
	}
	return 0
}

type DescribeColumnListReply_Column struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColumnID int32             `protobuf:"varint,1,opt,name=columnID,proto3" json:"columnID,omitempty"`
	Name     map[string]string `protobuf:"bytes,2,rep,name=name,proto3" json:"name,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Type     int32             `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	Category []string          `protobuf:"bytes,7,rep,name=category,proto3" json:"category,omitempty"`
	Weight   int32             `protobuf:"varint,8,opt,name=weight,proto3" json:"weight,omitempty"`
	Valid    bool              `protobuf:"varint,9,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (x *DescribeColumnListReply_Column) Reset() {
	*x = DescribeColumnListReply_Column{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeColumnListReply_Column) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeColumnListReply_Column) ProtoMessage() {}

func (x *DescribeColumnListReply_Column) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeColumnListReply_Column.ProtoReflect.Descriptor instead.
func (*DescribeColumnListReply_Column) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{7, 0}
}

func (x *DescribeColumnListReply_Column) GetColumnID() int32 {
	if x != nil {
		return x.ColumnID
	}
	return 0
}

func (x *DescribeColumnListReply_Column) GetName() map[string]string {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *DescribeColumnListReply_Column) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *DescribeColumnListReply_Column) GetCategory() []string {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *DescribeColumnListReply_Column) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *DescribeColumnListReply_Column) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

type DescribeCexCoinsReply_Coin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank                  int32    `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`
	CoinID                string   `protobuf:"bytes,2,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Price                 float64  `protobuf:"fixed64,6,opt,name=price,proto3" json:"price,omitempty"`
	Delta1H               float64  `protobuf:"fixed64,7,opt,name=delta1h,proto3" json:"delta1h,omitempty"`
	Delta24H              float64  `protobuf:"fixed64,8,opt,name=delta24h,proto3" json:"delta24h,omitempty"`
	Delta7D               float64  `protobuf:"fixed64,9,opt,name=delta7d,proto3" json:"delta7d,omitempty"`
	Delta30D              float64  `protobuf:"fixed64,10,opt,name=delta30d,proto3" json:"delta30d,omitempty"`
	Delta1Y               float64  `protobuf:"fixed64,11,opt,name=delta1y,proto3" json:"delta1y,omitempty"`
	Volume24H             float64  `protobuf:"fixed64,12,opt,name=volume24h,proto3" json:"volume24h,omitempty"`
	MarketCap             float64  `protobuf:"fixed64,13,opt,name=marketCap,proto3" json:"marketCap,omitempty"`
	FullyDilutedValuation float64  `protobuf:"fixed64,14,opt,name=fullyDilutedValuation,proto3" json:"fullyDilutedValuation,omitempty"`
	TotalSupply           float64  `protobuf:"fixed64,15,opt,name=totalSupply,proto3" json:"totalSupply,omitempty"`
	MaxSupply             float64  `protobuf:"fixed64,16,opt,name=maxSupply,proto3" json:"maxSupply,omitempty"`
	CirculatingSupply     float64  `protobuf:"fixed64,17,opt,name=circulatingSupply,proto3" json:"circulatingSupply,omitempty"`
	High24                float64  `protobuf:"fixed64,18,opt,name=high24,proto3" json:"high24,omitempty"`
	Low24                 float64  `protobuf:"fixed64,19,opt,name=low24,proto3" json:"low24,omitempty"`
	Sparkline7D           string   `protobuf:"bytes,20,opt,name=sparkline7d,proto3" json:"sparkline7d,omitempty"`
	Category              []string `protobuf:"bytes,21,rep,name=category,proto3" json:"category,omitempty"`
	UpdatedAt             string   `protobuf:"bytes,22,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *DescribeCexCoinsReply_Coin) Reset() {
	*x = DescribeCexCoinsReply_Coin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCexCoinsReply_Coin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCexCoinsReply_Coin) ProtoMessage() {}

func (x *DescribeCexCoinsReply_Coin) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCexCoinsReply_Coin.ProtoReflect.Descriptor instead.
func (*DescribeCexCoinsReply_Coin) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{19, 0}
}

func (x *DescribeCexCoinsReply_Coin) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *DescribeCexCoinsReply_Coin) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *DescribeCexCoinsReply_Coin) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *DescribeCexCoinsReply_Coin) GetDelta1H() float64 {
	if x != nil {
		return x.Delta1H
	}
	return 0
}

func (x *DescribeCexCoinsReply_Coin) GetDelta24H() float64 {
	if x != nil {
		return x.Delta24H
	}
	return 0
}

func (x *DescribeCexCoinsReply_Coin) GetDelta7D() float64 {
	if x != nil {
		return x.Delta7D
	}
	return 0
}

func (x *DescribeCexCoinsReply_Coin) GetDelta30D() float64 {
	if x != nil {
		return x.Delta30D
	}
	return 0
}

func (x *DescribeCexCoinsReply_Coin) GetDelta1Y() float64 {
	if x != nil {
		return x.Delta1Y
	}
	return 0
}

func (x *DescribeCexCoinsReply_Coin) GetVolume24H() float64 {
	if x != nil {
		return x.Volume24H
	}
	return 0
}

func (x *DescribeCexCoinsReply_Coin) GetMarketCap() float64 {
	if x != nil {
		return x.MarketCap
	}
	return 0
}

func (x *DescribeCexCoinsReply_Coin) GetFullyDilutedValuation() float64 {
	if x != nil {
		return x.FullyDilutedValuation
	}
	return 0
}

func (x *DescribeCexCoinsReply_Coin) GetTotalSupply() float64 {
	if x != nil {
		return x.TotalSupply
	}
	return 0
}

func (x *DescribeCexCoinsReply_Coin) GetMaxSupply() float64 {
	if x != nil {
		return x.MaxSupply
	}
	return 0
}

func (x *DescribeCexCoinsReply_Coin) GetCirculatingSupply() float64 {
	if x != nil {
		return x.CirculatingSupply
	}
	return 0
}

func (x *DescribeCexCoinsReply_Coin) GetHigh24() float64 {
	if x != nil {
		return x.High24
	}
	return 0
}

func (x *DescribeCexCoinsReply_Coin) GetLow24() float64 {
	if x != nil {
		return x.Low24
	}
	return 0
}

func (x *DescribeCexCoinsReply_Coin) GetSparkline7D() string {
	if x != nil {
		return x.Sparkline7D
	}
	return ""
}

func (x *DescribeCexCoinsReply_Coin) GetCategory() []string {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *DescribeCexCoinsReply_Coin) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type DescribeMarketExtraDetailReply_ChainAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chain   string `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *DescribeMarketExtraDetailReply_ChainAddress) Reset() {
	*x = DescribeMarketExtraDetailReply_ChainAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeMarketExtraDetailReply_ChainAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeMarketExtraDetailReply_ChainAddress) ProtoMessage() {}

func (x *DescribeMarketExtraDetailReply_ChainAddress) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeMarketExtraDetailReply_ChainAddress.ProtoReflect.Descriptor instead.
func (*DescribeMarketExtraDetailReply_ChainAddress) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{25, 0}
}

func (x *DescribeMarketExtraDetailReply_ChainAddress) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *DescribeMarketExtraDetailReply_ChainAddress) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type DescribeMarketExtraDetailReply_SocialLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Twitter  string `protobuf:"bytes,1,opt,name=twitter,proto3" json:"twitter,omitempty"`
	Facebook string `protobuf:"bytes,2,opt,name=facebook,proto3" json:"facebook,omitempty"`
	Reddit   string `protobuf:"bytes,3,opt,name=reddit,proto3" json:"reddit,omitempty"`
	Telegram string `protobuf:"bytes,4,opt,name=telegram,proto3" json:"telegram,omitempty"`
}

func (x *DescribeMarketExtraDetailReply_SocialLink) Reset() {
	*x = DescribeMarketExtraDetailReply_SocialLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeMarketExtraDetailReply_SocialLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeMarketExtraDetailReply_SocialLink) ProtoMessage() {}

func (x *DescribeMarketExtraDetailReply_SocialLink) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeMarketExtraDetailReply_SocialLink.ProtoReflect.Descriptor instead.
func (*DescribeMarketExtraDetailReply_SocialLink) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{25, 1}
}

func (x *DescribeMarketExtraDetailReply_SocialLink) GetTwitter() string {
	if x != nil {
		return x.Twitter
	}
	return ""
}

func (x *DescribeMarketExtraDetailReply_SocialLink) GetFacebook() string {
	if x != nil {
		return x.Facebook
	}
	return ""
}

func (x *DescribeMarketExtraDetailReply_SocialLink) GetReddit() string {
	if x != nil {
		return x.Reddit
	}
	return ""
}

func (x *DescribeMarketExtraDetailReply_SocialLink) GetTelegram() string {
	if x != nil {
		return x.Telegram
	}
	return ""
}

type DescribeCoinPriceChartReply_PriceChart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp uint32  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Price     float64 `protobuf:"fixed64,2,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *DescribeCoinPriceChartReply_PriceChart) Reset() {
	*x = DescribeCoinPriceChartReply_PriceChart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinPriceChartReply_PriceChart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinPriceChartReply_PriceChart) ProtoMessage() {}

func (x *DescribeCoinPriceChartReply_PriceChart) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinPriceChartReply_PriceChart.ProtoReflect.Descriptor instead.
func (*DescribeCoinPriceChartReply_PriceChart) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{27, 0}
}

func (x *DescribeCoinPriceChartReply_PriceChart) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DescribeCoinPriceChartReply_PriceChart) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

type DescribeCoinPriceChartReply_CapChart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp uint32  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Cap       float64 `protobuf:"fixed64,2,opt,name=cap,proto3" json:"cap,omitempty"`
}

func (x *DescribeCoinPriceChartReply_CapChart) Reset() {
	*x = DescribeCoinPriceChartReply_CapChart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinPriceChartReply_CapChart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinPriceChartReply_CapChart) ProtoMessage() {}

func (x *DescribeCoinPriceChartReply_CapChart) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinPriceChartReply_CapChart.ProtoReflect.Descriptor instead.
func (*DescribeCoinPriceChartReply_CapChart) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{27, 1}
}

func (x *DescribeCoinPriceChartReply_CapChart) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DescribeCoinPriceChartReply_CapChart) GetCap() float64 {
	if x != nil {
		return x.Cap
	}
	return 0
}

type DescribeCoinPriceChartReply_VolumeChart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp uint32  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Volume    float64 `protobuf:"fixed64,2,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (x *DescribeCoinPriceChartReply_VolumeChart) Reset() {
	*x = DescribeCoinPriceChartReply_VolumeChart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinPriceChartReply_VolumeChart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinPriceChartReply_VolumeChart) ProtoMessage() {}

func (x *DescribeCoinPriceChartReply_VolumeChart) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinPriceChartReply_VolumeChart.ProtoReflect.Descriptor instead.
func (*DescribeCoinPriceChartReply_VolumeChart) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{27, 2}
}

func (x *DescribeCoinPriceChartReply_VolumeChart) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DescribeCoinPriceChartReply_VolumeChart) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

type DescribeCoinSwapsReply_CoinSwapsDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID            string  `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Timestamp       uint32  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Amm             string  `protobuf:"bytes,3,opt,name=amm,proto3" json:"amm,omitempty"`
	Chain           string  `protobuf:"bytes,4,opt,name=chain,proto3" json:"chain,omitempty"`
	Price           float64 `protobuf:"fixed64,5,opt,name=price,proto3" json:"price,omitempty"`
	SenderCoinID    string  `protobuf:"bytes,6,opt,name=senderCoinID,proto3" json:"senderCoinID,omitempty"`
	ReceiverCoinID  string  `protobuf:"bytes,7,opt,name=receiverCoinID,proto3" json:"receiverCoinID,omitempty"`
	SenderAddress   string  `protobuf:"bytes,8,opt,name=senderAddress,proto3" json:"senderAddress,omitempty"`
	ReceiverAddress string  `protobuf:"bytes,9,opt,name=receiverAddress,proto3" json:"receiverAddress,omitempty"`
	TokenIn         string  `protobuf:"bytes,10,opt,name=tokenIn,proto3" json:"tokenIn,omitempty"`
	TokenOut        string  `protobuf:"bytes,11,opt,name=tokenOut,proto3" json:"tokenOut,omitempty"`
	PairAddress     string  `protobuf:"bytes,12,opt,name=pairAddress,proto3" json:"pairAddress,omitempty"`
	WalletAddress   string  `protobuf:"bytes,13,opt,name=walletAddress,proto3" json:"walletAddress,omitempty"`
	BlockNumber     uint32  `protobuf:"varint,14,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
	WalletCategory  string  `protobuf:"bytes,15,opt,name=walletCategory,proto3" json:"walletCategory,omitempty"`
	TransType       string  `protobuf:"bytes,16,opt,name=transType,proto3" json:"transType,omitempty"`
	TransAddress    string  `protobuf:"bytes,17,opt,name=transAddress,proto3" json:"transAddress,omitempty"`
}

func (x *DescribeCoinSwapsReply_CoinSwapsDetail) Reset() {
	*x = DescribeCoinSwapsReply_CoinSwapsDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinSwapsReply_CoinSwapsDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinSwapsReply_CoinSwapsDetail) ProtoMessage() {}

func (x *DescribeCoinSwapsReply_CoinSwapsDetail) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinSwapsReply_CoinSwapsDetail.ProtoReflect.Descriptor instead.
func (*DescribeCoinSwapsReply_CoinSwapsDetail) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{29, 0}
}

func (x *DescribeCoinSwapsReply_CoinSwapsDetail) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *DescribeCoinSwapsReply_CoinSwapsDetail) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DescribeCoinSwapsReply_CoinSwapsDetail) GetAmm() string {
	if x != nil {
		return x.Amm
	}
	return ""
}

func (x *DescribeCoinSwapsReply_CoinSwapsDetail) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *DescribeCoinSwapsReply_CoinSwapsDetail) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *DescribeCoinSwapsReply_CoinSwapsDetail) GetSenderCoinID() string {
	if x != nil {
		return x.SenderCoinID
	}
	return ""
}

func (x *DescribeCoinSwapsReply_CoinSwapsDetail) GetReceiverCoinID() string {
	if x != nil {
		return x.ReceiverCoinID
	}
	return ""
}

func (x *DescribeCoinSwapsReply_CoinSwapsDetail) GetSenderAddress() string {
	if x != nil {
		return x.SenderAddress
	}
	return ""
}

func (x *DescribeCoinSwapsReply_CoinSwapsDetail) GetReceiverAddress() string {
	if x != nil {
		return x.ReceiverAddress
	}
	return ""
}

func (x *DescribeCoinSwapsReply_CoinSwapsDetail) GetTokenIn() string {
	if x != nil {
		return x.TokenIn
	}
	return ""
}

func (x *DescribeCoinSwapsReply_CoinSwapsDetail) GetTokenOut() string {
	if x != nil {
		return x.TokenOut
	}
	return ""
}

func (x *DescribeCoinSwapsReply_CoinSwapsDetail) GetPairAddress() string {
	if x != nil {
		return x.PairAddress
	}
	return ""
}

func (x *DescribeCoinSwapsReply_CoinSwapsDetail) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *DescribeCoinSwapsReply_CoinSwapsDetail) GetBlockNumber() uint32 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *DescribeCoinSwapsReply_CoinSwapsDetail) GetWalletCategory() string {
	if x != nil {
		return x.WalletCategory
	}
	return ""
}

func (x *DescribeCoinSwapsReply_CoinSwapsDetail) GetTransType() string {
	if x != nil {
		return x.TransType
	}
	return ""
}

func (x *DescribeCoinSwapsReply_CoinSwapsDetail) GetTransAddress() string {
	if x != nil {
		return x.TransAddress
	}
	return ""
}

type DescribeCoinLiquidityReply_CoinLiquidityDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID          string  `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Timestamp     uint32  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Amm           string  `protobuf:"bytes,3,opt,name=amm,proto3" json:"amm,omitempty"`
	Chain         string  `protobuf:"bytes,4,opt,name=chain,proto3" json:"chain,omitempty"`
	Price         float64 `protobuf:"fixed64,5,opt,name=price,proto3" json:"price,omitempty"`
	Token1CoinID  string  `protobuf:"bytes,6,opt,name=token1CoinID,proto3" json:"token1CoinID,omitempty"`
	Token2CoinID  string  `protobuf:"bytes,7,opt,name=token2CoinID,proto3" json:"token2CoinID,omitempty"`
	Token1Address string  `protobuf:"bytes,8,opt,name=token1Address,proto3" json:"token1Address,omitempty"`
	Token2Address string  `protobuf:"bytes,9,opt,name=token2Address,proto3" json:"token2Address,omitempty"`
	Token1        string  `protobuf:"bytes,10,opt,name=token1,proto3" json:"token1,omitempty"`
	Token2        string  `protobuf:"bytes,11,opt,name=token2,proto3" json:"token2,omitempty"`
	PairAddress   string  `protobuf:"bytes,12,opt,name=pairAddress,proto3" json:"pairAddress,omitempty"`
	WalletAddress string  `protobuf:"bytes,13,opt,name=walletAddress,proto3" json:"walletAddress,omitempty"`
	BlockNumber   uint32  `protobuf:"varint,14,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
	TransType     string  `protobuf:"bytes,15,opt,name=transType,proto3" json:"transType,omitempty"`
	TransAddress  string  `protobuf:"bytes,16,opt,name=transAddress,proto3" json:"transAddress,omitempty"`
}

func (x *DescribeCoinLiquidityReply_CoinLiquidityDetail) Reset() {
	*x = DescribeCoinLiquidityReply_CoinLiquidityDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinLiquidityReply_CoinLiquidityDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinLiquidityReply_CoinLiquidityDetail) ProtoMessage() {}

func (x *DescribeCoinLiquidityReply_CoinLiquidityDetail) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinLiquidityReply_CoinLiquidityDetail.ProtoReflect.Descriptor instead.
func (*DescribeCoinLiquidityReply_CoinLiquidityDetail) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{31, 0}
}

func (x *DescribeCoinLiquidityReply_CoinLiquidityDetail) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *DescribeCoinLiquidityReply_CoinLiquidityDetail) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DescribeCoinLiquidityReply_CoinLiquidityDetail) GetAmm() string {
	if x != nil {
		return x.Amm
	}
	return ""
}

func (x *DescribeCoinLiquidityReply_CoinLiquidityDetail) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *DescribeCoinLiquidityReply_CoinLiquidityDetail) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *DescribeCoinLiquidityReply_CoinLiquidityDetail) GetToken1CoinID() string {
	if x != nil {
		return x.Token1CoinID
	}
	return ""
}

func (x *DescribeCoinLiquidityReply_CoinLiquidityDetail) GetToken2CoinID() string {
	if x != nil {
		return x.Token2CoinID
	}
	return ""
}

func (x *DescribeCoinLiquidityReply_CoinLiquidityDetail) GetToken1Address() string {
	if x != nil {
		return x.Token1Address
	}
	return ""
}

func (x *DescribeCoinLiquidityReply_CoinLiquidityDetail) GetToken2Address() string {
	if x != nil {
		return x.Token2Address
	}
	return ""
}

func (x *DescribeCoinLiquidityReply_CoinLiquidityDetail) GetToken1() string {
	if x != nil {
		return x.Token1
	}
	return ""
}

func (x *DescribeCoinLiquidityReply_CoinLiquidityDetail) GetToken2() string {
	if x != nil {
		return x.Token2
	}
	return ""
}

func (x *DescribeCoinLiquidityReply_CoinLiquidityDetail) GetPairAddress() string {
	if x != nil {
		return x.PairAddress
	}
	return ""
}

func (x *DescribeCoinLiquidityReply_CoinLiquidityDetail) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *DescribeCoinLiquidityReply_CoinLiquidityDetail) GetBlockNumber() uint32 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *DescribeCoinLiquidityReply_CoinLiquidityDetail) GetTransType() string {
	if x != nil {
		return x.TransType
	}
	return ""
}

func (x *DescribeCoinLiquidityReply_CoinLiquidityDetail) GetTransAddress() string {
	if x != nil {
		return x.TransAddress
	}
	return ""
}

type DescribeCoinLiquidityChartReply_LiquidityChart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp uint32  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Price     float64 `protobuf:"fixed64,2,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *DescribeCoinLiquidityChartReply_LiquidityChart) Reset() {
	*x = DescribeCoinLiquidityChartReply_LiquidityChart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinLiquidityChartReply_LiquidityChart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinLiquidityChartReply_LiquidityChart) ProtoMessage() {}

func (x *DescribeCoinLiquidityChartReply_LiquidityChart) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinLiquidityChartReply_LiquidityChart.ProtoReflect.Descriptor instead.
func (*DescribeCoinLiquidityChartReply_LiquidityChart) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{33, 0}
}

func (x *DescribeCoinLiquidityChartReply_LiquidityChart) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DescribeCoinLiquidityChartReply_LiquidityChart) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

type DescribeCoinUserChartReply_UserChart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp uint32 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Buy       int32  `protobuf:"varint,2,opt,name=buy,proto3" json:"buy,omitempty"`
	Sell      int32  `protobuf:"varint,3,opt,name=sell,proto3" json:"sell,omitempty"`
	Total     int32  `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *DescribeCoinUserChartReply_UserChart) Reset() {
	*x = DescribeCoinUserChartReply_UserChart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinUserChartReply_UserChart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinUserChartReply_UserChart) ProtoMessage() {}

func (x *DescribeCoinUserChartReply_UserChart) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinUserChartReply_UserChart.ProtoReflect.Descriptor instead.
func (*DescribeCoinUserChartReply_UserChart) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{35, 0}
}

func (x *DescribeCoinUserChartReply_UserChart) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DescribeCoinUserChartReply_UserChart) GetBuy() int32 {
	if x != nil {
		return x.Buy
	}
	return 0
}

func (x *DescribeCoinUserChartReply_UserChart) GetSell() int32 {
	if x != nil {
		return x.Sell
	}
	return 0
}

func (x *DescribeCoinUserChartReply_UserChart) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type DescribeCoinOrderChartReply_OrderChart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp uint32 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Buy       int32  `protobuf:"varint,2,opt,name=buy,proto3" json:"buy,omitempty"`
	Sell      int32  `protobuf:"varint,3,opt,name=sell,proto3" json:"sell,omitempty"`
	Total     int32  `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *DescribeCoinOrderChartReply_OrderChart) Reset() {
	*x = DescribeCoinOrderChartReply_OrderChart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinOrderChartReply_OrderChart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinOrderChartReply_OrderChart) ProtoMessage() {}

func (x *DescribeCoinOrderChartReply_OrderChart) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinOrderChartReply_OrderChart.ProtoReflect.Descriptor instead.
func (*DescribeCoinOrderChartReply_OrderChart) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{37, 0}
}

func (x *DescribeCoinOrderChartReply_OrderChart) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DescribeCoinOrderChartReply_OrderChart) GetBuy() int32 {
	if x != nil {
		return x.Buy
	}
	return 0
}

func (x *DescribeCoinOrderChartReply_OrderChart) GetSell() int32 {
	if x != nil {
		return x.Sell
	}
	return 0
}

func (x *DescribeCoinOrderChartReply_OrderChart) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type DescribeCoinVolumeChartReply_VolumeChart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp uint32  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Buy       float64 `protobuf:"fixed64,2,opt,name=buy,proto3" json:"buy,omitempty"`
	Sell      float64 `protobuf:"fixed64,3,opt,name=sell,proto3" json:"sell,omitempty"`
	Total     float64 `protobuf:"fixed64,4,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *DescribeCoinVolumeChartReply_VolumeChart) Reset() {
	*x = DescribeCoinVolumeChartReply_VolumeChart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinVolumeChartReply_VolumeChart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinVolumeChartReply_VolumeChart) ProtoMessage() {}

func (x *DescribeCoinVolumeChartReply_VolumeChart) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinVolumeChartReply_VolumeChart.ProtoReflect.Descriptor instead.
func (*DescribeCoinVolumeChartReply_VolumeChart) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{39, 0}
}

func (x *DescribeCoinVolumeChartReply_VolumeChart) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DescribeCoinVolumeChartReply_VolumeChart) GetBuy() float64 {
	if x != nil {
		return x.Buy
	}
	return 0
}

func (x *DescribeCoinVolumeChartReply_VolumeChart) GetSell() float64 {
	if x != nil {
		return x.Sell
	}
	return 0
}

func (x *DescribeCoinVolumeChartReply_VolumeChart) GetTotal() float64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type DescribeCoinSwapStatsReply_SwapStatInt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Buy   int32 `protobuf:"varint,2,opt,name=buy,proto3" json:"buy,omitempty"`
	Sell  int32 `protobuf:"varint,3,opt,name=sell,proto3" json:"sell,omitempty"`
}

func (x *DescribeCoinSwapStatsReply_SwapStatInt) Reset() {
	*x = DescribeCoinSwapStatsReply_SwapStatInt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinSwapStatsReply_SwapStatInt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinSwapStatsReply_SwapStatInt) ProtoMessage() {}

func (x *DescribeCoinSwapStatsReply_SwapStatInt) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinSwapStatsReply_SwapStatInt.ProtoReflect.Descriptor instead.
func (*DescribeCoinSwapStatsReply_SwapStatInt) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{41, 0}
}

func (x *DescribeCoinSwapStatsReply_SwapStatInt) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *DescribeCoinSwapStatsReply_SwapStatInt) GetBuy() int32 {
	if x != nil {
		return x.Buy
	}
	return 0
}

func (x *DescribeCoinSwapStatsReply_SwapStatInt) GetSell() int32 {
	if x != nil {
		return x.Sell
	}
	return 0
}

type DescribeCoinSwapStatsReply_SwapStatDouble struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total float64 `protobuf:"fixed64,1,opt,name=total,proto3" json:"total,omitempty"`
	Buy   float64 `protobuf:"fixed64,2,opt,name=buy,proto3" json:"buy,omitempty"`
	Sell  float64 `protobuf:"fixed64,3,opt,name=sell,proto3" json:"sell,omitempty"`
}

func (x *DescribeCoinSwapStatsReply_SwapStatDouble) Reset() {
	*x = DescribeCoinSwapStatsReply_SwapStatDouble{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinSwapStatsReply_SwapStatDouble) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinSwapStatsReply_SwapStatDouble) ProtoMessage() {}

func (x *DescribeCoinSwapStatsReply_SwapStatDouble) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinSwapStatsReply_SwapStatDouble.ProtoReflect.Descriptor instead.
func (*DescribeCoinSwapStatsReply_SwapStatDouble) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{41, 1}
}

func (x *DescribeCoinSwapStatsReply_SwapStatDouble) GetTotal() float64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *DescribeCoinSwapStatsReply_SwapStatDouble) GetBuy() float64 {
	if x != nil {
		return x.Buy
	}
	return 0
}

func (x *DescribeCoinSwapStatsReply_SwapStatDouble) GetSell() float64 {
	if x != nil {
		return x.Sell
	}
	return 0
}

type DescribeDeFiCoinsReply_DeFiCoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinID        string   `protobuf:"bytes,1,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Price         float64  `protobuf:"fixed64,2,opt,name=price,proto3" json:"price,omitempty"`
	PriceDelta24H float64  `protobuf:"fixed64,3,opt,name=priceDelta24h,proto3" json:"priceDelta24h,omitempty"`
	Liquidity     float64  `protobuf:"fixed64,4,opt,name=liquidity,proto3" json:"liquidity,omitempty"`
	Volume24H     float64  `protobuf:"fixed64,5,opt,name=volume24h,proto3" json:"volume24h,omitempty"`
	Orders24H     int32    `protobuf:"varint,6,opt,name=orders24h,proto3" json:"orders24h,omitempty"`
	Users24H      int32    `protobuf:"varint,7,opt,name=users24h,proto3" json:"users24h,omitempty"`
	Category      []string `protobuf:"bytes,8,rep,name=category,proto3" json:"category,omitempty"`
	Rank          int32    `protobuf:"varint,9,opt,name=rank,proto3" json:"rank,omitempty"`
}

func (x *DescribeDeFiCoinsReply_DeFiCoin) Reset() {
	*x = DescribeDeFiCoinsReply_DeFiCoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeDeFiCoinsReply_DeFiCoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeDeFiCoinsReply_DeFiCoin) ProtoMessage() {}

func (x *DescribeDeFiCoinsReply_DeFiCoin) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeDeFiCoinsReply_DeFiCoin.ProtoReflect.Descriptor instead.
func (*DescribeDeFiCoinsReply_DeFiCoin) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{43, 0}
}

func (x *DescribeDeFiCoinsReply_DeFiCoin) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *DescribeDeFiCoinsReply_DeFiCoin) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *DescribeDeFiCoinsReply_DeFiCoin) GetPriceDelta24H() float64 {
	if x != nil {
		return x.PriceDelta24H
	}
	return 0
}

func (x *DescribeDeFiCoinsReply_DeFiCoin) GetLiquidity() float64 {
	if x != nil {
		return x.Liquidity
	}
	return 0
}

func (x *DescribeDeFiCoinsReply_DeFiCoin) GetVolume24H() float64 {
	if x != nil {
		return x.Volume24H
	}
	return 0
}

func (x *DescribeDeFiCoinsReply_DeFiCoin) GetOrders24H() int32 {
	if x != nil {
		return x.Orders24H
	}
	return 0
}

func (x *DescribeDeFiCoinsReply_DeFiCoin) GetUsers24H() int32 {
	if x != nil {
		return x.Users24H
	}
	return 0
}

func (x *DescribeDeFiCoinsReply_DeFiCoin) GetCategory() []string {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *DescribeDeFiCoinsReply_DeFiCoin) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

type DescribeCoinSimplesReply_CoinSimple struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinID string `protobuf:"bytes,1,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Symbol string `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Image  string `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *DescribeCoinSimplesReply_CoinSimple) Reset() {
	*x = DescribeCoinSimplesReply_CoinSimple{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinSimplesReply_CoinSimple) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinSimplesReply_CoinSimple) ProtoMessage() {}

func (x *DescribeCoinSimplesReply_CoinSimple) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinSimplesReply_CoinSimple.ProtoReflect.Descriptor instead.
func (*DescribeCoinSimplesReply_CoinSimple) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{45, 0}
}

func (x *DescribeCoinSimplesReply_CoinSimple) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *DescribeCoinSimplesReply_CoinSimple) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DescribeCoinSimplesReply_CoinSimple) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *DescribeCoinSimplesReply_CoinSimple) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

type SearchCoinsReply_CoinSimple struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinID string `protobuf:"bytes,1,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Symbol string `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Image  string `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *SearchCoinsReply_CoinSimple) Reset() {
	*x = SearchCoinsReply_CoinSimple{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchCoinsReply_CoinSimple) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchCoinsReply_CoinSimple) ProtoMessage() {}

func (x *SearchCoinsReply_CoinSimple) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchCoinsReply_CoinSimple.ProtoReflect.Descriptor instead.
func (*SearchCoinsReply_CoinSimple) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{47, 0}
}

func (x *SearchCoinsReply_CoinSimple) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *SearchCoinsReply_CoinSimple) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SearchCoinsReply_CoinSimple) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *SearchCoinsReply_CoinSimple) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

type DescribeTokensReply_Token struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp uint32  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Name      string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Symbol    string  `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	CoinID    string  `protobuf:"bytes,4,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Address   string  `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	Liquidity float64 `protobuf:"fixed64,6,opt,name=liquidity,proto3" json:"liquidity,omitempty"`
	Chain     string  `protobuf:"bytes,7,opt,name=chain,proto3" json:"chain,omitempty"`
}

func (x *DescribeTokensReply_Token) Reset() {
	*x = DescribeTokensReply_Token{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTokensReply_Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTokensReply_Token) ProtoMessage() {}

func (x *DescribeTokensReply_Token) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTokensReply_Token.ProtoReflect.Descriptor instead.
func (*DescribeTokensReply_Token) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{49, 0}
}

func (x *DescribeTokensReply_Token) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DescribeTokensReply_Token) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DescribeTokensReply_Token) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *DescribeTokensReply_Token) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *DescribeTokensReply_Token) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *DescribeTokensReply_Token) GetLiquidity() float64 {
	if x != nil {
		return x.Liquidity
	}
	return 0
}

func (x *DescribeTokensReply_Token) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

type DescribeGuruChainsReply_Chain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chain       string `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *DescribeGuruChainsReply_Chain) Reset() {
	*x = DescribeGuruChainsReply_Chain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeGuruChainsReply_Chain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeGuruChainsReply_Chain) ProtoMessage() {}

func (x *DescribeGuruChainsReply_Chain) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeGuruChainsReply_Chain.ProtoReflect.Descriptor instead.
func (*DescribeGuruChainsReply_Chain) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{51, 0}
}

func (x *DescribeGuruChainsReply_Chain) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *DescribeGuruChainsReply_Chain) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DescribeGuruChainsReply_Chain) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type DescribeCoinsByFieldsReply_Coin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinID string    `protobuf:"bytes,1,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Price  *Currency `protobuf:"bytes,2,opt,name=price,proto3" json:"price,omitempty"`
	Icon   string    `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
}

func (x *DescribeCoinsByFieldsReply_Coin) Reset() {
	*x = DescribeCoinsByFieldsReply_Coin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCoinsByFieldsReply_Coin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCoinsByFieldsReply_Coin) ProtoMessage() {}

func (x *DescribeCoinsByFieldsReply_Coin) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCoinsByFieldsReply_Coin.ProtoReflect.Descriptor instead.
func (*DescribeCoinsByFieldsReply_Coin) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{55, 0}
}

func (x *DescribeCoinsByFieldsReply_Coin) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *DescribeCoinsByFieldsReply_Coin) GetPrice() *Currency {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *DescribeCoinsByFieldsReply_Coin) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

type DescribeTokensByFieldsReply_Token struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinID  string    `protobuf:"bytes,1,opt,name=coinID,proto3" json:"coinID,omitempty"`
	Address string    `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Price   *Currency `protobuf:"bytes,3,opt,name=price,proto3" json:"price,omitempty"`
	Icon    string    `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
}

func (x *DescribeTokensByFieldsReply_Token) Reset() {
	*x = DescribeTokensByFieldsReply_Token{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_market_v1_market_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTokensByFieldsReply_Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTokensByFieldsReply_Token) ProtoMessage() {}

func (x *DescribeTokensByFieldsReply_Token) ProtoReflect() protoreflect.Message {
	mi := &file_api_market_v1_market_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTokensByFieldsReply_Token.ProtoReflect.Descriptor instead.
func (*DescribeTokensByFieldsReply_Token) Descriptor() ([]byte, []int) {
	return file_api_market_v1_market_proto_rawDescGZIP(), []int{57, 0}
}

func (x *DescribeTokensByFieldsReply_Token) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *DescribeTokensByFieldsReply_Token) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *DescribeTokensByFieldsReply_Token) GetPrice() *Currency {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *DescribeTokensByFieldsReply_Token) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

var File_api_market_v1_market_proto protoreflect.FileDescriptor

var file_api_market_v1_market_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2f, 0x76, 0x31, 0x2f,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x17, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbe, 0x02, 0x0a, 0x13, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x49, 0x44, 0x12, 0x40, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x1d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09,
	0xfa, 0x42, 0x06, 0x1a, 0x04, 0x30, 0x01, 0x30, 0x02, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x88,
	0x01, 0x01, 0x1a, 0x37, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x22, 0x5b, 0x0a, 0x11, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x22, 0x4d, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x44, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x44,
	0x73, 0x22, 0x5b, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xa2,
	0x02, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x40, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1d,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42,
	0x06, 0x1a, 0x04, 0x30, 0x01, 0x30, 0x02, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x88, 0x01, 0x01,
	0x1a, 0x37, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x22, 0x5b, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x22, 0xe2, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x64, 0x20,
	0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x22, 0x83, 0x03, 0x0a, 0x17, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x47, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x1a, 0x88, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x44, 0x12, 0x4b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x1a, 0x37, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5a, 0x0a, 0x1d, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x6c, 0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x22, 0xc0, 0x02, 0x0a, 0x1b, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x41, 0x6c, 0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12,
	0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x68, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53,
	0x69, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69,
	0x73, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x78, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x78, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x48, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x6c,
	0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x1a, 0x37, 0x0a, 0x09, 0x44, 0x65, 0x73, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x37, 0x0a, 0x1b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x22, 0x37, 0x0a, 0x19, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x70, 0x0a, 0x19,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4d, 0x65, 0x6e, 0x75, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x30, 0x01, 0x30, 0x02, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x61,
	0x0a, 0x17, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4d, 0x65, 0x6e, 0x75, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0x5a, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x61, 0x0a,
	0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x22, 0xdd, 0x01, 0x0a, 0x1c, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x06, 0x63,
	0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x49, 0x0a, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x1a, 0x37, 0x0a, 0x09, 0x44, 0x65, 0x73, 0x63, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x7c, 0x0a, 0x1a, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x22, 0xe2,
	0x03, 0x0a, 0x17, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x65, 0x78, 0x43, 0x6f,
	0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x73, 0x12, 0x23,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x28, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x48, 0x00,
	0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x1a, 0x02, 0x20, 0x00, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42,
	0x06, 0x1a, 0x04, 0x18, 0x64, 0x20, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x5c, 0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x65, 0x78,
	0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x6f, 0x72,
	0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x44, 0x22, 0x5d, 0x0a, 0x0d, 0x53, 0x6f, 0x72, 0x74, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x74,
	0x61, 0x32, 0x34, 0x68, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x32, 0x34, 0x68, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43,
	0x61, 0x70, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c,
	0x74, 0x61, 0x37, 0x64, 0x10, 0x04, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x22, 0xa9, 0x05, 0x0a, 0x15, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x43, 0x65, 0x78, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3f, 0x0a,
	0x05, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x65, 0x78, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x1a, 0xb8, 0x04, 0x0a, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e,
	0x6b, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x31, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x07, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x31, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x6c,
	0x74, 0x61, 0x32, 0x34, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x65, 0x6c,
	0x74, 0x61, 0x32, 0x34, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x37, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x37, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x33, 0x30, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x33, 0x30, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x31, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x31, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x32,
	0x34, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x32, 0x34, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x70,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61,
	0x70, 0x12, 0x34, 0x0a, 0x15, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x44, 0x69, 0x6c, 0x75, 0x74, 0x65,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x15, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x44, 0x69, 0x6c, 0x75, 0x74, 0x65, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x78,
	0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x61,
	0x78, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x69, 0x72, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x11, 0x63, 0x69, 0x72, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53,
	0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x69, 0x67, 0x68, 0x32, 0x34, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x68, 0x69, 0x67, 0x68, 0x32, 0x34, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x6f, 0x77, 0x32, 0x34, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x6c, 0x6f,
	0x77, 0x32, 0x34, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x6c, 0x69, 0x6e, 0x65,
	0x37, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x6c,
	0x69, 0x6e, 0x65, 0x37, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22,
	0x91, 0x01, 0x0a, 0x19, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x1d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x30, 0x01, 0x30,
	0x02, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x22, 0x79, 0x0a, 0x17, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x69,
	0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x22, 0x56,
	0x0a, 0x1b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x30, 0x01, 0x30, 0x02,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x37, 0x0a, 0x19, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22,
	0x9f, 0x01, 0x0a, 0x20, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x1f, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x6f,
	0x69, 0x6e, 0x49, 0x44, 0x12, 0x1b, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6c, 0x61, 0x6e,
	0x67, 0x22, 0xb2, 0x04, 0x0a, 0x1e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b,
	0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x69, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x53, 0x69, 0x74, 0x65, 0x12, 0x5e, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x58, 0x0a, 0x0a, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x4c, 0x69,
	0x6e, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x4c, 0x69,
	0x6e, 0x6b, 0x52, 0x0a, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x1a, 0x3e,
	0x0a, 0x0c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x76,
	0x0a, 0x0a, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f,
	0x6f, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f,
	0x6f, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65,
	0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65,
	0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x22, 0xa3, 0x01, 0x0a, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x6f, 0x69,
	0x6e, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x0a, 0x76, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x0a, 0x76, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1e, 0x0a, 0x04,
	0x64, 0x61, 0x79, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x1a,
	0x05, 0x18, 0xa6, 0x59, 0x20, 0x00, 0x52, 0x04, 0x64, 0x61, 0x79, 0x73, 0x22, 0xe2, 0x03, 0x0a,
	0x1b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4d, 0x0a, 0x06,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x52, 0x06, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x0b, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x61, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x43, 0x61, 0x70,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x70,
	0x73, 0x12, 0x5b, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x1a, 0x40,
	0x0a, 0x0a, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x1a, 0x3a, 0x0a, 0x08, 0x43, 0x61, 0x70, 0x43, 0x68, 0x61, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x61,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x63, 0x61, 0x70, 0x1a, 0x43, 0x0a, 0x0b,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x22, 0x8b, 0x02, 0x0a, 0x18, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f,
	0x69, 0x6e, 0x53, 0x77, 0x61, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x26,
	0x0a, 0x0e, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1b, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20,
	0x00, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x1a, 0x05,
	0x18, 0xf4, 0x03, 0x20, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22,
	0xa5, 0x05, 0x0a, 0x16, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e,
	0x53, 0x77, 0x61, 0x70, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4b, 0x0a, 0x05, 0x73, 0x77,
	0x61, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x77, 0x61, 0x70, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x77, 0x61, 0x70, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x05, 0x73, 0x77, 0x61, 0x70, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x1a, 0xa7, 0x04,
	0x0a, 0x0f, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x77, 0x61, 0x70, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6d, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x61, 0x6d, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x49,
	0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43,
	0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x24, 0x0a,
	0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x4f, 0x75, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x4f, 0x75, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x69, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x69, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a,
	0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x8f, 0x02, 0x0a, 0x1c, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x6f, 0x69,
	0x6e, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x65, 0x67, 0x69,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x1b, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x26, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x1a, 0x05, 0x18, 0xf4, 0x03, 0x20, 0x00, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x87, 0x05, 0x0a, 0x1a, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x5b, 0x0a, 0x09, 0x6c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x09, 0x6c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x1a, 0xf5, 0x03, 0x0a, 0x13,
	0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6d, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x61, 0x6d, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x31, 0x43, 0x6f, 0x69,
	0x6e, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x31, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x32, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x32, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x31, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x31, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x32, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x32,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x31, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x31, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x32, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x32, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x69, 0x72, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61,
	0x69, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0xa3, 0x01, 0x0a, 0x21, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x6f,
	0x69, 0x6e, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1e, 0x0a, 0x04, 0x64, 0x61, 0x79,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x1a, 0x05, 0x18, 0xa6,
	0x59, 0x20, 0x00, 0x52, 0x04, 0x64, 0x61, 0x79, 0x73, 0x22, 0xc4, 0x01, 0x0a, 0x1f, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x5b, 0x0a,
	0x09, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52,
	0x09, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x1a, 0x44, 0x0a, 0x0e, 0x4c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x22, 0x79, 0x0a, 0x1c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x06, 0x63, 0x6f,
	0x69, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x04, 0x64,
	0x61, 0x79, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x1a, 0x05,
	0x18, 0xa6, 0x59, 0x20, 0x00, 0x52, 0x04, 0x64, 0x61, 0x79, 0x73, 0x22, 0xce, 0x01, 0x0a, 0x1a,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x49, 0x0a, 0x05, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x05,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x1a, 0x65, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x10, 0x0a, 0x03, 0x62, 0x75, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x62,
	0x75, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x73, 0x65, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x7a, 0x0a, 0x1d,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x04, 0x64, 0x61, 0x79, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x1a, 0x05, 0x18, 0xa6, 0x59,
	0x20, 0x00, 0x52, 0x04, 0x64, 0x61, 0x79, 0x73, 0x22, 0xd4, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4d, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x43, 0x6f, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52,
	0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x1a, 0x66, 0x0a, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x75, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x62, 0x75, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x65, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22,
	0xa0, 0x01, 0x0a, 0x1e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x06,
	0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x23, 0x0a,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x1e, 0x0a, 0x04, 0x64, 0x61, 0x79, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x0a, 0xfa, 0x42, 0x07, 0x1a, 0x05, 0x18, 0xa6, 0x59, 0x20, 0x00, 0x52, 0x04, 0x64, 0x61,
	0x79, 0x73, 0x22, 0xda, 0x01, 0x0a, 0x1c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43,
	0x6f, 0x69, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x51, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69,
	0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x07, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x1a, 0x67, 0x0a, 0x0b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x75, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x03, 0x62, 0x75, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x04, 0x73, 0x65, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22,
	0x7e, 0x0a, 0x1c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x53,
	0x77, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x06, 0x63, 0x6f, 0x69,
	0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22,
	0xd3, 0x03, 0x0a, 0x1a, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e,
	0x53, 0x77, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x56, 0x0a, 0x09,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x32, 0x34, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x77, 0x61, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x32, 0x34, 0x68, 0x12, 0x53, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x32, 0x34,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x43, 0x6f, 0x69, 0x6e, 0x53, 0x77, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x49, 0x6e, 0x74, 0x52, 0x09,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x32, 0x34, 0x68, 0x12, 0x51, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x32, 0x34, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x77, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x49,
	0x6e, 0x74, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x73, 0x32, 0x34, 0x68, 0x1a, 0x49, 0x0a, 0x0b,
	0x53, 0x77, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x49, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x75, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x62, 0x75, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x73, 0x65, 0x6c, 0x6c, 0x1a, 0x4c, 0x0a, 0x0e, 0x53, 0x77, 0x61, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x10, 0x0a, 0x03, 0x62, 0x75, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x62, 0x75,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x04, 0x73, 0x65, 0x6c, 0x6c, 0x22, 0xfa, 0x03, 0x0a, 0x18, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x44, 0x65, 0x46, 0x69, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x1b, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x25,
	0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x64, 0x20, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x5f, 0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x44, 0x65, 0x46, 0x69, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x73, 0x6f, 0x72,
	0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x44, 0x22, 0x74, 0x0a, 0x0f,
	0x53, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x12,
	0x0d, 0x0a, 0x09, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x32, 0x34, 0x68, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x32, 0x34, 0x68, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x32, 0x34, 0x68, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x65,
	0x6c, 0x74, 0x61, 0x32, 0x34, 0x68, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x10, 0x06, 0x22, 0xfb, 0x02, 0x0a, 0x16, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x44,
	0x65, 0x46, 0x69, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x44, 0x0a,
	0x05, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x44, 0x65, 0x46, 0x69, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x2e, 0x44, 0x65, 0x46, 0x69, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x05, 0x63, 0x6f,
	0x69, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x1a, 0x84, 0x02, 0x0a, 0x08, 0x44, 0x65,
	0x46, 0x69, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c,
	0x74, 0x61, 0x32, 0x34, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x32, 0x34, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c,
	0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x32, 0x34, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x32, 0x34, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x32, 0x34, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x32, 0x34, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x73, 0x32, 0x34, 0x68,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x73, 0x32, 0x34, 0x68,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x61, 0x6e, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b,
	0x22, 0x5a, 0x0a, 0x1a, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e,
	0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x07, 0x63, 0x6f, 0x69, 0x6e,
	0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01,
	0x02, 0x08, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x73, 0x22, 0xcc, 0x01, 0x0a,
	0x18, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x48, 0x0a, 0x05, 0x63, 0x6f, 0x69,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x05, 0x63, 0x6f,
	0x69, 0x6e, 0x73, 0x1a, 0x66, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x78, 0x0a, 0x12, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x25,
	0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x64, 0x20, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x40, 0x0a, 0x05, 0x63, 0x6f,
	0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x1a, 0x66, 0x0a, 0x0a,
	0x43, 0x6f, 0x69, 0x6e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f,
	0x69, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e,
	0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x22, 0xd5, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x64,
	0x20, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xa7, 0x02, 0x0a,
	0x13, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x40, 0x0a, 0x06, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x1a, 0xb7, 0x01, 0x0a,
	0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x22, 0x35, 0x0a, 0x19, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x47, 0x75, 0x72, 0x75, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xb4, 0x01,
	0x0a, 0x17, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x47, 0x75, 0x72, 0x75, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x44, 0x0a, 0x06, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x47, 0x75, 0x72, 0x75, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x06, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x1a,
	0x53, 0x0a, 0x05, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x79, 0x0a, 0x19, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x53, 0x77, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x06, 0x63,
	0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x21, 0x0a, 0x06,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42,
	0x06, 0x1a, 0x04, 0x30, 0x01, 0x30, 0x02, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x22,
	0x4d, 0x0a, 0x17, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x77, 0x61, 0x70, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x80,
	0x01, 0x0a, 0x1c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x73,
	0x42, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x07, 0x63, 0x6f, 0x69,
	0x6e, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92,
	0x01, 0x04, 0x08, 0x01, 0x10, 0x64, 0x52, 0x07, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x73, 0x12,
	0x20, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x22, 0xc5, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f,
	0x69, 0x6e, 0x73, 0x42, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x44, 0x0a, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x42, 0x79, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52,
	0x05, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x1a, 0x61, 0x0a, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0x81, 0x01, 0x0a, 0x1d, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x42, 0x79, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01,
	0x10, 0x64, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0xe5, 0x01,
	0x0a, 0x1b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x42, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x48, 0x0a,
	0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x42, 0x79, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x1a, 0x7c, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0x2e, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03,
	0x63, 0x6e, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x73, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x03, 0x75, 0x73, 0x64, 0x32, 0x95, 0x18, 0x0a, 0x06, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x12, 0x63, 0x0a, 0x11, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e,
	0x53, 0x77, 0x61, 0x70, 0x73, 0x12, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f,
	0x69, 0x6e, 0x53, 0x77, 0x61, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x77, 0x61, 0x70, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x6f, 0x0a, 0x15, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x2b,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x6f, 0x0a, 0x15, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x77, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x77, 0x61, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x77, 0x61, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x72, 0x0a, 0x16, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x12, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x60, 0x0a, 0x10, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x65, 0x78, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x12,
	0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x65, 0x78, 0x43, 0x6f, 0x69, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x43, 0x65, 0x78, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x72, 0x0a,
	0x16, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x6c, 0x6c, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x41, 0x6c, 0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x6c,
	0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x7b, 0x0a, 0x19, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x6c,
	0x0a, 0x14, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d,
	0x65, 0x6e, 0x75, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x66, 0x0a, 0x12,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4d, 0x65, 0x6e, 0x75, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4d, 0x65, 0x6e, 0x75, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x4d, 0x65, 0x6e, 0x75, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x6c, 0x0a, 0x14, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x6f, 0x0a, 0x15, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x69, 0x6e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43,
	0x6f, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x66, 0x0a, 0x12, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x69,
	0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x43, 0x6f, 0x69, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x66, 0x0a, 0x12, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x54, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x12, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x54, 0x0a, 0x0c, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x54, 0x0a, 0x0c, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12,
	0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x66, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x69, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x28, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x6f, 0x0a,
	0x15, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x68, 0x61, 0x72, 0x74, 0x12, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43,
	0x6f, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x72,
	0x0a, 0x16, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x74, 0x12, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x43, 0x6f, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43,
	0x6f, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x75, 0x0a, 0x17, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f,
	0x69, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x12, 0x2d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x7e, 0x0a, 0x1a, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x43, 0x68, 0x61, 0x72, 0x74, 0x12, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x63, 0x0a, 0x11, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x44, 0x65, 0x46, 0x69, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x27,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x44, 0x65, 0x46, 0x69, 0x43, 0x6f, 0x69, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x44, 0x65, 0x46, 0x69, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x69,
	0x0a, 0x13, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f,
	0x69, 0x6e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x51, 0x0a, 0x0b, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43,
	0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x5a, 0x0a, 0x0e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x24,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x66, 0x0a, 0x12, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x47, 0x75, 0x72, 0x75, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x28,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x47, 0x75, 0x72, 0x75, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x47, 0x75, 0x72, 0x75, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x66, 0x0a, 0x12, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x77, 0x61, 0x70,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53,
	0x77, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x77, 0x61, 0x70, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x6f, 0x0a, 0x15, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x42, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x12, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x42,
	0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x42, 0x79, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x72, 0x0a, 0x16, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x42, 0x79, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x12, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x42, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x42, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x2e, 0x0a,
	0x0d, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x50, 0x01,
	0x5a, 0x1b, 0x64, 0x61, 0x74, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_market_v1_market_proto_rawDescOnce sync.Once
	file_api_market_v1_market_proto_rawDescData = file_api_market_v1_market_proto_rawDesc
)

func file_api_market_v1_market_proto_rawDescGZIP() []byte {
	file_api_market_v1_market_proto_rawDescOnce.Do(func() {
		file_api_market_v1_market_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_market_v1_market_proto_rawDescData)
	})
	return file_api_market_v1_market_proto_rawDescData
}

var file_api_market_v1_market_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_api_market_v1_market_proto_msgTypes = make([]protoimpl.MessageInfo, 86)
var file_api_market_v1_market_proto_goTypes = []interface{}{
	(DescribeCexCoinsRequest_SortFieldEnum)(0),             // 0: api.market.v1.DescribeCexCoinsRequest.SortFieldEnum
	(DescribeDeFiCoinsRequest_SortFieldDefine)(0),          // 1: api.market.v1.DescribeDeFiCoinsRequest.SortFieldDefine
	(*ModifyColumnRequest)(nil),                            // 2: api.market.v1.ModifyColumnRequest
	(*ModifyColumnReply)(nil),                              // 3: api.market.v1.ModifyColumnReply
	(*RemoveColumnRequest)(nil),                            // 4: api.market.v1.RemoveColumnRequest
	(*RemoveColumnReply)(nil),                              // 5: api.market.v1.RemoveColumnReply
	(*CreateColumnRequest)(nil),                            // 6: api.market.v1.CreateColumnRequest
	(*CreateColumnReply)(nil),                              // 7: api.market.v1.CreateColumnReply
	(*DescribeColumnListRequest)(nil),                      // 8: api.market.v1.DescribeColumnListRequest
	(*DescribeColumnListReply)(nil),                        // 9: api.market.v1.DescribeColumnListReply
	(*DescribeAllExtraDetailRequest)(nil),                  // 10: api.market.v1.DescribeAllExtraDetailRequest
	(*DescribeAllExtraDetailReply)(nil),                    // 11: api.market.v1.DescribeAllExtraDetailReply
	(*DescribeCategoryListRequest)(nil),                    // 12: api.market.v1.DescribeCategoryListRequest
	(*DescribeCategoryListReply)(nil),                      // 13: api.market.v1.DescribeCategoryListReply
	(*ModifyMenuCategoryRequest)(nil),                      // 14: api.market.v1.ModifyMenuCategoryRequest
	(*ModifyMenuCategoryReply)(nil),                        // 15: api.market.v1.ModifyMenuCategoryReply
	(*CreateCoinCategoryRequest)(nil),                      // 16: api.market.v1.CreateCoinCategoryRequest
	(*CreateCoinCategoryReply)(nil),                        // 17: api.market.v1.CreateCoinCategoryReply
	(*ModifyCoinDescriptionRequest)(nil),                   // 18: api.market.v1.ModifyCoinDescriptionRequest
	(*ModifyCoinDescriptionReply)(nil),                     // 19: api.market.v1.ModifyCoinDescriptionReply
	(*DescribeCexCoinsRequest)(nil),                        // 20: api.market.v1.DescribeCexCoinsRequest
	(*DescribeCexCoinsReply)(nil),                          // 21: api.market.v1.DescribeCexCoinsReply
	(*ModifyCoinCategoryRequest)(nil),                      // 22: api.market.v1.ModifyCoinCategoryRequest
	(*ModifyCoinCategoryReply)(nil),                        // 23: api.market.v1.ModifyCoinCategoryReply
	(*DescribeMenuCategoryRequest)(nil),                    // 24: api.market.v1.DescribeMenuCategoryRequest
	(*DescribeMenuCategoryReply)(nil),                      // 25: api.market.v1.DescribeMenuCategoryReply
	(*DescribeMarketExtraDetailRequest)(nil),               // 26: api.market.v1.DescribeMarketExtraDetailRequest
	(*DescribeMarketExtraDetailReply)(nil),                 // 27: api.market.v1.DescribeMarketExtraDetailReply
	(*DescribeCoinPriceChartRequest)(nil),                  // 28: api.market.v1.DescribeCoinPriceChartRequest
	(*DescribeCoinPriceChartReply)(nil),                    // 29: api.market.v1.DescribeCoinPriceChartReply
	(*DescribeCoinSwapsRequest)(nil),                       // 30: api.market.v1.DescribeCoinSwapsRequest
	(*DescribeCoinSwapsReply)(nil),                         // 31: api.market.v1.DescribeCoinSwapsReply
	(*DescribeCoinLiquidityRequest)(nil),                   // 32: api.market.v1.DescribeCoinLiquidityRequest
	(*DescribeCoinLiquidityReply)(nil),                     // 33: api.market.v1.DescribeCoinLiquidityReply
	(*DescribeCoinLiquidityChartRequest)(nil),              // 34: api.market.v1.DescribeCoinLiquidityChartRequest
	(*DescribeCoinLiquidityChartReply)(nil),                // 35: api.market.v1.DescribeCoinLiquidityChartReply
	(*DescribeCoinUserChartRequest)(nil),                   // 36: api.market.v1.DescribeCoinUserChartRequest
	(*DescribeCoinUserChartReply)(nil),                     // 37: api.market.v1.DescribeCoinUserChartReply
	(*DescribeCoinOrderChartRequest)(nil),                  // 38: api.market.v1.DescribeCoinOrderChartRequest
	(*DescribeCoinOrderChartReply)(nil),                    // 39: api.market.v1.DescribeCoinOrderChartReply
	(*DescribeCoinVolumeChartRequest)(nil),                 // 40: api.market.v1.DescribeCoinVolumeChartRequest
	(*DescribeCoinVolumeChartReply)(nil),                   // 41: api.market.v1.DescribeCoinVolumeChartReply
	(*DescribeCoinSwapStatsRequest)(nil),                   // 42: api.market.v1.DescribeCoinSwapStatsRequest
	(*DescribeCoinSwapStatsReply)(nil),                     // 43: api.market.v1.DescribeCoinSwapStatsReply
	(*DescribeDeFiCoinsRequest)(nil),                       // 44: api.market.v1.DescribeDeFiCoinsRequest
	(*DescribeDeFiCoinsReply)(nil),                         // 45: api.market.v1.DescribeDeFiCoinsReply
	(*DescribeCoinSimplesRequest)(nil),                     // 46: api.market.v1.DescribeCoinSimplesRequest
	(*DescribeCoinSimplesReply)(nil),                       // 47: api.market.v1.DescribeCoinSimplesReply
	(*SearchCoinsRequest)(nil),                             // 48: api.market.v1.SearchCoinsRequest
	(*SearchCoinsReply)(nil),                               // 49: api.market.v1.SearchCoinsReply
	(*DescribeTokensRequest)(nil),                          // 50: api.market.v1.DescribeTokensRequest
	(*DescribeTokensReply)(nil),                            // 51: api.market.v1.DescribeTokensReply
	(*DescribeGuruChainsRequest)(nil),                      // 52: api.market.v1.DescribeGuruChainsRequest
	(*DescribeGuruChainsReply)(nil),                        // 53: api.market.v1.DescribeGuruChainsReply
	(*DescribeSwapConfigRequest)(nil),                      // 54: api.market.v1.DescribeSwapConfigRequest
	(*DescribeSwapConfigReply)(nil),                        // 55: api.market.v1.DescribeSwapConfigReply
	(*DescribeCoinsByFieldsRequest)(nil),                   // 56: api.market.v1.DescribeCoinsByFieldsRequest
	(*DescribeCoinsByFieldsReply)(nil),                     // 57: api.market.v1.DescribeCoinsByFieldsReply
	(*DescribeTokensByFieldsRequest)(nil),                  // 58: api.market.v1.DescribeTokensByFieldsRequest
	(*DescribeTokensByFieldsReply)(nil),                    // 59: api.market.v1.DescribeTokensByFieldsReply
	(*Currency)(nil),                                       // 60: api.market.v1.Currency
	nil,                                                    // 61: api.market.v1.ModifyColumnRequest.NameEntry
	nil,                                                    // 62: api.market.v1.CreateColumnRequest.NameEntry
	(*DescribeColumnListReply_Column)(nil),                 // 63: api.market.v1.DescribeColumnListReply.Column
	nil,                                                    // 64: api.market.v1.DescribeColumnListReply.Column.NameEntry
	nil,                                                    // 65: api.market.v1.DescribeAllExtraDetailReply.DescEntry
	nil,                                                    // 66: api.market.v1.ModifyCoinDescriptionRequest.DescEntry
	(*DescribeCexCoinsReply_Coin)(nil),                     // 67: api.market.v1.DescribeCexCoinsReply.Coin
	(*DescribeMarketExtraDetailReply_ChainAddress)(nil),    // 68: api.market.v1.DescribeMarketExtraDetailReply.ChainAddress
	(*DescribeMarketExtraDetailReply_SocialLink)(nil),      // 69: api.market.v1.DescribeMarketExtraDetailReply.SocialLink
	(*DescribeCoinPriceChartReply_PriceChart)(nil),         // 70: api.market.v1.DescribeCoinPriceChartReply.PriceChart
	(*DescribeCoinPriceChartReply_CapChart)(nil),           // 71: api.market.v1.DescribeCoinPriceChartReply.CapChart
	(*DescribeCoinPriceChartReply_VolumeChart)(nil),        // 72: api.market.v1.DescribeCoinPriceChartReply.VolumeChart
	(*DescribeCoinSwapsReply_CoinSwapsDetail)(nil),         // 73: api.market.v1.DescribeCoinSwapsReply.CoinSwapsDetail
	(*DescribeCoinLiquidityReply_CoinLiquidityDetail)(nil), // 74: api.market.v1.DescribeCoinLiquidityReply.CoinLiquidityDetail
	(*DescribeCoinLiquidityChartReply_LiquidityChart)(nil), // 75: api.market.v1.DescribeCoinLiquidityChartReply.LiquidityChart
	(*DescribeCoinUserChartReply_UserChart)(nil),           // 76: api.market.v1.DescribeCoinUserChartReply.UserChart
	(*DescribeCoinOrderChartReply_OrderChart)(nil),         // 77: api.market.v1.DescribeCoinOrderChartReply.OrderChart
	(*DescribeCoinVolumeChartReply_VolumeChart)(nil),       // 78: api.market.v1.DescribeCoinVolumeChartReply.VolumeChart
	(*DescribeCoinSwapStatsReply_SwapStatInt)(nil),         // 79: api.market.v1.DescribeCoinSwapStatsReply.SwapStatInt
	(*DescribeCoinSwapStatsReply_SwapStatDouble)(nil),      // 80: api.market.v1.DescribeCoinSwapStatsReply.SwapStatDouble
	(*DescribeDeFiCoinsReply_DeFiCoin)(nil),                // 81: api.market.v1.DescribeDeFiCoinsReply.DeFiCoin
	(*DescribeCoinSimplesReply_CoinSimple)(nil),            // 82: api.market.v1.DescribeCoinSimplesReply.CoinSimple
	(*SearchCoinsReply_CoinSimple)(nil),                    // 83: api.market.v1.SearchCoinsReply.CoinSimple
	(*DescribeTokensReply_Token)(nil),                      // 84: api.market.v1.DescribeTokensReply.Token
	(*DescribeGuruChainsReply_Chain)(nil),                  // 85: api.market.v1.DescribeGuruChainsReply.Chain
	(*DescribeCoinsByFieldsReply_Coin)(nil),                // 86: api.market.v1.DescribeCoinsByFieldsReply.Coin
	(*DescribeTokensByFieldsReply_Token)(nil),              // 87: api.market.v1.DescribeTokensByFieldsReply.Token
}
var file_api_market_v1_market_proto_depIdxs = []int32{
	61, // 0: api.market.v1.ModifyColumnRequest.name:type_name -> api.market.v1.ModifyColumnRequest.NameEntry
	62, // 1: api.market.v1.CreateColumnRequest.name:type_name -> api.market.v1.CreateColumnRequest.NameEntry
	63, // 2: api.market.v1.DescribeColumnListReply.columns:type_name -> api.market.v1.DescribeColumnListReply.Column
	65, // 3: api.market.v1.DescribeAllExtraDetailReply.desc:type_name -> api.market.v1.DescribeAllExtraDetailReply.DescEntry
	66, // 4: api.market.v1.ModifyCoinDescriptionRequest.desc:type_name -> api.market.v1.ModifyCoinDescriptionRequest.DescEntry
	0,  // 5: api.market.v1.DescribeCexCoinsRequest.sortField:type_name -> api.market.v1.DescribeCexCoinsRequest.SortFieldEnum
	67, // 6: api.market.v1.DescribeCexCoinsReply.coins:type_name -> api.market.v1.DescribeCexCoinsReply.Coin
	68, // 7: api.market.v1.DescribeMarketExtraDetailReply.chainAddress:type_name -> api.market.v1.DescribeMarketExtraDetailReply.ChainAddress
	69, // 8: api.market.v1.DescribeMarketExtraDetailReply.socialLink:type_name -> api.market.v1.DescribeMarketExtraDetailReply.SocialLink
	70, // 9: api.market.v1.DescribeCoinPriceChartReply.prices:type_name -> api.market.v1.DescribeCoinPriceChartReply.PriceChart
	71, // 10: api.market.v1.DescribeCoinPriceChartReply.market_caps:type_name -> api.market.v1.DescribeCoinPriceChartReply.CapChart
	72, // 11: api.market.v1.DescribeCoinPriceChartReply.total_volumes:type_name -> api.market.v1.DescribeCoinPriceChartReply.VolumeChart
	73, // 12: api.market.v1.DescribeCoinSwapsReply.swaps:type_name -> api.market.v1.DescribeCoinSwapsReply.CoinSwapsDetail
	74, // 13: api.market.v1.DescribeCoinLiquidityReply.liquidity:type_name -> api.market.v1.DescribeCoinLiquidityReply.CoinLiquidityDetail
	75, // 14: api.market.v1.DescribeCoinLiquidityChartReply.liquidity:type_name -> api.market.v1.DescribeCoinLiquidityChartReply.LiquidityChart
	76, // 15: api.market.v1.DescribeCoinUserChartReply.users:type_name -> api.market.v1.DescribeCoinUserChartReply.UserChart
	77, // 16: api.market.v1.DescribeCoinOrderChartReply.orders:type_name -> api.market.v1.DescribeCoinOrderChartReply.OrderChart
	78, // 17: api.market.v1.DescribeCoinVolumeChartReply.volumes:type_name -> api.market.v1.DescribeCoinVolumeChartReply.VolumeChart
	80, // 18: api.market.v1.DescribeCoinSwapStatsReply.volume24h:type_name -> api.market.v1.DescribeCoinSwapStatsReply.SwapStatDouble
	79, // 19: api.market.v1.DescribeCoinSwapStatsReply.orders24h:type_name -> api.market.v1.DescribeCoinSwapStatsReply.SwapStatInt
	79, // 20: api.market.v1.DescribeCoinSwapStatsReply.users24h:type_name -> api.market.v1.DescribeCoinSwapStatsReply.SwapStatInt
	1,  // 21: api.market.v1.DescribeDeFiCoinsRequest.sortField:type_name -> api.market.v1.DescribeDeFiCoinsRequest.SortFieldDefine
	81, // 22: api.market.v1.DescribeDeFiCoinsReply.coins:type_name -> api.market.v1.DescribeDeFiCoinsReply.DeFiCoin
	82, // 23: api.market.v1.DescribeCoinSimplesReply.coins:type_name -> api.market.v1.DescribeCoinSimplesReply.CoinSimple
	83, // 24: api.market.v1.SearchCoinsReply.coins:type_name -> api.market.v1.SearchCoinsReply.CoinSimple
	84, // 25: api.market.v1.DescribeTokensReply.tokens:type_name -> api.market.v1.DescribeTokensReply.Token
	85, // 26: api.market.v1.DescribeGuruChainsReply.chains:type_name -> api.market.v1.DescribeGuruChainsReply.Chain
	86, // 27: api.market.v1.DescribeCoinsByFieldsReply.coins:type_name -> api.market.v1.DescribeCoinsByFieldsReply.Coin
	87, // 28: api.market.v1.DescribeTokensByFieldsReply.tokens:type_name -> api.market.v1.DescribeTokensByFieldsReply.Token
	64, // 29: api.market.v1.DescribeColumnListReply.Column.name:type_name -> api.market.v1.DescribeColumnListReply.Column.NameEntry
	60, // 30: api.market.v1.DescribeCoinsByFieldsReply.Coin.price:type_name -> api.market.v1.Currency
	60, // 31: api.market.v1.DescribeTokensByFieldsReply.Token.price:type_name -> api.market.v1.Currency
	30, // 32: api.market.v1.Market.DescribeCoinSwaps:input_type -> api.market.v1.DescribeCoinSwapsRequest
	32, // 33: api.market.v1.Market.DescribeCoinLiquidity:input_type -> api.market.v1.DescribeCoinLiquidityRequest
	42, // 34: api.market.v1.Market.DescribeCoinSwapStats:input_type -> api.market.v1.DescribeCoinSwapStatsRequest
	28, // 35: api.market.v1.Market.DescribeCoinPriceChart:input_type -> api.market.v1.DescribeCoinPriceChartRequest
	20, // 36: api.market.v1.Market.DescribeCexCoins:input_type -> api.market.v1.DescribeCexCoinsRequest
	10, // 37: api.market.v1.Market.DescribeAllExtraDetail:input_type -> api.market.v1.DescribeAllExtraDetailRequest
	26, // 38: api.market.v1.Market.DescribeMarketExtraDetail:input_type -> api.market.v1.DescribeMarketExtraDetailRequest
	24, // 39: api.market.v1.Market.DescribeMenuCategory:input_type -> api.market.v1.DescribeMenuCategoryRequest
	14, // 40: api.market.v1.Market.ModifyMenuCategory:input_type -> api.market.v1.ModifyMenuCategoryRequest
	12, // 41: api.market.v1.Market.DescribeCategoryList:input_type -> api.market.v1.DescribeCategoryListRequest
	18, // 42: api.market.v1.Market.ModifyCoinDescription:input_type -> api.market.v1.ModifyCoinDescriptionRequest
	22, // 43: api.market.v1.Market.ModifyCoinCategory:input_type -> api.market.v1.ModifyCoinCategoryRequest
	8,  // 44: api.market.v1.Market.DescribeColumnList:input_type -> api.market.v1.DescribeColumnListRequest
	6,  // 45: api.market.v1.Market.CreateColumn:input_type -> api.market.v1.CreateColumnRequest
	4,  // 46: api.market.v1.Market.RemoveColumn:input_type -> api.market.v1.RemoveColumnRequest
	2,  // 47: api.market.v1.Market.ModifyColumn:input_type -> api.market.v1.ModifyColumnRequest
	16, // 48: api.market.v1.Market.CreateCoinCategory:input_type -> api.market.v1.CreateCoinCategoryRequest
	36, // 49: api.market.v1.Market.DescribeCoinUserChart:input_type -> api.market.v1.DescribeCoinUserChartRequest
	38, // 50: api.market.v1.Market.DescribeCoinOrderChart:input_type -> api.market.v1.DescribeCoinOrderChartRequest
	40, // 51: api.market.v1.Market.DescribeCoinVolumeChart:input_type -> api.market.v1.DescribeCoinVolumeChartRequest
	34, // 52: api.market.v1.Market.DescribeCoinLiquidityChart:input_type -> api.market.v1.DescribeCoinLiquidityChartRequest
	44, // 53: api.market.v1.Market.DescribeDeFiCoins:input_type -> api.market.v1.DescribeDeFiCoinsRequest
	46, // 54: api.market.v1.Market.DescribeCoinSimples:input_type -> api.market.v1.DescribeCoinSimplesRequest
	48, // 55: api.market.v1.Market.SearchCoins:input_type -> api.market.v1.SearchCoinsRequest
	50, // 56: api.market.v1.Market.DescribeTokens:input_type -> api.market.v1.DescribeTokensRequest
	52, // 57: api.market.v1.Market.DescribeGuruChains:input_type -> api.market.v1.DescribeGuruChainsRequest
	54, // 58: api.market.v1.Market.DescribeSwapConfig:input_type -> api.market.v1.DescribeSwapConfigRequest
	56, // 59: api.market.v1.Market.DescribeCoinsByFields:input_type -> api.market.v1.DescribeCoinsByFieldsRequest
	58, // 60: api.market.v1.Market.DescribeTokensByFields:input_type -> api.market.v1.DescribeTokensByFieldsRequest
	31, // 61: api.market.v1.Market.DescribeCoinSwaps:output_type -> api.market.v1.DescribeCoinSwapsReply
	33, // 62: api.market.v1.Market.DescribeCoinLiquidity:output_type -> api.market.v1.DescribeCoinLiquidityReply
	43, // 63: api.market.v1.Market.DescribeCoinSwapStats:output_type -> api.market.v1.DescribeCoinSwapStatsReply
	29, // 64: api.market.v1.Market.DescribeCoinPriceChart:output_type -> api.market.v1.DescribeCoinPriceChartReply
	21, // 65: api.market.v1.Market.DescribeCexCoins:output_type -> api.market.v1.DescribeCexCoinsReply
	11, // 66: api.market.v1.Market.DescribeAllExtraDetail:output_type -> api.market.v1.DescribeAllExtraDetailReply
	27, // 67: api.market.v1.Market.DescribeMarketExtraDetail:output_type -> api.market.v1.DescribeMarketExtraDetailReply
	25, // 68: api.market.v1.Market.DescribeMenuCategory:output_type -> api.market.v1.DescribeMenuCategoryReply
	15, // 69: api.market.v1.Market.ModifyMenuCategory:output_type -> api.market.v1.ModifyMenuCategoryReply
	13, // 70: api.market.v1.Market.DescribeCategoryList:output_type -> api.market.v1.DescribeCategoryListReply
	19, // 71: api.market.v1.Market.ModifyCoinDescription:output_type -> api.market.v1.ModifyCoinDescriptionReply
	23, // 72: api.market.v1.Market.ModifyCoinCategory:output_type -> api.market.v1.ModifyCoinCategoryReply
	9,  // 73: api.market.v1.Market.DescribeColumnList:output_type -> api.market.v1.DescribeColumnListReply
	7,  // 74: api.market.v1.Market.CreateColumn:output_type -> api.market.v1.CreateColumnReply
	5,  // 75: api.market.v1.Market.RemoveColumn:output_type -> api.market.v1.RemoveColumnReply
	3,  // 76: api.market.v1.Market.ModifyColumn:output_type -> api.market.v1.ModifyColumnReply
	17, // 77: api.market.v1.Market.CreateCoinCategory:output_type -> api.market.v1.CreateCoinCategoryReply
	37, // 78: api.market.v1.Market.DescribeCoinUserChart:output_type -> api.market.v1.DescribeCoinUserChartReply
	39, // 79: api.market.v1.Market.DescribeCoinOrderChart:output_type -> api.market.v1.DescribeCoinOrderChartReply
	41, // 80: api.market.v1.Market.DescribeCoinVolumeChart:output_type -> api.market.v1.DescribeCoinVolumeChartReply
	35, // 81: api.market.v1.Market.DescribeCoinLiquidityChart:output_type -> api.market.v1.DescribeCoinLiquidityChartReply
	45, // 82: api.market.v1.Market.DescribeDeFiCoins:output_type -> api.market.v1.DescribeDeFiCoinsReply
	47, // 83: api.market.v1.Market.DescribeCoinSimples:output_type -> api.market.v1.DescribeCoinSimplesReply
	49, // 84: api.market.v1.Market.SearchCoins:output_type -> api.market.v1.SearchCoinsReply
	51, // 85: api.market.v1.Market.DescribeTokens:output_type -> api.market.v1.DescribeTokensReply
	53, // 86: api.market.v1.Market.DescribeGuruChains:output_type -> api.market.v1.DescribeGuruChainsReply
	55, // 87: api.market.v1.Market.DescribeSwapConfig:output_type -> api.market.v1.DescribeSwapConfigReply
	57, // 88: api.market.v1.Market.DescribeCoinsByFields:output_type -> api.market.v1.DescribeCoinsByFieldsReply
	59, // 89: api.market.v1.Market.DescribeTokensByFields:output_type -> api.market.v1.DescribeTokensByFieldsReply
	61, // [61:90] is the sub-list for method output_type
	32, // [32:61] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_api_market_v1_market_proto_init() }
func file_api_market_v1_market_proto_init() {
	if File_api_market_v1_market_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_market_v1_market_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyColumnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyColumnReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveColumnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveColumnReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateColumnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateColumnReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeColumnListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeColumnListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeAllExtraDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeAllExtraDetailReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCategoryListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCategoryListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyMenuCategoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyMenuCategoryReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCoinCategoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCoinCategoryReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyCoinDescriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyCoinDescriptionReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCexCoinsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCexCoinsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyCoinCategoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyCoinCategoryReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeMenuCategoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeMenuCategoryReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeMarketExtraDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeMarketExtraDetailReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinPriceChartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinPriceChartReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinSwapsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinSwapsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinLiquidityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinLiquidityReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinLiquidityChartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinLiquidityChartReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinUserChartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinUserChartReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinOrderChartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinOrderChartReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinVolumeChartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinVolumeChartReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinSwapStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinSwapStatsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeDeFiCoinsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeDeFiCoinsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinSimplesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinSimplesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchCoinsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchCoinsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTokensRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTokensReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeGuruChainsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeGuruChainsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeSwapConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeSwapConfigReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinsByFieldsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinsByFieldsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTokensByFieldsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTokensByFieldsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Currency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeColumnListReply_Column); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCexCoinsReply_Coin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeMarketExtraDetailReply_ChainAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeMarketExtraDetailReply_SocialLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinPriceChartReply_PriceChart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinPriceChartReply_CapChart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinPriceChartReply_VolumeChart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinSwapsReply_CoinSwapsDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinLiquidityReply_CoinLiquidityDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinLiquidityChartReply_LiquidityChart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinUserChartReply_UserChart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinOrderChartReply_OrderChart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinVolumeChartReply_VolumeChart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinSwapStatsReply_SwapStatInt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinSwapStatsReply_SwapStatDouble); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeDeFiCoinsReply_DeFiCoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinSimplesReply_CoinSimple); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchCoinsReply_CoinSimple); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTokensReply_Token); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeGuruChainsReply_Chain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCoinsByFieldsReply_Coin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_market_v1_market_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTokensByFieldsReply_Token); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_market_v1_market_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_api_market_v1_market_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_api_market_v1_market_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_api_market_v1_market_proto_msgTypes[18].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_market_v1_market_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   86,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_market_v1_market_proto_goTypes,
		DependencyIndexes: file_api_market_v1_market_proto_depIdxs,
		EnumInfos:         file_api_market_v1_market_proto_enumTypes,
		MessageInfos:      file_api_market_v1_market_proto_msgTypes,
	}.Build()
	File_api_market_v1_market_proto = out.File
	file_api_market_v1_market_proto_rawDesc = nil
	file_api_market_v1_market_proto_goTypes = nil
	file_api_market_v1_market_proto_depIdxs = nil
}

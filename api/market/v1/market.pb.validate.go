// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/market/v1/market.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AddCollectionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddCollectionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddCollectionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddCollectionRequestMultiError, or nil if none found.
func (m *AddCollectionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddCollectionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if utf8.RuneCountInString(m.GetUserID()) < 1 {
		err := AddCollectionRequestValidationError{
			field:  "UserID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetCoinIDs()) < 1 {
		err := AddCollectionRequestValidationError{
			field:  "CoinIDs",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _AddCollectionRequest_Type_InLookup[m.GetType()]; !ok {
		err := AddCollectionRequestValidationError{
			field:  "Type",
			reason: "value must be in list [1 2]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddCollectionRequestMultiError(errors)
	}

	return nil
}

// AddCollectionRequestMultiError is an error wrapping multiple validation
// errors returned by AddCollectionRequest.ValidateAll() if the designated
// constraints aren't met.
type AddCollectionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddCollectionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddCollectionRequestMultiError) AllErrors() []error { return m }

// AddCollectionRequestValidationError is the validation error returned by
// AddCollectionRequest.Validate if the designated constraints aren't met.
type AddCollectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCollectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCollectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCollectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCollectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCollectionRequestValidationError) ErrorName() string {
	return "AddCollectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddCollectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCollectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCollectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCollectionRequestValidationError{}

var _AddCollectionRequest_Type_InLookup = map[int32]struct{}{
	1: {},
	2: {},
}

// Validate checks the field values on AddCollectionReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddCollectionReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddCollectionReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddCollectionReplyMultiError, or nil if none found.
func (m *AddCollectionReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AddCollectionReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for EventId

	if len(errors) > 0 {
		return AddCollectionReplyMultiError(errors)
	}

	return nil
}

// AddCollectionReplyMultiError is an error wrapping multiple validation errors
// returned by AddCollectionReply.ValidateAll() if the designated constraints
// aren't met.
type AddCollectionReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddCollectionReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddCollectionReplyMultiError) AllErrors() []error { return m }

// AddCollectionReplyValidationError is the validation error returned by
// AddCollectionReply.Validate if the designated constraints aren't met.
type AddCollectionReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCollectionReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCollectionReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCollectionReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCollectionReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCollectionReplyValidationError) ErrorName() string {
	return "AddCollectionReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AddCollectionReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCollectionReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCollectionReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCollectionReplyValidationError{}

// Validate checks the field values on RemoveCollectionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveCollectionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveCollectionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveCollectionRequestMultiError, or nil if none found.
func (m *RemoveCollectionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveCollectionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if utf8.RuneCountInString(m.GetUserID()) < 1 {
		err := RemoveCollectionRequestValidationError{
			field:  "UserID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCoinID()) < 1 {
		err := RemoveCollectionRequestValidationError{
			field:  "CoinID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RemoveCollectionRequestMultiError(errors)
	}

	return nil
}

// RemoveCollectionRequestMultiError is an error wrapping multiple validation
// errors returned by RemoveCollectionRequest.ValidateAll() if the designated
// constraints aren't met.
type RemoveCollectionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveCollectionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveCollectionRequestMultiError) AllErrors() []error { return m }

// RemoveCollectionRequestValidationError is the validation error returned by
// RemoveCollectionRequest.Validate if the designated constraints aren't met.
type RemoveCollectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveCollectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveCollectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveCollectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveCollectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveCollectionRequestValidationError) ErrorName() string {
	return "RemoveCollectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveCollectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveCollectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveCollectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveCollectionRequestValidationError{}

// Validate checks the field values on RemoveCollectionReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveCollectionReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveCollectionReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveCollectionReplyMultiError, or nil if none found.
func (m *RemoveCollectionReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveCollectionReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for EventId

	if len(errors) > 0 {
		return RemoveCollectionReplyMultiError(errors)
	}

	return nil
}

// RemoveCollectionReplyMultiError is an error wrapping multiple validation
// errors returned by RemoveCollectionReply.ValidateAll() if the designated
// constraints aren't met.
type RemoveCollectionReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveCollectionReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveCollectionReplyMultiError) AllErrors() []error { return m }

// RemoveCollectionReplyValidationError is the validation error returned by
// RemoveCollectionReply.Validate if the designated constraints aren't met.
type RemoveCollectionReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveCollectionReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveCollectionReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveCollectionReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveCollectionReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveCollectionReplyValidationError) ErrorName() string {
	return "RemoveCollectionReplyValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveCollectionReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveCollectionReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveCollectionReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveCollectionReplyValidationError{}

// Validate checks the field values on DescribeCollectionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCollectionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCollectionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeCollectionsRequestMultiError, or nil if none found.
func (m *DescribeCollectionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCollectionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if utf8.RuneCountInString(m.GetUserID()) < 1 {
		err := DescribeCollectionsRequestValidationError{
			field:  "UserID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _DescribeCollectionsRequest_Type_InLookup[m.GetType()]; !ok {
		err := DescribeCollectionsRequestValidationError{
			field:  "Type",
			reason: "value must be in list [1 2]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCurrency()) < 1 {
		err := DescribeCollectionsRequestValidationError{
			field:  "Currency",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPage() <= 0 {
		err := DescribeCollectionsRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val > 100 {
		err := DescribeCollectionsRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for SortField

	if _, ok := _DescribeCollectionsRequest_SortType_InLookup[m.GetSortType()]; !ok {
		err := DescribeCollectionsRequestValidationError{
			field:  "SortType",
			reason: "value must be in list [ asc desc]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DescribeCollectionsRequestMultiError(errors)
	}

	return nil
}

// DescribeCollectionsRequestMultiError is an error wrapping multiple
// validation errors returned by DescribeCollectionsRequest.ValidateAll() if
// the designated constraints aren't met.
type DescribeCollectionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCollectionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCollectionsRequestMultiError) AllErrors() []error { return m }

// DescribeCollectionsRequestValidationError is the validation error returned
// by DescribeCollectionsRequest.Validate if the designated constraints aren't met.
type DescribeCollectionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCollectionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCollectionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCollectionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCollectionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCollectionsRequestValidationError) ErrorName() string {
	return "DescribeCollectionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCollectionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCollectionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCollectionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCollectionsRequestValidationError{}

var _DescribeCollectionsRequest_Type_InLookup = map[int32]struct{}{
	1: {},
	2: {},
}

var _DescribeCollectionsRequest_SortType_InLookup = map[string]struct{}{
	"":     {},
	"asc":  {},
	"desc": {},
}

// Validate checks the field values on DescribeCollectionsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCollectionsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCollectionsReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeCollectionsReplyMultiError, or nil if none found.
func (m *DescribeCollectionsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCollectionsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	if _, ok := _DescribeCollectionsReply_Type_InLookup[m.GetType()]; !ok {
		err := DescribeCollectionsReplyValidationError{
			field:  "Type",
			reason: "value must be in list [1 2]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetCoins() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribeCollectionsReplyValidationError{
						field:  fmt.Sprintf("Coins[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribeCollectionsReplyValidationError{
						field:  fmt.Sprintf("Coins[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribeCollectionsReplyValidationError{
					field:  fmt.Sprintf("Coins[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetPairs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribeCollectionsReplyValidationError{
						field:  fmt.Sprintf("Pairs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribeCollectionsReplyValidationError{
						field:  fmt.Sprintf("Pairs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribeCollectionsReplyValidationError{
					field:  fmt.Sprintf("Pairs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DescribeCollectionsReplyMultiError(errors)
	}

	return nil
}

// DescribeCollectionsReplyMultiError is an error wrapping multiple validation
// errors returned by DescribeCollectionsReply.ValidateAll() if the designated
// constraints aren't met.
type DescribeCollectionsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCollectionsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCollectionsReplyMultiError) AllErrors() []error { return m }

// DescribeCollectionsReplyValidationError is the validation error returned by
// DescribeCollectionsReply.Validate if the designated constraints aren't met.
type DescribeCollectionsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCollectionsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCollectionsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCollectionsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCollectionsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCollectionsReplyValidationError) ErrorName() string {
	return "DescribeCollectionsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCollectionsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCollectionsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCollectionsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCollectionsReplyValidationError{}

var _DescribeCollectionsReply_Type_InLookup = map[int32]struct{}{
	1: {},
	2: {},
}

// Validate checks the field values on SearchCoinAndPairRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchCoinAndPairRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchCoinAndPairRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchCoinAndPairRequestMultiError, or nil if none found.
func (m *SearchCoinAndPairRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchCoinAndPairRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if utf8.RuneCountInString(m.GetKeyword()) < 1 {
		err := SearchCoinAndPairRequestValidationError{
			field:  "Keyword",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val > 100 {
		err := SearchCoinAndPairRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SearchCoinAndPairRequestMultiError(errors)
	}

	return nil
}

// SearchCoinAndPairRequestMultiError is an error wrapping multiple validation
// errors returned by SearchCoinAndPairRequest.ValidateAll() if the designated
// constraints aren't met.
type SearchCoinAndPairRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchCoinAndPairRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchCoinAndPairRequestMultiError) AllErrors() []error { return m }

// SearchCoinAndPairRequestValidationError is the validation error returned by
// SearchCoinAndPairRequest.Validate if the designated constraints aren't met.
type SearchCoinAndPairRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchCoinAndPairRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchCoinAndPairRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchCoinAndPairRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchCoinAndPairRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchCoinAndPairRequestValidationError) ErrorName() string {
	return "SearchCoinAndPairRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchCoinAndPairRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchCoinAndPairRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchCoinAndPairRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchCoinAndPairRequestValidationError{}

// Validate checks the field values on SearchCoinAndPairReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchCoinAndPairReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchCoinAndPairReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchCoinAndPairReplyMultiError, or nil if none found.
func (m *SearchCoinAndPairReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchCoinAndPairReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCoins() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchCoinAndPairReplyValidationError{
						field:  fmt.Sprintf("Coins[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchCoinAndPairReplyValidationError{
						field:  fmt.Sprintf("Coins[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchCoinAndPairReplyValidationError{
					field:  fmt.Sprintf("Coins[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchCoinAndPairReplyMultiError(errors)
	}

	return nil
}

// SearchCoinAndPairReplyMultiError is an error wrapping multiple validation
// errors returned by SearchCoinAndPairReply.ValidateAll() if the designated
// constraints aren't met.
type SearchCoinAndPairReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchCoinAndPairReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchCoinAndPairReplyMultiError) AllErrors() []error { return m }

// SearchCoinAndPairReplyValidationError is the validation error returned by
// SearchCoinAndPairReply.Validate if the designated constraints aren't met.
type SearchCoinAndPairReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchCoinAndPairReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchCoinAndPairReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchCoinAndPairReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchCoinAndPairReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchCoinAndPairReplyValidationError) ErrorName() string {
	return "SearchCoinAndPairReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SearchCoinAndPairReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchCoinAndPairReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchCoinAndPairReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchCoinAndPairReplyValidationError{}

// Validate checks the field values on CoinAndPair with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CoinAndPair) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CoinAndPair with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CoinAndPairMultiError, or
// nil if none found.
func (m *CoinAndPair) ValidateAll() error {
	return m.validate(true)
}

func (m *CoinAndPair) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CoinID

	// no validation rules for Name

	// no validation rules for Symbol

	// no validation rules for Image

	// no validation rules for Type

	// no validation rules for ChainIcon

	// no validation rules for DexIcon

	// no validation rules for Price

	// no validation rules for PriceDelta

	// no validation rules for Liquidity

	// no validation rules for Volume

	// no validation rules for CreatedAt

	// no validation rules for PairAddress

	if all {
		switch v := interface{}(m.GetBaseToken()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CoinAndPairValidationError{
					field:  "BaseToken",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CoinAndPairValidationError{
					field:  "BaseToken",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBaseToken()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CoinAndPairValidationError{
				field:  "BaseToken",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetQuoteToken()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CoinAndPairValidationError{
					field:  "QuoteToken",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CoinAndPairValidationError{
					field:  "QuoteToken",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuoteToken()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CoinAndPairValidationError{
				field:  "QuoteToken",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Chain

	// no validation rules for DexID

	if len(errors) > 0 {
		return CoinAndPairMultiError(errors)
	}

	return nil
}

// CoinAndPairMultiError is an error wrapping multiple validation errors
// returned by CoinAndPair.ValidateAll() if the designated constraints aren't met.
type CoinAndPairMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CoinAndPairMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CoinAndPairMultiError) AllErrors() []error { return m }

// CoinAndPairValidationError is the validation error returned by
// CoinAndPair.Validate if the designated constraints aren't met.
type CoinAndPairValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CoinAndPairValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CoinAndPairValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CoinAndPairValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CoinAndPairValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CoinAndPairValidationError) ErrorName() string { return "CoinAndPairValidationError" }

// Error satisfies the builtin error interface
func (e CoinAndPairValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCoinAndPair.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CoinAndPairValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CoinAndPairValidationError{}

// Validate checks the field values on DescribeDexRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeDexRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeDexRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeDexRequestMultiError, or nil if none found.
func (m *DescribeDexRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeDexRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if m.Chain != nil {
		// no validation rules for Chain
	}

	if len(errors) > 0 {
		return DescribeDexRequestMultiError(errors)
	}

	return nil
}

// DescribeDexRequestMultiError is an error wrapping multiple validation errors
// returned by DescribeDexRequest.ValidateAll() if the designated constraints
// aren't met.
type DescribeDexRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeDexRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeDexRequestMultiError) AllErrors() []error { return m }

// DescribeDexRequestValidationError is the validation error returned by
// DescribeDexRequest.Validate if the designated constraints aren't met.
type DescribeDexRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeDexRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeDexRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeDexRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeDexRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeDexRequestValidationError) ErrorName() string {
	return "DescribeDexRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeDexRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeDexRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeDexRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeDexRequestValidationError{}

// Validate checks the field values on DescribeDexReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DescribeDexReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeDexReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeDexReplyMultiError, or nil if none found.
func (m *DescribeDexReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeDexReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDexes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribeDexReplyValidationError{
						field:  fmt.Sprintf("Dexes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribeDexReplyValidationError{
						field:  fmt.Sprintf("Dexes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribeDexReplyValidationError{
					field:  fmt.Sprintf("Dexes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DescribeDexReplyMultiError(errors)
	}

	return nil
}

// DescribeDexReplyMultiError is an error wrapping multiple validation errors
// returned by DescribeDexReply.ValidateAll() if the designated constraints
// aren't met.
type DescribeDexReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeDexReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeDexReplyMultiError) AllErrors() []error { return m }

// DescribeDexReplyValidationError is the validation error returned by
// DescribeDexReply.Validate if the designated constraints aren't met.
type DescribeDexReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeDexReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeDexReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeDexReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeDexReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeDexReplyValidationError) ErrorName() string { return "DescribeDexReplyValidationError" }

// Error satisfies the builtin error interface
func (e DescribeDexReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeDexReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeDexReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeDexReplyValidationError{}

// Validate checks the field values on DescribeHotCoinsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeHotCoinsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeHotCoinsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeHotCoinsRequestMultiError, or nil if none found.
func (m *DescribeHotCoinsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeHotCoinsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	// no validation rules for Limit

	if utf8.RuneCountInString(m.GetCurrency()) < 1 {
		err := DescribeHotCoinsRequestValidationError{
			field:  "Currency",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DescribeHotCoinsRequestMultiError(errors)
	}

	return nil
}

// DescribeHotCoinsRequestMultiError is an error wrapping multiple validation
// errors returned by DescribeHotCoinsRequest.ValidateAll() if the designated
// constraints aren't met.
type DescribeHotCoinsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeHotCoinsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeHotCoinsRequestMultiError) AllErrors() []error { return m }

// DescribeHotCoinsRequestValidationError is the validation error returned by
// DescribeHotCoinsRequest.Validate if the designated constraints aren't met.
type DescribeHotCoinsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeHotCoinsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeHotCoinsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeHotCoinsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeHotCoinsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeHotCoinsRequestValidationError) ErrorName() string {
	return "DescribeHotCoinsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeHotCoinsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeHotCoinsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeHotCoinsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeHotCoinsRequestValidationError{}

// Validate checks the field values on DescribeHotCoinsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeHotCoinsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeHotCoinsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeHotCoinsReplyMultiError, or nil if none found.
func (m *DescribeHotCoinsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeHotCoinsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCoins() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribeHotCoinsReplyValidationError{
						field:  fmt.Sprintf("Coins[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribeHotCoinsReplyValidationError{
						field:  fmt.Sprintf("Coins[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribeHotCoinsReplyValidationError{
					field:  fmt.Sprintf("Coins[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DescribeHotCoinsReplyMultiError(errors)
	}

	return nil
}

// DescribeHotCoinsReplyMultiError is an error wrapping multiple validation
// errors returned by DescribeHotCoinsReply.ValidateAll() if the designated
// constraints aren't met.
type DescribeHotCoinsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeHotCoinsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeHotCoinsReplyMultiError) AllErrors() []error { return m }

// DescribeHotCoinsReplyValidationError is the validation error returned by
// DescribeHotCoinsReply.Validate if the designated constraints aren't met.
type DescribeHotCoinsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeHotCoinsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeHotCoinsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeHotCoinsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeHotCoinsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeHotCoinsReplyValidationError) ErrorName() string {
	return "DescribeHotCoinsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeHotCoinsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeHotCoinsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeHotCoinsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeHotCoinsReplyValidationError{}

// Validate checks the field values on DescribeHotCoinsV2Reply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeHotCoinsV2Reply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeHotCoinsV2Reply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeHotCoinsV2ReplyMultiError, or nil if none found.
func (m *DescribeHotCoinsV2Reply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeHotCoinsV2Reply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCoins() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribeHotCoinsV2ReplyValidationError{
						field:  fmt.Sprintf("Coins[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribeHotCoinsV2ReplyValidationError{
						field:  fmt.Sprintf("Coins[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribeHotCoinsV2ReplyValidationError{
					field:  fmt.Sprintf("Coins[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DescribeHotCoinsV2ReplyMultiError(errors)
	}

	return nil
}

// DescribeHotCoinsV2ReplyMultiError is an error wrapping multiple validation
// errors returned by DescribeHotCoinsV2Reply.ValidateAll() if the designated
// constraints aren't met.
type DescribeHotCoinsV2ReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeHotCoinsV2ReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeHotCoinsV2ReplyMultiError) AllErrors() []error { return m }

// DescribeHotCoinsV2ReplyValidationError is the validation error returned by
// DescribeHotCoinsV2Reply.Validate if the designated constraints aren't met.
type DescribeHotCoinsV2ReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeHotCoinsV2ReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeHotCoinsV2ReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeHotCoinsV2ReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeHotCoinsV2ReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeHotCoinsV2ReplyValidationError) ErrorName() string {
	return "DescribeHotCoinsV2ReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeHotCoinsV2ReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeHotCoinsV2Reply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeHotCoinsV2ReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeHotCoinsV2ReplyValidationError{}

// Validate checks the field values on DescribeChainsSupportRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeChainsSupportRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeChainsSupportRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeChainsSupportRequestMultiError, or nil if none found.
func (m *DescribeChainsSupportRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeChainsSupportRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if _, ok := _DescribeChainsSupportRequest_Type_InLookup[m.GetType()]; !ok {
		err := DescribeChainsSupportRequestValidationError{
			field:  "Type",
			reason: "value must be in list [1 2]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DescribeChainsSupportRequestMultiError(errors)
	}

	return nil
}

// DescribeChainsSupportRequestMultiError is an error wrapping multiple
// validation errors returned by DescribeChainsSupportRequest.ValidateAll() if
// the designated constraints aren't met.
type DescribeChainsSupportRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeChainsSupportRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeChainsSupportRequestMultiError) AllErrors() []error { return m }

// DescribeChainsSupportRequestValidationError is the validation error returned
// by DescribeChainsSupportRequest.Validate if the designated constraints
// aren't met.
type DescribeChainsSupportRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeChainsSupportRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeChainsSupportRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeChainsSupportRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeChainsSupportRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeChainsSupportRequestValidationError) ErrorName() string {
	return "DescribeChainsSupportRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeChainsSupportRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeChainsSupportRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeChainsSupportRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeChainsSupportRequestValidationError{}

var _DescribeChainsSupportRequest_Type_InLookup = map[int32]struct{}{
	1: {},
	2: {},
}

// Validate checks the field values on DescribeChainsSupportReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeChainsSupportReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeChainsSupportReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeChainsSupportReplyMultiError, or nil if none found.
func (m *DescribeChainsSupportReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeChainsSupportReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetChains() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribeChainsSupportReplyValidationError{
						field:  fmt.Sprintf("Chains[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribeChainsSupportReplyValidationError{
						field:  fmt.Sprintf("Chains[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribeChainsSupportReplyValidationError{
					field:  fmt.Sprintf("Chains[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DescribeChainsSupportReplyMultiError(errors)
	}

	return nil
}

// DescribeChainsSupportReplyMultiError is an error wrapping multiple
// validation errors returned by DescribeChainsSupportReply.ValidateAll() if
// the designated constraints aren't met.
type DescribeChainsSupportReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeChainsSupportReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeChainsSupportReplyMultiError) AllErrors() []error { return m }

// DescribeChainsSupportReplyValidationError is the validation error returned
// by DescribeChainsSupportReply.Validate if the designated constraints aren't met.
type DescribeChainsSupportReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeChainsSupportReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeChainsSupportReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeChainsSupportReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeChainsSupportReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeChainsSupportReplyValidationError) ErrorName() string {
	return "DescribeChainsSupportReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeChainsSupportReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeChainsSupportReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeChainsSupportReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeChainsSupportReplyValidationError{}

// Validate checks the field values on ModifyAlertRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ModifyAlertRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModifyAlertRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ModifyAlertRequestMultiError, or nil if none found.
func (m *ModifyAlertRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ModifyAlertRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	// no validation rules for AlertID

	if _, ok := _ModifyAlertRequest_AlertType_InLookup[m.GetAlertType()]; !ok {
		err := ModifyAlertRequestValidationError{
			field:  "AlertType",
			reason: "value must be in list [1 2 3]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCurrency()) < 1 {
		err := ModifyAlertRequestValidationError{
			field:  "Currency",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Value

	if _, ok := _ModifyAlertRequest_Frequency_InLookup[m.GetFrequency()]; !ok {
		err := ModifyAlertRequestValidationError{
			field:  "Frequency",
			reason: "value must be in list [1 2]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ModifyAlertRequestMultiError(errors)
	}

	return nil
}

// ModifyAlertRequestMultiError is an error wrapping multiple validation errors
// returned by ModifyAlertRequest.ValidateAll() if the designated constraints
// aren't met.
type ModifyAlertRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModifyAlertRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModifyAlertRequestMultiError) AllErrors() []error { return m }

// ModifyAlertRequestValidationError is the validation error returned by
// ModifyAlertRequest.Validate if the designated constraints aren't met.
type ModifyAlertRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModifyAlertRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModifyAlertRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModifyAlertRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModifyAlertRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModifyAlertRequestValidationError) ErrorName() string {
	return "ModifyAlertRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ModifyAlertRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModifyAlertRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModifyAlertRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModifyAlertRequestValidationError{}

var _ModifyAlertRequest_AlertType_InLookup = map[int32]struct{}{
	1: {},
	2: {},
	3: {},
}

var _ModifyAlertRequest_Frequency_InLookup = map[int32]struct{}{
	1: {},
	2: {},
}

// Validate checks the field values on ModifyAlertReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ModifyAlertReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModifyAlertReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ModifyAlertReplyMultiError, or nil if none found.
func (m *ModifyAlertReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ModifyAlertReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for EventId

	if len(errors) > 0 {
		return ModifyAlertReplyMultiError(errors)
	}

	return nil
}

// ModifyAlertReplyMultiError is an error wrapping multiple validation errors
// returned by ModifyAlertReply.ValidateAll() if the designated constraints
// aren't met.
type ModifyAlertReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModifyAlertReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModifyAlertReplyMultiError) AllErrors() []error { return m }

// ModifyAlertReplyValidationError is the validation error returned by
// ModifyAlertReply.Validate if the designated constraints aren't met.
type ModifyAlertReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModifyAlertReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModifyAlertReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModifyAlertReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModifyAlertReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModifyAlertReplyValidationError) ErrorName() string { return "ModifyAlertReplyValidationError" }

// Error satisfies the builtin error interface
func (e ModifyAlertReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModifyAlertReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModifyAlertReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModifyAlertReplyValidationError{}

// Validate checks the field values on DescribeAlertsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeAlertsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeAlertsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeAlertsRequestMultiError, or nil if none found.
func (m *DescribeAlertsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeAlertsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if utf8.RuneCountInString(m.GetUserID()) < 1 {
		err := DescribeAlertsRequestValidationError{
			field:  "UserID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DescribeAlertsRequestMultiError(errors)
	}

	return nil
}

// DescribeAlertsRequestMultiError is an error wrapping multiple validation
// errors returned by DescribeAlertsRequest.ValidateAll() if the designated
// constraints aren't met.
type DescribeAlertsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeAlertsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeAlertsRequestMultiError) AllErrors() []error { return m }

// DescribeAlertsRequestValidationError is the validation error returned by
// DescribeAlertsRequest.Validate if the designated constraints aren't met.
type DescribeAlertsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeAlertsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeAlertsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeAlertsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeAlertsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeAlertsRequestValidationError) ErrorName() string {
	return "DescribeAlertsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeAlertsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeAlertsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeAlertsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeAlertsRequestValidationError{}

// Validate checks the field values on DescribeAlertsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeAlertsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeAlertsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeAlertsReplyMultiError, or nil if none found.
func (m *DescribeAlertsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeAlertsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCoinAlerts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribeAlertsReplyValidationError{
						field:  fmt.Sprintf("CoinAlerts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribeAlertsReplyValidationError{
						field:  fmt.Sprintf("CoinAlerts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribeAlertsReplyValidationError{
					field:  fmt.Sprintf("CoinAlerts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DescribeAlertsReplyMultiError(errors)
	}

	return nil
}

// DescribeAlertsReplyMultiError is an error wrapping multiple validation
// errors returned by DescribeAlertsReply.ValidateAll() if the designated
// constraints aren't met.
type DescribeAlertsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeAlertsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeAlertsReplyMultiError) AllErrors() []error { return m }

// DescribeAlertsReplyValidationError is the validation error returned by
// DescribeAlertsReply.Validate if the designated constraints aren't met.
type DescribeAlertsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeAlertsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeAlertsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeAlertsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeAlertsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeAlertsReplyValidationError) ErrorName() string {
	return "DescribeAlertsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeAlertsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeAlertsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeAlertsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeAlertsReplyValidationError{}

// Validate checks the field values on CreateAlertRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAlertRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAlertRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAlertRequestMultiError, or nil if none found.
func (m *CreateAlertRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAlertRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	// no validation rules for AlertID

	if utf8.RuneCountInString(m.GetUserID()) < 1 {
		err := CreateAlertRequestValidationError{
			field:  "UserID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCoinID()) < 1 {
		err := CreateAlertRequestValidationError{
			field:  "CoinID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _CreateAlertRequest_AlertType_InLookup[m.GetAlertType()]; !ok {
		err := CreateAlertRequestValidationError{
			field:  "AlertType",
			reason: "value must be in list [1 2 3]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCurrency()) < 1 {
		err := CreateAlertRequestValidationError{
			field:  "Currency",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Value

	if _, ok := _CreateAlertRequest_Frequency_InLookup[m.GetFrequency()]; !ok {
		err := CreateAlertRequestValidationError{
			field:  "Frequency",
			reason: "value must be in list [1 2]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _CreateAlertRequest_Type_InLookup[m.GetType()]; !ok {
		err := CreateAlertRequestValidationError{
			field:  "Type",
			reason: "value must be in list [1 2]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateAlertRequestMultiError(errors)
	}

	return nil
}

// CreateAlertRequestMultiError is an error wrapping multiple validation errors
// returned by CreateAlertRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateAlertRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAlertRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAlertRequestMultiError) AllErrors() []error { return m }

// CreateAlertRequestValidationError is the validation error returned by
// CreateAlertRequest.Validate if the designated constraints aren't met.
type CreateAlertRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAlertRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAlertRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAlertRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAlertRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAlertRequestValidationError) ErrorName() string {
	return "CreateAlertRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAlertRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAlertRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAlertRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAlertRequestValidationError{}

var _CreateAlertRequest_AlertType_InLookup = map[int32]struct{}{
	1: {},
	2: {},
	3: {},
}

var _CreateAlertRequest_Frequency_InLookup = map[int32]struct{}{
	1: {},
	2: {},
}

var _CreateAlertRequest_Type_InLookup = map[int32]struct{}{
	1: {},
	2: {},
}

// Validate checks the field values on CreateAlertReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateAlertReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAlertReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAlertReplyMultiError, or nil if none found.
func (m *CreateAlertReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAlertReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for EventId

	if len(errors) > 0 {
		return CreateAlertReplyMultiError(errors)
	}

	return nil
}

// CreateAlertReplyMultiError is an error wrapping multiple validation errors
// returned by CreateAlertReply.ValidateAll() if the designated constraints
// aren't met.
type CreateAlertReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAlertReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAlertReplyMultiError) AllErrors() []error { return m }

// CreateAlertReplyValidationError is the validation error returned by
// CreateAlertReply.Validate if the designated constraints aren't met.
type CreateAlertReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAlertReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAlertReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAlertReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAlertReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAlertReplyValidationError) ErrorName() string { return "CreateAlertReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateAlertReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAlertReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAlertReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAlertReplyValidationError{}

// Validate checks the field values on RemoveAlertRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveAlertRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveAlertRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveAlertRequestMultiError, or nil if none found.
func (m *RemoveAlertRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveAlertRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	// no validation rules for AlertID

	if len(errors) > 0 {
		return RemoveAlertRequestMultiError(errors)
	}

	return nil
}

// RemoveAlertRequestMultiError is an error wrapping multiple validation errors
// returned by RemoveAlertRequest.ValidateAll() if the designated constraints
// aren't met.
type RemoveAlertRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveAlertRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveAlertRequestMultiError) AllErrors() []error { return m }

// RemoveAlertRequestValidationError is the validation error returned by
// RemoveAlertRequest.Validate if the designated constraints aren't met.
type RemoveAlertRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveAlertRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveAlertRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveAlertRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveAlertRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveAlertRequestValidationError) ErrorName() string {
	return "RemoveAlertRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveAlertRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveAlertRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveAlertRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveAlertRequestValidationError{}

// Validate checks the field values on RemoveAlertReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RemoveAlertReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveAlertReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveAlertReplyMultiError, or nil if none found.
func (m *RemoveAlertReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveAlertReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for EventId

	if len(errors) > 0 {
		return RemoveAlertReplyMultiError(errors)
	}

	return nil
}

// RemoveAlertReplyMultiError is an error wrapping multiple validation errors
// returned by RemoveAlertReply.ValidateAll() if the designated constraints
// aren't met.
type RemoveAlertReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveAlertReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveAlertReplyMultiError) AllErrors() []error { return m }

// RemoveAlertReplyValidationError is the validation error returned by
// RemoveAlertReply.Validate if the designated constraints aren't met.
type RemoveAlertReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveAlertReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveAlertReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveAlertReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveAlertReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveAlertReplyValidationError) ErrorName() string { return "RemoveAlertReplyValidationError" }

// Error satisfies the builtin error interface
func (e RemoveAlertReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveAlertReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveAlertReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveAlertReplyValidationError{}

// Validate checks the field values on DescribeCollectionGuideListRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DescribeCollectionGuideListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCollectionGuideListRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DescribeCollectionGuideListRequestMultiError, or nil if none found.
func (m *DescribeCollectionGuideListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCollectionGuideListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if _, ok := _DescribeCollectionGuideListRequest_CoinType_InLookup[m.GetCoinType()]; !ok {
		err := DescribeCollectionGuideListRequestValidationError{
			field:  "CoinType",
			reason: "value must be in list [1 2]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DescribeCollectionGuideListRequestMultiError(errors)
	}

	return nil
}

// DescribeCollectionGuideListRequestMultiError is an error wrapping multiple
// validation errors returned by
// DescribeCollectionGuideListRequest.ValidateAll() if the designated
// constraints aren't met.
type DescribeCollectionGuideListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCollectionGuideListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCollectionGuideListRequestMultiError) AllErrors() []error { return m }

// DescribeCollectionGuideListRequestValidationError is the validation error
// returned by DescribeCollectionGuideListRequest.Validate if the designated
// constraints aren't met.
type DescribeCollectionGuideListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCollectionGuideListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCollectionGuideListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCollectionGuideListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCollectionGuideListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCollectionGuideListRequestValidationError) ErrorName() string {
	return "DescribeCollectionGuideListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCollectionGuideListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCollectionGuideListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCollectionGuideListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCollectionGuideListRequestValidationError{}

var _DescribeCollectionGuideListRequest_CoinType_InLookup = map[int32]struct{}{
	1: {},
	2: {},
}

// Validate checks the field values on DescribeCollectionGuideListReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DescribeCollectionGuideListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCollectionGuideListReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DescribeCollectionGuideListReplyMultiError, or nil if none found.
func (m *DescribeCollectionGuideListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCollectionGuideListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetGuideList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribeCollectionGuideListReplyValidationError{
						field:  fmt.Sprintf("GuideList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribeCollectionGuideListReplyValidationError{
						field:  fmt.Sprintf("GuideList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribeCollectionGuideListReplyValidationError{
					field:  fmt.Sprintf("GuideList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DescribeCollectionGuideListReplyMultiError(errors)
	}

	return nil
}

// DescribeCollectionGuideListReplyMultiError is an error wrapping multiple
// validation errors returned by
// DescribeCollectionGuideListReply.ValidateAll() if the designated
// constraints aren't met.
type DescribeCollectionGuideListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCollectionGuideListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCollectionGuideListReplyMultiError) AllErrors() []error { return m }

// DescribeCollectionGuideListReplyValidationError is the validation error
// returned by DescribeCollectionGuideListReply.Validate if the designated
// constraints aren't met.
type DescribeCollectionGuideListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCollectionGuideListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCollectionGuideListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCollectionGuideListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCollectionGuideListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCollectionGuideListReplyValidationError) ErrorName() string {
	return "DescribeCollectionGuideListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCollectionGuideListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCollectionGuideListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCollectionGuideListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCollectionGuideListReplyValidationError{}

// Validate checks the field values on ModifyColumnRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ModifyColumnRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModifyColumnRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ModifyColumnRequestMultiError, or nil if none found.
func (m *ModifyColumnRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ModifyColumnRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	// no validation rules for ColumnID

	// no validation rules for Name

	if _, ok := _ModifyColumnRequest_Type_InLookup[m.GetType()]; !ok {
		err := ModifyColumnRequestValidationError{
			field:  "Type",
			reason: "value must be in list [1 2]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Weight

	if m.Valid != nil {
		// no validation rules for Valid
	}

	if len(errors) > 0 {
		return ModifyColumnRequestMultiError(errors)
	}

	return nil
}

// ModifyColumnRequestMultiError is an error wrapping multiple validation
// errors returned by ModifyColumnRequest.ValidateAll() if the designated
// constraints aren't met.
type ModifyColumnRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModifyColumnRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModifyColumnRequestMultiError) AllErrors() []error { return m }

// ModifyColumnRequestValidationError is the validation error returned by
// ModifyColumnRequest.Validate if the designated constraints aren't met.
type ModifyColumnRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModifyColumnRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModifyColumnRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModifyColumnRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModifyColumnRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModifyColumnRequestValidationError) ErrorName() string {
	return "ModifyColumnRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ModifyColumnRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModifyColumnRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModifyColumnRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModifyColumnRequestValidationError{}

var _ModifyColumnRequest_Type_InLookup = map[int32]struct{}{
	1: {},
	2: {},
}

// Validate checks the field values on ModifyColumnReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ModifyColumnReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModifyColumnReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ModifyColumnReplyMultiError, or nil if none found.
func (m *ModifyColumnReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ModifyColumnReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for EventId

	if len(errors) > 0 {
		return ModifyColumnReplyMultiError(errors)
	}

	return nil
}

// ModifyColumnReplyMultiError is an error wrapping multiple validation errors
// returned by ModifyColumnReply.ValidateAll() if the designated constraints
// aren't met.
type ModifyColumnReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModifyColumnReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModifyColumnReplyMultiError) AllErrors() []error { return m }

// ModifyColumnReplyValidationError is the validation error returned by
// ModifyColumnReply.Validate if the designated constraints aren't met.
type ModifyColumnReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModifyColumnReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModifyColumnReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModifyColumnReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModifyColumnReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModifyColumnReplyValidationError) ErrorName() string {
	return "ModifyColumnReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ModifyColumnReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModifyColumnReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModifyColumnReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModifyColumnReplyValidationError{}

// Validate checks the field values on RemoveColumnRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveColumnRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveColumnRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveColumnRequestMultiError, or nil if none found.
func (m *RemoveColumnRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveColumnRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if len(errors) > 0 {
		return RemoveColumnRequestMultiError(errors)
	}

	return nil
}

// RemoveColumnRequestMultiError is an error wrapping multiple validation
// errors returned by RemoveColumnRequest.ValidateAll() if the designated
// constraints aren't met.
type RemoveColumnRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveColumnRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveColumnRequestMultiError) AllErrors() []error { return m }

// RemoveColumnRequestValidationError is the validation error returned by
// RemoveColumnRequest.Validate if the designated constraints aren't met.
type RemoveColumnRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveColumnRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveColumnRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveColumnRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveColumnRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveColumnRequestValidationError) ErrorName() string {
	return "RemoveColumnRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveColumnRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveColumnRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveColumnRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveColumnRequestValidationError{}

// Validate checks the field values on RemoveColumnReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RemoveColumnReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveColumnReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveColumnReplyMultiError, or nil if none found.
func (m *RemoveColumnReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveColumnReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for EventId

	if len(errors) > 0 {
		return RemoveColumnReplyMultiError(errors)
	}

	return nil
}

// RemoveColumnReplyMultiError is an error wrapping multiple validation errors
// returned by RemoveColumnReply.ValidateAll() if the designated constraints
// aren't met.
type RemoveColumnReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveColumnReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveColumnReplyMultiError) AllErrors() []error { return m }

// RemoveColumnReplyValidationError is the validation error returned by
// RemoveColumnReply.Validate if the designated constraints aren't met.
type RemoveColumnReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveColumnReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveColumnReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveColumnReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveColumnReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveColumnReplyValidationError) ErrorName() string {
	return "RemoveColumnReplyValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveColumnReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveColumnReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveColumnReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveColumnReplyValidationError{}

// Validate checks the field values on CreateColumnRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateColumnRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateColumnRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateColumnRequestMultiError, or nil if none found.
func (m *CreateColumnRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateColumnRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for Weight

	if m.Valid != nil {
		// no validation rules for Valid
	}

	if len(errors) > 0 {
		return CreateColumnRequestMultiError(errors)
	}

	return nil
}

// CreateColumnRequestMultiError is an error wrapping multiple validation
// errors returned by CreateColumnRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateColumnRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateColumnRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateColumnRequestMultiError) AllErrors() []error { return m }

// CreateColumnRequestValidationError is the validation error returned by
// CreateColumnRequest.Validate if the designated constraints aren't met.
type CreateColumnRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateColumnRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateColumnRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateColumnRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateColumnRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateColumnRequestValidationError) ErrorName() string {
	return "CreateColumnRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateColumnRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateColumnRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateColumnRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateColumnRequestValidationError{}

// Validate checks the field values on CreateColumnReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateColumnReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateColumnReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateColumnReplyMultiError, or nil if none found.
func (m *CreateColumnReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateColumnReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for EventId

	if len(errors) > 0 {
		return CreateColumnReplyMultiError(errors)
	}

	return nil
}

// CreateColumnReplyMultiError is an error wrapping multiple validation errors
// returned by CreateColumnReply.ValidateAll() if the designated constraints
// aren't met.
type CreateColumnReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateColumnReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateColumnReplyMultiError) AllErrors() []error { return m }

// CreateColumnReplyValidationError is the validation error returned by
// CreateColumnReply.Validate if the designated constraints aren't met.
type CreateColumnReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateColumnReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateColumnReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateColumnReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateColumnReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateColumnReplyValidationError) ErrorName() string {
	return "CreateColumnReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateColumnReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateColumnReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateColumnReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateColumnReplyValidationError{}

// Validate checks the field values on DescribeColumnListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeColumnListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeColumnListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeColumnListRequestMultiError, or nil if none found.
func (m *DescribeColumnListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeColumnListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for Category

	if m.GetPage() <= 0 {
		err := DescribeColumnListRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val > 100 {
		err := DescribeColumnListRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Valid != nil {
		// no validation rules for Valid
	}

	if len(errors) > 0 {
		return DescribeColumnListRequestMultiError(errors)
	}

	return nil
}

// DescribeColumnListRequestMultiError is an error wrapping multiple validation
// errors returned by DescribeColumnListRequest.ValidateAll() if the
// designated constraints aren't met.
type DescribeColumnListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeColumnListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeColumnListRequestMultiError) AllErrors() []error { return m }

// DescribeColumnListRequestValidationError is the validation error returned by
// DescribeColumnListRequest.Validate if the designated constraints aren't met.
type DescribeColumnListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeColumnListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeColumnListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeColumnListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeColumnListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeColumnListRequestValidationError) ErrorName() string {
	return "DescribeColumnListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeColumnListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeColumnListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeColumnListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeColumnListRequestValidationError{}

// Validate checks the field values on DescribeColumnListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeColumnListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeColumnListReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeColumnListReplyMultiError, or nil if none found.
func (m *DescribeColumnListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeColumnListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetColumns() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribeColumnListReplyValidationError{
						field:  fmt.Sprintf("Columns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribeColumnListReplyValidationError{
						field:  fmt.Sprintf("Columns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribeColumnListReplyValidationError{
					field:  fmt.Sprintf("Columns[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DescribeColumnListReplyMultiError(errors)
	}

	return nil
}

// DescribeColumnListReplyMultiError is an error wrapping multiple validation
// errors returned by DescribeColumnListReply.ValidateAll() if the designated
// constraints aren't met.
type DescribeColumnListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeColumnListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeColumnListReplyMultiError) AllErrors() []error { return m }

// DescribeColumnListReplyValidationError is the validation error returned by
// DescribeColumnListReply.Validate if the designated constraints aren't met.
type DescribeColumnListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeColumnListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeColumnListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeColumnListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeColumnListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeColumnListReplyValidationError) ErrorName() string {
	return "DescribeColumnListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeColumnListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeColumnListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeColumnListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeColumnListReplyValidationError{}

// Validate checks the field values on DescribeAllExtraDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeAllExtraDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeAllExtraDetailRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DescribeAllExtraDetailRequestMultiError, or nil if none found.
func (m *DescribeAllExtraDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeAllExtraDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if utf8.RuneCountInString(m.GetCoinID()) < 1 {
		err := DescribeAllExtraDetailRequestValidationError{
			field:  "CoinID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DescribeAllExtraDetailRequestMultiError(errors)
	}

	return nil
}

// DescribeAllExtraDetailRequestMultiError is an error wrapping multiple
// validation errors returned by DescribeAllExtraDetailRequest.ValidateAll()
// if the designated constraints aren't met.
type DescribeAllExtraDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeAllExtraDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeAllExtraDetailRequestMultiError) AllErrors() []error { return m }

// DescribeAllExtraDetailRequestValidationError is the validation error
// returned by DescribeAllExtraDetailRequest.Validate if the designated
// constraints aren't met.
type DescribeAllExtraDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeAllExtraDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeAllExtraDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeAllExtraDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeAllExtraDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeAllExtraDetailRequestValidationError) ErrorName() string {
	return "DescribeAllExtraDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeAllExtraDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeAllExtraDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeAllExtraDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeAllExtraDetailRequestValidationError{}

// Validate checks the field values on DescribeAllExtraDetailReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeAllExtraDetailReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeAllExtraDetailReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeAllExtraDetailReplyMultiError, or nil if none found.
func (m *DescribeAllExtraDetailReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeAllExtraDetailReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CoinID

	// no validation rules for GenesisDate

	// no validation rules for Desc

	if len(errors) > 0 {
		return DescribeAllExtraDetailReplyMultiError(errors)
	}

	return nil
}

// DescribeAllExtraDetailReplyMultiError is an error wrapping multiple
// validation errors returned by DescribeAllExtraDetailReply.ValidateAll() if
// the designated constraints aren't met.
type DescribeAllExtraDetailReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeAllExtraDetailReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeAllExtraDetailReplyMultiError) AllErrors() []error { return m }

// DescribeAllExtraDetailReplyValidationError is the validation error returned
// by DescribeAllExtraDetailReply.Validate if the designated constraints
// aren't met.
type DescribeAllExtraDetailReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeAllExtraDetailReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeAllExtraDetailReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeAllExtraDetailReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeAllExtraDetailReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeAllExtraDetailReplyValidationError) ErrorName() string {
	return "DescribeAllExtraDetailReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeAllExtraDetailReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeAllExtraDetailReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeAllExtraDetailReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeAllExtraDetailReplyValidationError{}

// Validate checks the field values on DescribeCategoryListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCategoryListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCategoryListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeCategoryListRequestMultiError, or nil if none found.
func (m *DescribeCategoryListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCategoryListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if len(errors) > 0 {
		return DescribeCategoryListRequestMultiError(errors)
	}

	return nil
}

// DescribeCategoryListRequestMultiError is an error wrapping multiple
// validation errors returned by DescribeCategoryListRequest.ValidateAll() if
// the designated constraints aren't met.
type DescribeCategoryListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCategoryListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCategoryListRequestMultiError) AllErrors() []error { return m }

// DescribeCategoryListRequestValidationError is the validation error returned
// by DescribeCategoryListRequest.Validate if the designated constraints
// aren't met.
type DescribeCategoryListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCategoryListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCategoryListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCategoryListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCategoryListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCategoryListRequestValidationError) ErrorName() string {
	return "DescribeCategoryListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCategoryListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCategoryListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCategoryListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCategoryListRequestValidationError{}

// Validate checks the field values on DescribeCategoryListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCategoryListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCategoryListReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeCategoryListReplyMultiError, or nil if none found.
func (m *DescribeCategoryListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCategoryListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DescribeCategoryListReplyMultiError(errors)
	}

	return nil
}

// DescribeCategoryListReplyMultiError is an error wrapping multiple validation
// errors returned by DescribeCategoryListReply.ValidateAll() if the
// designated constraints aren't met.
type DescribeCategoryListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCategoryListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCategoryListReplyMultiError) AllErrors() []error { return m }

// DescribeCategoryListReplyValidationError is the validation error returned by
// DescribeCategoryListReply.Validate if the designated constraints aren't met.
type DescribeCategoryListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCategoryListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCategoryListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCategoryListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCategoryListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCategoryListReplyValidationError) ErrorName() string {
	return "DescribeCategoryListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCategoryListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCategoryListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCategoryListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCategoryListReplyValidationError{}

// Validate checks the field values on ModifyMenuCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ModifyMenuCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModifyMenuCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ModifyMenuCategoryRequestMultiError, or nil if none found.
func (m *ModifyMenuCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ModifyMenuCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if _, ok := _ModifyMenuCategoryRequest_Type_InLookup[m.GetType()]; !ok {
		err := ModifyMenuCategoryRequestValidationError{
			field:  "Type",
			reason: "value must be in list [1 2]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ModifyMenuCategoryRequestMultiError(errors)
	}

	return nil
}

// ModifyMenuCategoryRequestMultiError is an error wrapping multiple validation
// errors returned by ModifyMenuCategoryRequest.ValidateAll() if the
// designated constraints aren't met.
type ModifyMenuCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModifyMenuCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModifyMenuCategoryRequestMultiError) AllErrors() []error { return m }

// ModifyMenuCategoryRequestValidationError is the validation error returned by
// ModifyMenuCategoryRequest.Validate if the designated constraints aren't met.
type ModifyMenuCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModifyMenuCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModifyMenuCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModifyMenuCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModifyMenuCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModifyMenuCategoryRequestValidationError) ErrorName() string {
	return "ModifyMenuCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ModifyMenuCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModifyMenuCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModifyMenuCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModifyMenuCategoryRequestValidationError{}

var _ModifyMenuCategoryRequest_Type_InLookup = map[int32]struct{}{
	1: {},
	2: {},
}

// Validate checks the field values on ModifyMenuCategoryReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ModifyMenuCategoryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModifyMenuCategoryReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ModifyMenuCategoryReplyMultiError, or nil if none found.
func (m *ModifyMenuCategoryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ModifyMenuCategoryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for EventId

	if len(errors) > 0 {
		return ModifyMenuCategoryReplyMultiError(errors)
	}

	return nil
}

// ModifyMenuCategoryReplyMultiError is an error wrapping multiple validation
// errors returned by ModifyMenuCategoryReply.ValidateAll() if the designated
// constraints aren't met.
type ModifyMenuCategoryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModifyMenuCategoryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModifyMenuCategoryReplyMultiError) AllErrors() []error { return m }

// ModifyMenuCategoryReplyValidationError is the validation error returned by
// ModifyMenuCategoryReply.Validate if the designated constraints aren't met.
type ModifyMenuCategoryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModifyMenuCategoryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModifyMenuCategoryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModifyMenuCategoryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModifyMenuCategoryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModifyMenuCategoryReplyValidationError) ErrorName() string {
	return "ModifyMenuCategoryReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ModifyMenuCategoryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModifyMenuCategoryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModifyMenuCategoryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModifyMenuCategoryReplyValidationError{}

// Validate checks the field values on CreateCoinCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCoinCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCoinCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCoinCategoryRequestMultiError, or nil if none found.
func (m *CreateCoinCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCoinCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if utf8.RuneCountInString(m.GetCategory()) < 1 {
		err := CreateCoinCategoryRequestValidationError{
			field:  "Category",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateCoinCategoryRequestMultiError(errors)
	}

	return nil
}

// CreateCoinCategoryRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCoinCategoryRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateCoinCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCoinCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCoinCategoryRequestMultiError) AllErrors() []error { return m }

// CreateCoinCategoryRequestValidationError is the validation error returned by
// CreateCoinCategoryRequest.Validate if the designated constraints aren't met.
type CreateCoinCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCoinCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCoinCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCoinCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCoinCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCoinCategoryRequestValidationError) ErrorName() string {
	return "CreateCoinCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCoinCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCoinCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCoinCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCoinCategoryRequestValidationError{}

// Validate checks the field values on CreateCoinCategoryReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCoinCategoryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCoinCategoryReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCoinCategoryReplyMultiError, or nil if none found.
func (m *CreateCoinCategoryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCoinCategoryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for EventId

	if len(errors) > 0 {
		return CreateCoinCategoryReplyMultiError(errors)
	}

	return nil
}

// CreateCoinCategoryReplyMultiError is an error wrapping multiple validation
// errors returned by CreateCoinCategoryReply.ValidateAll() if the designated
// constraints aren't met.
type CreateCoinCategoryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCoinCategoryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCoinCategoryReplyMultiError) AllErrors() []error { return m }

// CreateCoinCategoryReplyValidationError is the validation error returned by
// CreateCoinCategoryReply.Validate if the designated constraints aren't met.
type CreateCoinCategoryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCoinCategoryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCoinCategoryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCoinCategoryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCoinCategoryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCoinCategoryReplyValidationError) ErrorName() string {
	return "CreateCoinCategoryReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCoinCategoryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCoinCategoryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCoinCategoryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCoinCategoryReplyValidationError{}

// Validate checks the field values on ModifyCoinDescriptionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ModifyCoinDescriptionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModifyCoinDescriptionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ModifyCoinDescriptionRequestMultiError, or nil if none found.
func (m *ModifyCoinDescriptionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ModifyCoinDescriptionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if utf8.RuneCountInString(m.GetCoinID()) < 1 {
		err := ModifyCoinDescriptionRequestValidationError{
			field:  "CoinID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Desc

	if len(errors) > 0 {
		return ModifyCoinDescriptionRequestMultiError(errors)
	}

	return nil
}

// ModifyCoinDescriptionRequestMultiError is an error wrapping multiple
// validation errors returned by ModifyCoinDescriptionRequest.ValidateAll() if
// the designated constraints aren't met.
type ModifyCoinDescriptionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModifyCoinDescriptionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModifyCoinDescriptionRequestMultiError) AllErrors() []error { return m }

// ModifyCoinDescriptionRequestValidationError is the validation error returned
// by ModifyCoinDescriptionRequest.Validate if the designated constraints
// aren't met.
type ModifyCoinDescriptionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModifyCoinDescriptionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModifyCoinDescriptionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModifyCoinDescriptionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModifyCoinDescriptionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModifyCoinDescriptionRequestValidationError) ErrorName() string {
	return "ModifyCoinDescriptionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ModifyCoinDescriptionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModifyCoinDescriptionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModifyCoinDescriptionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModifyCoinDescriptionRequestValidationError{}

// Validate checks the field values on ModifyCoinDescriptionReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ModifyCoinDescriptionReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModifyCoinDescriptionReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ModifyCoinDescriptionReplyMultiError, or nil if none found.
func (m *ModifyCoinDescriptionReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ModifyCoinDescriptionReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for EventId

	// no validation rules for CoinID

	if len(errors) > 0 {
		return ModifyCoinDescriptionReplyMultiError(errors)
	}

	return nil
}

// ModifyCoinDescriptionReplyMultiError is an error wrapping multiple
// validation errors returned by ModifyCoinDescriptionReply.ValidateAll() if
// the designated constraints aren't met.
type ModifyCoinDescriptionReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModifyCoinDescriptionReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModifyCoinDescriptionReplyMultiError) AllErrors() []error { return m }

// ModifyCoinDescriptionReplyValidationError is the validation error returned
// by ModifyCoinDescriptionReply.Validate if the designated constraints aren't met.
type ModifyCoinDescriptionReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModifyCoinDescriptionReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModifyCoinDescriptionReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModifyCoinDescriptionReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModifyCoinDescriptionReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModifyCoinDescriptionReplyValidationError) ErrorName() string {
	return "ModifyCoinDescriptionReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ModifyCoinDescriptionReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModifyCoinDescriptionReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModifyCoinDescriptionReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModifyCoinDescriptionReplyValidationError{}

// Validate checks the field values on DescribeCexCoinsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCexCoinsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCexCoinsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeCexCoinsRequestMultiError, or nil if none found.
func (m *DescribeCexCoinsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCexCoinsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if utf8.RuneCountInString(m.GetCurrency()) < 1 {
		err := DescribeCexCoinsRequestValidationError{
			field:  "Currency",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPage() <= 0 {
		err := DescribeCexCoinsRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val > 100 {
		err := DescribeCexCoinsRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := DescribeCexCoinsRequest_SortFieldEnum_name[int32(m.GetSortField())]; !ok {
		err := DescribeCexCoinsRequestValidationError{
			field:  "SortField",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for SortType

	// no validation rules for ColumnID

	// no validation rules for Chain

	// no validation rules for Range

	// no validation rules for RangeWithTime

	for idx, item := range m.GetSort() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribeCexCoinsRequestValidationError{
						field:  fmt.Sprintf("Sort[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribeCexCoinsRequestValidationError{
						field:  fmt.Sprintf("Sort[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribeCexCoinsRequestValidationError{
					field:  fmt.Sprintf("Sort[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Category != nil {

		if utf8.RuneCountInString(m.GetCategory()) < 1 {
			err := DescribeCexCoinsRequestValidationError{
				field:  "Category",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return DescribeCexCoinsRequestMultiError(errors)
	}

	return nil
}

// DescribeCexCoinsRequestMultiError is an error wrapping multiple validation
// errors returned by DescribeCexCoinsRequest.ValidateAll() if the designated
// constraints aren't met.
type DescribeCexCoinsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCexCoinsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCexCoinsRequestMultiError) AllErrors() []error { return m }

// DescribeCexCoinsRequestValidationError is the validation error returned by
// DescribeCexCoinsRequest.Validate if the designated constraints aren't met.
type DescribeCexCoinsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCexCoinsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCexCoinsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCexCoinsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCexCoinsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCexCoinsRequestValidationError) ErrorName() string {
	return "DescribeCexCoinsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCexCoinsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCexCoinsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCexCoinsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCexCoinsRequestValidationError{}

// Validate checks the field values on DescribeCexCoinsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCexCoinsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCexCoinsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeCexCoinsReplyMultiError, or nil if none found.
func (m *DescribeCexCoinsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCexCoinsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCoins() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribeCexCoinsReplyValidationError{
						field:  fmt.Sprintf("Coins[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribeCexCoinsReplyValidationError{
						field:  fmt.Sprintf("Coins[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribeCexCoinsReplyValidationError{
					field:  fmt.Sprintf("Coins[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return DescribeCexCoinsReplyMultiError(errors)
	}

	return nil
}

// DescribeCexCoinsReplyMultiError is an error wrapping multiple validation
// errors returned by DescribeCexCoinsReply.ValidateAll() if the designated
// constraints aren't met.
type DescribeCexCoinsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCexCoinsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCexCoinsReplyMultiError) AllErrors() []error { return m }

// DescribeCexCoinsReplyValidationError is the validation error returned by
// DescribeCexCoinsReply.Validate if the designated constraints aren't met.
type DescribeCexCoinsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCexCoinsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCexCoinsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCexCoinsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCexCoinsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCexCoinsReplyValidationError) ErrorName() string {
	return "DescribeCexCoinsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCexCoinsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCexCoinsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCexCoinsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCexCoinsReplyValidationError{}

// Validate checks the field values on ModifyCoinCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ModifyCoinCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModifyCoinCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ModifyCoinCategoryRequestMultiError, or nil if none found.
func (m *ModifyCoinCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ModifyCoinCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if utf8.RuneCountInString(m.GetCoinID()) < 1 {
		err := ModifyCoinCategoryRequestValidationError{
			field:  "CoinID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _ModifyCoinCategoryRequest_Type_InLookup[m.GetType()]; !ok {
		err := ModifyCoinCategoryRequestValidationError{
			field:  "Type",
			reason: "value must be in list [1 2]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ModifyCoinCategoryRequestMultiError(errors)
	}

	return nil
}

// ModifyCoinCategoryRequestMultiError is an error wrapping multiple validation
// errors returned by ModifyCoinCategoryRequest.ValidateAll() if the
// designated constraints aren't met.
type ModifyCoinCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModifyCoinCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModifyCoinCategoryRequestMultiError) AllErrors() []error { return m }

// ModifyCoinCategoryRequestValidationError is the validation error returned by
// ModifyCoinCategoryRequest.Validate if the designated constraints aren't met.
type ModifyCoinCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModifyCoinCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModifyCoinCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModifyCoinCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModifyCoinCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModifyCoinCategoryRequestValidationError) ErrorName() string {
	return "ModifyCoinCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ModifyCoinCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModifyCoinCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModifyCoinCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModifyCoinCategoryRequestValidationError{}

var _ModifyCoinCategoryRequest_Type_InLookup = map[int32]struct{}{
	1: {},
	2: {},
}

// Validate checks the field values on ModifyCoinCategoryReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ModifyCoinCategoryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModifyCoinCategoryReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ModifyCoinCategoryReplyMultiError, or nil if none found.
func (m *ModifyCoinCategoryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ModifyCoinCategoryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for EventId

	// no validation rules for CoinID

	if len(errors) > 0 {
		return ModifyCoinCategoryReplyMultiError(errors)
	}

	return nil
}

// ModifyCoinCategoryReplyMultiError is an error wrapping multiple validation
// errors returned by ModifyCoinCategoryReply.ValidateAll() if the designated
// constraints aren't met.
type ModifyCoinCategoryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModifyCoinCategoryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModifyCoinCategoryReplyMultiError) AllErrors() []error { return m }

// ModifyCoinCategoryReplyValidationError is the validation error returned by
// ModifyCoinCategoryReply.Validate if the designated constraints aren't met.
type ModifyCoinCategoryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModifyCoinCategoryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModifyCoinCategoryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModifyCoinCategoryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModifyCoinCategoryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModifyCoinCategoryReplyValidationError) ErrorName() string {
	return "ModifyCoinCategoryReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ModifyCoinCategoryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModifyCoinCategoryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModifyCoinCategoryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModifyCoinCategoryReplyValidationError{}

// Validate checks the field values on DescribeMenuCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeMenuCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeMenuCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeMenuCategoryRequestMultiError, or nil if none found.
func (m *DescribeMenuCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeMenuCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if _, ok := _DescribeMenuCategoryRequest_Type_InLookup[m.GetType()]; !ok {
		err := DescribeMenuCategoryRequestValidationError{
			field:  "Type",
			reason: "value must be in list [1 2]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DescribeMenuCategoryRequestMultiError(errors)
	}

	return nil
}

// DescribeMenuCategoryRequestMultiError is an error wrapping multiple
// validation errors returned by DescribeMenuCategoryRequest.ValidateAll() if
// the designated constraints aren't met.
type DescribeMenuCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeMenuCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeMenuCategoryRequestMultiError) AllErrors() []error { return m }

// DescribeMenuCategoryRequestValidationError is the validation error returned
// by DescribeMenuCategoryRequest.Validate if the designated constraints
// aren't met.
type DescribeMenuCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeMenuCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeMenuCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeMenuCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeMenuCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeMenuCategoryRequestValidationError) ErrorName() string {
	return "DescribeMenuCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeMenuCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeMenuCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeMenuCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeMenuCategoryRequestValidationError{}

var _DescribeMenuCategoryRequest_Type_InLookup = map[int32]struct{}{
	1: {},
	2: {},
}

// Validate checks the field values on DescribeMenuCategoryReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeMenuCategoryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeMenuCategoryReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeMenuCategoryReplyMultiError, or nil if none found.
func (m *DescribeMenuCategoryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeMenuCategoryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DescribeMenuCategoryReplyMultiError(errors)
	}

	return nil
}

// DescribeMenuCategoryReplyMultiError is an error wrapping multiple validation
// errors returned by DescribeMenuCategoryReply.ValidateAll() if the
// designated constraints aren't met.
type DescribeMenuCategoryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeMenuCategoryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeMenuCategoryReplyMultiError) AllErrors() []error { return m }

// DescribeMenuCategoryReplyValidationError is the validation error returned by
// DescribeMenuCategoryReply.Validate if the designated constraints aren't met.
type DescribeMenuCategoryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeMenuCategoryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeMenuCategoryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeMenuCategoryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeMenuCategoryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeMenuCategoryReplyValidationError) ErrorName() string {
	return "DescribeMenuCategoryReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeMenuCategoryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeMenuCategoryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeMenuCategoryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeMenuCategoryReplyValidationError{}

// Validate checks the field values on DescribeMarketExtraDetailRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DescribeMarketExtraDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeMarketExtraDetailRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DescribeMarketExtraDetailRequestMultiError, or nil if none found.
func (m *DescribeMarketExtraDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeMarketExtraDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if utf8.RuneCountInString(m.GetCurrency()) < 1 {
		err := DescribeMarketExtraDetailRequestValidationError{
			field:  "Currency",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCoinID()) < 1 {
		err := DescribeMarketExtraDetailRequestValidationError{
			field:  "CoinID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetLang()) < 1 {
		err := DescribeMarketExtraDetailRequestValidationError{
			field:  "Lang",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DescribeMarketExtraDetailRequestMultiError(errors)
	}

	return nil
}

// DescribeMarketExtraDetailRequestMultiError is an error wrapping multiple
// validation errors returned by
// DescribeMarketExtraDetailRequest.ValidateAll() if the designated
// constraints aren't met.
type DescribeMarketExtraDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeMarketExtraDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeMarketExtraDetailRequestMultiError) AllErrors() []error { return m }

// DescribeMarketExtraDetailRequestValidationError is the validation error
// returned by DescribeMarketExtraDetailRequest.Validate if the designated
// constraints aren't met.
type DescribeMarketExtraDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeMarketExtraDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeMarketExtraDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeMarketExtraDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeMarketExtraDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeMarketExtraDetailRequestValidationError) ErrorName() string {
	return "DescribeMarketExtraDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeMarketExtraDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeMarketExtraDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeMarketExtraDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeMarketExtraDetailRequestValidationError{}

// Validate checks the field values on DescribeMarketExtraDetailReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeMarketExtraDetailReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeMarketExtraDetailReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DescribeMarketExtraDetailReplyMultiError, or nil if none found.
func (m *DescribeMarketExtraDetailReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeMarketExtraDetailReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CoinID

	// no validation rules for GenesisDate

	// no validation rules for Description

	for idx, item := range m.GetChainAddress() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribeMarketExtraDetailReplyValidationError{
						field:  fmt.Sprintf("ChainAddress[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribeMarketExtraDetailReplyValidationError{
						field:  fmt.Sprintf("ChainAddress[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribeMarketExtraDetailReplyValidationError{
					field:  fmt.Sprintf("ChainAddress[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetSocialLink()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DescribeMarketExtraDetailReplyValidationError{
					field:  "SocialLink",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DescribeMarketExtraDetailReplyValidationError{
					field:  "SocialLink",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSocialLink()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeMarketExtraDetailReplyValidationError{
				field:  "SocialLink",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DescribeMarketExtraDetailReplyMultiError(errors)
	}

	return nil
}

// DescribeMarketExtraDetailReplyMultiError is an error wrapping multiple
// validation errors returned by DescribeMarketExtraDetailReply.ValidateAll()
// if the designated constraints aren't met.
type DescribeMarketExtraDetailReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeMarketExtraDetailReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeMarketExtraDetailReplyMultiError) AllErrors() []error { return m }

// DescribeMarketExtraDetailReplyValidationError is the validation error
// returned by DescribeMarketExtraDetailReply.Validate if the designated
// constraints aren't met.
type DescribeMarketExtraDetailReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeMarketExtraDetailReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeMarketExtraDetailReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeMarketExtraDetailReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeMarketExtraDetailReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeMarketExtraDetailReplyValidationError) ErrorName() string {
	return "DescribeMarketExtraDetailReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeMarketExtraDetailReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeMarketExtraDetailReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeMarketExtraDetailReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeMarketExtraDetailReplyValidationError{}

// Validate checks the field values on DescribeCoinPriceChartRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCoinPriceChartRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCoinPriceChartRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DescribeCoinPriceChartRequestMultiError, or nil if none found.
func (m *DescribeCoinPriceChartRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinPriceChartRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	// no validation rules for CoinID

	if utf8.RuneCountInString(m.GetVsCurrency()) < 1 {
		err := DescribeCoinPriceChartRequestValidationError{
			field:  "VsCurrency",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetDays(); val <= 0 || val > 11430 {
		err := DescribeCoinPriceChartRequestValidationError{
			field:  "Days",
			reason: "value must be inside range (0, 11430]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Chain

	// no validation rules for TokenAddress

	if len(errors) > 0 {
		return DescribeCoinPriceChartRequestMultiError(errors)
	}

	return nil
}

// DescribeCoinPriceChartRequestMultiError is an error wrapping multiple
// validation errors returned by DescribeCoinPriceChartRequest.ValidateAll()
// if the designated constraints aren't met.
type DescribeCoinPriceChartRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinPriceChartRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinPriceChartRequestMultiError) AllErrors() []error { return m }

// DescribeCoinPriceChartRequestValidationError is the validation error
// returned by DescribeCoinPriceChartRequest.Validate if the designated
// constraints aren't met.
type DescribeCoinPriceChartRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinPriceChartRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinPriceChartRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinPriceChartRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinPriceChartRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinPriceChartRequestValidationError) ErrorName() string {
	return "DescribeCoinPriceChartRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinPriceChartRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinPriceChartRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinPriceChartRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinPriceChartRequestValidationError{}

// Validate checks the field values on DescribeCoinPriceChartReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCoinPriceChartReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCoinPriceChartReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeCoinPriceChartReplyMultiError, or nil if none found.
func (m *DescribeCoinPriceChartReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinPriceChartReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPrices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribeCoinPriceChartReplyValidationError{
						field:  fmt.Sprintf("Prices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribeCoinPriceChartReplyValidationError{
						field:  fmt.Sprintf("Prices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribeCoinPriceChartReplyValidationError{
					field:  fmt.Sprintf("Prices[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetMarketCaps() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribeCoinPriceChartReplyValidationError{
						field:  fmt.Sprintf("MarketCaps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribeCoinPriceChartReplyValidationError{
						field:  fmt.Sprintf("MarketCaps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribeCoinPriceChartReplyValidationError{
					field:  fmt.Sprintf("MarketCaps[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetTotalVolumes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribeCoinPriceChartReplyValidationError{
						field:  fmt.Sprintf("TotalVolumes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribeCoinPriceChartReplyValidationError{
						field:  fmt.Sprintf("TotalVolumes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribeCoinPriceChartReplyValidationError{
					field:  fmt.Sprintf("TotalVolumes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DescribeCoinPriceChartReplyMultiError(errors)
	}

	return nil
}

// DescribeCoinPriceChartReplyMultiError is an error wrapping multiple
// validation errors returned by DescribeCoinPriceChartReply.ValidateAll() if
// the designated constraints aren't met.
type DescribeCoinPriceChartReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinPriceChartReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinPriceChartReplyMultiError) AllErrors() []error { return m }

// DescribeCoinPriceChartReplyValidationError is the validation error returned
// by DescribeCoinPriceChartReply.Validate if the designated constraints
// aren't met.
type DescribeCoinPriceChartReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinPriceChartReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinPriceChartReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinPriceChartReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinPriceChartReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinPriceChartReplyValidationError) ErrorName() string {
	return "DescribeCoinPriceChartReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinPriceChartReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinPriceChartReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinPriceChartReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinPriceChartReplyValidationError{}

// Validate checks the field values on DescribeCoinPriceByRangeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCoinPriceByRangeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCoinPriceByRangeRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DescribeCoinPriceByRangeRequestMultiError, or nil if none found.
func (m *DescribeCoinPriceByRangeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinPriceByRangeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	// no validation rules for CoinID

	if utf8.RuneCountInString(m.GetCurrency()) < 1 {
		err := DescribeCoinPriceByRangeRequestValidationError{
			field:  "Currency",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for From

	// no validation rules for To

	// no validation rules for Chain

	// no validation rules for TokenAddress

	if len(errors) > 0 {
		return DescribeCoinPriceByRangeRequestMultiError(errors)
	}

	return nil
}

// DescribeCoinPriceByRangeRequestMultiError is an error wrapping multiple
// validation errors returned by DescribeCoinPriceByRangeRequest.ValidateAll()
// if the designated constraints aren't met.
type DescribeCoinPriceByRangeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinPriceByRangeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinPriceByRangeRequestMultiError) AllErrors() []error { return m }

// DescribeCoinPriceByRangeRequestValidationError is the validation error
// returned by DescribeCoinPriceByRangeRequest.Validate if the designated
// constraints aren't met.
type DescribeCoinPriceByRangeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinPriceByRangeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinPriceByRangeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinPriceByRangeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinPriceByRangeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinPriceByRangeRequestValidationError) ErrorName() string {
	return "DescribeCoinPriceByRangeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinPriceByRangeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinPriceByRangeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinPriceByRangeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinPriceByRangeRequestValidationError{}

// Validate checks the field values on DescribeCoinPriceByRangeReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCoinPriceByRangeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCoinPriceByRangeReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DescribeCoinPriceByRangeReplyMultiError, or nil if none found.
func (m *DescribeCoinPriceByRangeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinPriceByRangeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPrices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribeCoinPriceByRangeReplyValidationError{
						field:  fmt.Sprintf("Prices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribeCoinPriceByRangeReplyValidationError{
						field:  fmt.Sprintf("Prices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribeCoinPriceByRangeReplyValidationError{
					field:  fmt.Sprintf("Prices[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DescribeCoinPriceByRangeReplyMultiError(errors)
	}

	return nil
}

// DescribeCoinPriceByRangeReplyMultiError is an error wrapping multiple
// validation errors returned by DescribeCoinPriceByRangeReply.ValidateAll()
// if the designated constraints aren't met.
type DescribeCoinPriceByRangeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinPriceByRangeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinPriceByRangeReplyMultiError) AllErrors() []error { return m }

// DescribeCoinPriceByRangeReplyValidationError is the validation error
// returned by DescribeCoinPriceByRangeReply.Validate if the designated
// constraints aren't met.
type DescribeCoinPriceByRangeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinPriceByRangeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinPriceByRangeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinPriceByRangeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinPriceByRangeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinPriceByRangeReplyValidationError) ErrorName() string {
	return "DescribeCoinPriceByRangeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinPriceByRangeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinPriceByRangeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinPriceByRangeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinPriceByRangeReplyValidationError{}

// Validate checks the field values on DescribeCoinPriceByTimestampRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DescribeCoinPriceByTimestampRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCoinPriceByTimestampRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DescribeCoinPriceByTimestampRequestMultiError, or nil if none found.
func (m *DescribeCoinPriceByTimestampRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinPriceByTimestampRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	// no validation rules for CoinID

	// no validation rules for Timestamp

	// no validation rules for Chain

	// no validation rules for TokenAddress

	if len(errors) > 0 {
		return DescribeCoinPriceByTimestampRequestMultiError(errors)
	}

	return nil
}

// DescribeCoinPriceByTimestampRequestMultiError is an error wrapping multiple
// validation errors returned by
// DescribeCoinPriceByTimestampRequest.ValidateAll() if the designated
// constraints aren't met.
type DescribeCoinPriceByTimestampRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinPriceByTimestampRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinPriceByTimestampRequestMultiError) AllErrors() []error { return m }

// DescribeCoinPriceByTimestampRequestValidationError is the validation error
// returned by DescribeCoinPriceByTimestampRequest.Validate if the designated
// constraints aren't met.
type DescribeCoinPriceByTimestampRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinPriceByTimestampRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinPriceByTimestampRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinPriceByTimestampRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinPriceByTimestampRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinPriceByTimestampRequestValidationError) ErrorName() string {
	return "DescribeCoinPriceByTimestampRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinPriceByTimestampRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinPriceByTimestampRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinPriceByTimestampRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinPriceByTimestampRequestValidationError{}

// Validate checks the field values on DescribeCoinPriceByTimestampReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DescribeCoinPriceByTimestampReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCoinPriceByTimestampReply
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DescribeCoinPriceByTimestampReplyMultiError, or nil if none found.
func (m *DescribeCoinPriceByTimestampReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinPriceByTimestampReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPrice()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DescribeCoinPriceByTimestampReplyValidationError{
					field:  "Price",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DescribeCoinPriceByTimestampReplyValidationError{
					field:  "Price",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeCoinPriceByTimestampReplyValidationError{
				field:  "Price",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DescribeCoinPriceByTimestampReplyMultiError(errors)
	}

	return nil
}

// DescribeCoinPriceByTimestampReplyMultiError is an error wrapping multiple
// validation errors returned by
// DescribeCoinPriceByTimestampReply.ValidateAll() if the designated
// constraints aren't met.
type DescribeCoinPriceByTimestampReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinPriceByTimestampReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinPriceByTimestampReplyMultiError) AllErrors() []error { return m }

// DescribeCoinPriceByTimestampReplyValidationError is the validation error
// returned by DescribeCoinPriceByTimestampReply.Validate if the designated
// constraints aren't met.
type DescribeCoinPriceByTimestampReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinPriceByTimestampReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinPriceByTimestampReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinPriceByTimestampReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinPriceByTimestampReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinPriceByTimestampReplyValidationError) ErrorName() string {
	return "DescribeCoinPriceByTimestampReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinPriceByTimestampReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinPriceByTimestampReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinPriceByTimestampReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinPriceByTimestampReplyValidationError{}

// Validate checks the field values on DescribeCoinSwapsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCoinSwapsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCoinSwapsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeCoinSwapsRequestMultiError, or nil if none found.
func (m *DescribeCoinSwapsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinSwapsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if utf8.RuneCountInString(m.GetCoinID()) < 1 {
		err := DescribeCoinSwapsRequestValidationError{
			field:  "CoinID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCurrency()) < 1 {
		err := DescribeCoinSwapsRequestValidationError{
			field:  "Currency",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for BeginTimestamp

	// no validation rules for EndTimestamp

	if m.GetPage() <= 0 {
		err := DescribeCoinSwapsRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val > 500 {
		err := DescribeCoinSwapsRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 500]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DescribeCoinSwapsRequestMultiError(errors)
	}

	return nil
}

// DescribeCoinSwapsRequestMultiError is an error wrapping multiple validation
// errors returned by DescribeCoinSwapsRequest.ValidateAll() if the designated
// constraints aren't met.
type DescribeCoinSwapsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinSwapsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinSwapsRequestMultiError) AllErrors() []error { return m }

// DescribeCoinSwapsRequestValidationError is the validation error returned by
// DescribeCoinSwapsRequest.Validate if the designated constraints aren't met.
type DescribeCoinSwapsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinSwapsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinSwapsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinSwapsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinSwapsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinSwapsRequestValidationError) ErrorName() string {
	return "DescribeCoinSwapsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinSwapsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinSwapsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinSwapsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinSwapsRequestValidationError{}

// Validate checks the field values on DescribeCoinSwapsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCoinSwapsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCoinSwapsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeCoinSwapsReplyMultiError, or nil if none found.
func (m *DescribeCoinSwapsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinSwapsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSwaps() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribeCoinSwapsReplyValidationError{
						field:  fmt.Sprintf("Swaps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribeCoinSwapsReplyValidationError{
						field:  fmt.Sprintf("Swaps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribeCoinSwapsReplyValidationError{
					field:  fmt.Sprintf("Swaps[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return DescribeCoinSwapsReplyMultiError(errors)
	}

	return nil
}

// DescribeCoinSwapsReplyMultiError is an error wrapping multiple validation
// errors returned by DescribeCoinSwapsReply.ValidateAll() if the designated
// constraints aren't met.
type DescribeCoinSwapsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinSwapsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinSwapsReplyMultiError) AllErrors() []error { return m }

// DescribeCoinSwapsReplyValidationError is the validation error returned by
// DescribeCoinSwapsReply.Validate if the designated constraints aren't met.
type DescribeCoinSwapsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinSwapsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinSwapsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinSwapsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinSwapsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinSwapsReplyValidationError) ErrorName() string {
	return "DescribeCoinSwapsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinSwapsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinSwapsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinSwapsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinSwapsReplyValidationError{}

// Validate checks the field values on DescribeCoinLiquidityRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCoinLiquidityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCoinLiquidityRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeCoinLiquidityRequestMultiError, or nil if none found.
func (m *DescribeCoinLiquidityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinLiquidityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if utf8.RuneCountInString(m.GetCoinID()) < 1 {
		err := DescribeCoinLiquidityRequestValidationError{
			field:  "CoinID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCurrency()) < 1 {
		err := DescribeCoinLiquidityRequestValidationError{
			field:  "Currency",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for BeginTimestamp

	// no validation rules for EndTimestamp

	if m.GetPage() <= 0 {
		err := DescribeCoinLiquidityRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val > 500 {
		err := DescribeCoinLiquidityRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 500]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DescribeCoinLiquidityRequestMultiError(errors)
	}

	return nil
}

// DescribeCoinLiquidityRequestMultiError is an error wrapping multiple
// validation errors returned by DescribeCoinLiquidityRequest.ValidateAll() if
// the designated constraints aren't met.
type DescribeCoinLiquidityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinLiquidityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinLiquidityRequestMultiError) AllErrors() []error { return m }

// DescribeCoinLiquidityRequestValidationError is the validation error returned
// by DescribeCoinLiquidityRequest.Validate if the designated constraints
// aren't met.
type DescribeCoinLiquidityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinLiquidityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinLiquidityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinLiquidityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinLiquidityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinLiquidityRequestValidationError) ErrorName() string {
	return "DescribeCoinLiquidityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinLiquidityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinLiquidityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinLiquidityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinLiquidityRequestValidationError{}

// Validate checks the field values on DescribeCoinLiquidityReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCoinLiquidityReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCoinLiquidityReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeCoinLiquidityReplyMultiError, or nil if none found.
func (m *DescribeCoinLiquidityReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinLiquidityReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLiquidity() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribeCoinLiquidityReplyValidationError{
						field:  fmt.Sprintf("Liquidity[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribeCoinLiquidityReplyValidationError{
						field:  fmt.Sprintf("Liquidity[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribeCoinLiquidityReplyValidationError{
					field:  fmt.Sprintf("Liquidity[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return DescribeCoinLiquidityReplyMultiError(errors)
	}

	return nil
}

// DescribeCoinLiquidityReplyMultiError is an error wrapping multiple
// validation errors returned by DescribeCoinLiquidityReply.ValidateAll() if
// the designated constraints aren't met.
type DescribeCoinLiquidityReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinLiquidityReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinLiquidityReplyMultiError) AllErrors() []error { return m }

// DescribeCoinLiquidityReplyValidationError is the validation error returned
// by DescribeCoinLiquidityReply.Validate if the designated constraints aren't met.
type DescribeCoinLiquidityReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinLiquidityReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinLiquidityReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinLiquidityReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinLiquidityReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinLiquidityReplyValidationError) ErrorName() string {
	return "DescribeCoinLiquidityReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinLiquidityReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinLiquidityReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinLiquidityReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinLiquidityReplyValidationError{}

// Validate checks the field values on DescribeCoinLiquidityChartRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DescribeCoinLiquidityChartRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCoinLiquidityChartRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DescribeCoinLiquidityChartRequestMultiError, or nil if none found.
func (m *DescribeCoinLiquidityChartRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinLiquidityChartRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if utf8.RuneCountInString(m.GetCoinID()) < 1 {
		err := DescribeCoinLiquidityChartRequestValidationError{
			field:  "CoinID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCurrency()) < 1 {
		err := DescribeCoinLiquidityChartRequestValidationError{
			field:  "Currency",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetDays(); val <= 0 || val > 11430 {
		err := DescribeCoinLiquidityChartRequestValidationError{
			field:  "Days",
			reason: "value must be inside range (0, 11430]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DescribeCoinLiquidityChartRequestMultiError(errors)
	}

	return nil
}

// DescribeCoinLiquidityChartRequestMultiError is an error wrapping multiple
// validation errors returned by
// DescribeCoinLiquidityChartRequest.ValidateAll() if the designated
// constraints aren't met.
type DescribeCoinLiquidityChartRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinLiquidityChartRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinLiquidityChartRequestMultiError) AllErrors() []error { return m }

// DescribeCoinLiquidityChartRequestValidationError is the validation error
// returned by DescribeCoinLiquidityChartRequest.Validate if the designated
// constraints aren't met.
type DescribeCoinLiquidityChartRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinLiquidityChartRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinLiquidityChartRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinLiquidityChartRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinLiquidityChartRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinLiquidityChartRequestValidationError) ErrorName() string {
	return "DescribeCoinLiquidityChartRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinLiquidityChartRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinLiquidityChartRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinLiquidityChartRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinLiquidityChartRequestValidationError{}

// Validate checks the field values on DescribeCoinLiquidityChartReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCoinLiquidityChartReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCoinLiquidityChartReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DescribeCoinLiquidityChartReplyMultiError, or nil if none found.
func (m *DescribeCoinLiquidityChartReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinLiquidityChartReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLiquidity() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribeCoinLiquidityChartReplyValidationError{
						field:  fmt.Sprintf("Liquidity[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribeCoinLiquidityChartReplyValidationError{
						field:  fmt.Sprintf("Liquidity[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribeCoinLiquidityChartReplyValidationError{
					field:  fmt.Sprintf("Liquidity[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DescribeCoinLiquidityChartReplyMultiError(errors)
	}

	return nil
}

// DescribeCoinLiquidityChartReplyMultiError is an error wrapping multiple
// validation errors returned by DescribeCoinLiquidityChartReply.ValidateAll()
// if the designated constraints aren't met.
type DescribeCoinLiquidityChartReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinLiquidityChartReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinLiquidityChartReplyMultiError) AllErrors() []error { return m }

// DescribeCoinLiquidityChartReplyValidationError is the validation error
// returned by DescribeCoinLiquidityChartReply.Validate if the designated
// constraints aren't met.
type DescribeCoinLiquidityChartReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinLiquidityChartReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinLiquidityChartReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinLiquidityChartReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinLiquidityChartReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinLiquidityChartReplyValidationError) ErrorName() string {
	return "DescribeCoinLiquidityChartReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinLiquidityChartReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinLiquidityChartReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinLiquidityChartReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinLiquidityChartReplyValidationError{}

// Validate checks the field values on DescribeCoinUserChartRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCoinUserChartRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCoinUserChartRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeCoinUserChartRequestMultiError, or nil if none found.
func (m *DescribeCoinUserChartRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinUserChartRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if utf8.RuneCountInString(m.GetCoinID()) < 1 {
		err := DescribeCoinUserChartRequestValidationError{
			field:  "CoinID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetDays(); val <= 0 || val > 11430 {
		err := DescribeCoinUserChartRequestValidationError{
			field:  "Days",
			reason: "value must be inside range (0, 11430]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DescribeCoinUserChartRequestMultiError(errors)
	}

	return nil
}

// DescribeCoinUserChartRequestMultiError is an error wrapping multiple
// validation errors returned by DescribeCoinUserChartRequest.ValidateAll() if
// the designated constraints aren't met.
type DescribeCoinUserChartRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinUserChartRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinUserChartRequestMultiError) AllErrors() []error { return m }

// DescribeCoinUserChartRequestValidationError is the validation error returned
// by DescribeCoinUserChartRequest.Validate if the designated constraints
// aren't met.
type DescribeCoinUserChartRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinUserChartRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinUserChartRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinUserChartRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinUserChartRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinUserChartRequestValidationError) ErrorName() string {
	return "DescribeCoinUserChartRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinUserChartRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinUserChartRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinUserChartRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinUserChartRequestValidationError{}

// Validate checks the field values on DescribeCoinUserChartReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCoinUserChartReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCoinUserChartReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeCoinUserChartReplyMultiError, or nil if none found.
func (m *DescribeCoinUserChartReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinUserChartReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribeCoinUserChartReplyValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribeCoinUserChartReplyValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribeCoinUserChartReplyValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DescribeCoinUserChartReplyMultiError(errors)
	}

	return nil
}

// DescribeCoinUserChartReplyMultiError is an error wrapping multiple
// validation errors returned by DescribeCoinUserChartReply.ValidateAll() if
// the designated constraints aren't met.
type DescribeCoinUserChartReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinUserChartReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinUserChartReplyMultiError) AllErrors() []error { return m }

// DescribeCoinUserChartReplyValidationError is the validation error returned
// by DescribeCoinUserChartReply.Validate if the designated constraints aren't met.
type DescribeCoinUserChartReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinUserChartReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinUserChartReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinUserChartReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinUserChartReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinUserChartReplyValidationError) ErrorName() string {
	return "DescribeCoinUserChartReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinUserChartReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinUserChartReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinUserChartReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinUserChartReplyValidationError{}

// Validate checks the field values on DescribeCoinOrderChartRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCoinOrderChartRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCoinOrderChartRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DescribeCoinOrderChartRequestMultiError, or nil if none found.
func (m *DescribeCoinOrderChartRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinOrderChartRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if utf8.RuneCountInString(m.GetCoinID()) < 1 {
		err := DescribeCoinOrderChartRequestValidationError{
			field:  "CoinID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetDays(); val <= 0 || val > 11430 {
		err := DescribeCoinOrderChartRequestValidationError{
			field:  "Days",
			reason: "value must be inside range (0, 11430]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DescribeCoinOrderChartRequestMultiError(errors)
	}

	return nil
}

// DescribeCoinOrderChartRequestMultiError is an error wrapping multiple
// validation errors returned by DescribeCoinOrderChartRequest.ValidateAll()
// if the designated constraints aren't met.
type DescribeCoinOrderChartRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinOrderChartRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinOrderChartRequestMultiError) AllErrors() []error { return m }

// DescribeCoinOrderChartRequestValidationError is the validation error
// returned by DescribeCoinOrderChartRequest.Validate if the designated
// constraints aren't met.
type DescribeCoinOrderChartRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinOrderChartRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinOrderChartRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinOrderChartRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinOrderChartRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinOrderChartRequestValidationError) ErrorName() string {
	return "DescribeCoinOrderChartRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinOrderChartRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinOrderChartRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinOrderChartRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinOrderChartRequestValidationError{}

// Validate checks the field values on DescribeCoinOrderChartReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCoinOrderChartReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCoinOrderChartReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeCoinOrderChartReplyMultiError, or nil if none found.
func (m *DescribeCoinOrderChartReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinOrderChartReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribeCoinOrderChartReplyValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribeCoinOrderChartReplyValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribeCoinOrderChartReplyValidationError{
					field:  fmt.Sprintf("Orders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DescribeCoinOrderChartReplyMultiError(errors)
	}

	return nil
}

// DescribeCoinOrderChartReplyMultiError is an error wrapping multiple
// validation errors returned by DescribeCoinOrderChartReply.ValidateAll() if
// the designated constraints aren't met.
type DescribeCoinOrderChartReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinOrderChartReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinOrderChartReplyMultiError) AllErrors() []error { return m }

// DescribeCoinOrderChartReplyValidationError is the validation error returned
// by DescribeCoinOrderChartReply.Validate if the designated constraints
// aren't met.
type DescribeCoinOrderChartReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinOrderChartReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinOrderChartReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinOrderChartReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinOrderChartReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinOrderChartReplyValidationError) ErrorName() string {
	return "DescribeCoinOrderChartReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinOrderChartReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinOrderChartReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinOrderChartReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinOrderChartReplyValidationError{}

// Validate checks the field values on DescribeCoinVolumeChartRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCoinVolumeChartRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCoinVolumeChartRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DescribeCoinVolumeChartRequestMultiError, or nil if none found.
func (m *DescribeCoinVolumeChartRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinVolumeChartRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if utf8.RuneCountInString(m.GetCoinID()) < 1 {
		err := DescribeCoinVolumeChartRequestValidationError{
			field:  "CoinID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCurrency()) < 1 {
		err := DescribeCoinVolumeChartRequestValidationError{
			field:  "Currency",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetDays(); val <= 0 || val > 11430 {
		err := DescribeCoinVolumeChartRequestValidationError{
			field:  "Days",
			reason: "value must be inside range (0, 11430]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DescribeCoinVolumeChartRequestMultiError(errors)
	}

	return nil
}

// DescribeCoinVolumeChartRequestMultiError is an error wrapping multiple
// validation errors returned by DescribeCoinVolumeChartRequest.ValidateAll()
// if the designated constraints aren't met.
type DescribeCoinVolumeChartRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinVolumeChartRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinVolumeChartRequestMultiError) AllErrors() []error { return m }

// DescribeCoinVolumeChartRequestValidationError is the validation error
// returned by DescribeCoinVolumeChartRequest.Validate if the designated
// constraints aren't met.
type DescribeCoinVolumeChartRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinVolumeChartRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinVolumeChartRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinVolumeChartRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinVolumeChartRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinVolumeChartRequestValidationError) ErrorName() string {
	return "DescribeCoinVolumeChartRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinVolumeChartRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinVolumeChartRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinVolumeChartRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinVolumeChartRequestValidationError{}

// Validate checks the field values on DescribeCoinVolumeChartReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCoinVolumeChartReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCoinVolumeChartReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeCoinVolumeChartReplyMultiError, or nil if none found.
func (m *DescribeCoinVolumeChartReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinVolumeChartReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetVolumes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribeCoinVolumeChartReplyValidationError{
						field:  fmt.Sprintf("Volumes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribeCoinVolumeChartReplyValidationError{
						field:  fmt.Sprintf("Volumes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribeCoinVolumeChartReplyValidationError{
					field:  fmt.Sprintf("Volumes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DescribeCoinVolumeChartReplyMultiError(errors)
	}

	return nil
}

// DescribeCoinVolumeChartReplyMultiError is an error wrapping multiple
// validation errors returned by DescribeCoinVolumeChartReply.ValidateAll() if
// the designated constraints aren't met.
type DescribeCoinVolumeChartReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinVolumeChartReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinVolumeChartReplyMultiError) AllErrors() []error { return m }

// DescribeCoinVolumeChartReplyValidationError is the validation error returned
// by DescribeCoinVolumeChartReply.Validate if the designated constraints
// aren't met.
type DescribeCoinVolumeChartReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinVolumeChartReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinVolumeChartReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinVolumeChartReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinVolumeChartReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinVolumeChartReplyValidationError) ErrorName() string {
	return "DescribeCoinVolumeChartReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinVolumeChartReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinVolumeChartReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinVolumeChartReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinVolumeChartReplyValidationError{}

// Validate checks the field values on DescribeCoinSwapStatsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCoinSwapStatsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCoinSwapStatsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeCoinSwapStatsRequestMultiError, or nil if none found.
func (m *DescribeCoinSwapStatsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinSwapStatsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if utf8.RuneCountInString(m.GetCoinID()) < 1 {
		err := DescribeCoinSwapStatsRequestValidationError{
			field:  "CoinID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCurrency()) < 1 {
		err := DescribeCoinSwapStatsRequestValidationError{
			field:  "Currency",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DescribeCoinSwapStatsRequestMultiError(errors)
	}

	return nil
}

// DescribeCoinSwapStatsRequestMultiError is an error wrapping multiple
// validation errors returned by DescribeCoinSwapStatsRequest.ValidateAll() if
// the designated constraints aren't met.
type DescribeCoinSwapStatsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinSwapStatsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinSwapStatsRequestMultiError) AllErrors() []error { return m }

// DescribeCoinSwapStatsRequestValidationError is the validation error returned
// by DescribeCoinSwapStatsRequest.Validate if the designated constraints
// aren't met.
type DescribeCoinSwapStatsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinSwapStatsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinSwapStatsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinSwapStatsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinSwapStatsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinSwapStatsRequestValidationError) ErrorName() string {
	return "DescribeCoinSwapStatsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinSwapStatsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinSwapStatsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinSwapStatsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinSwapStatsRequestValidationError{}

// Validate checks the field values on DescribeCoinSwapStatsReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCoinSwapStatsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCoinSwapStatsReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeCoinSwapStatsReplyMultiError, or nil if none found.
func (m *DescribeCoinSwapStatsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinSwapStatsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Liquidity

	if all {
		switch v := interface{}(m.GetVolume24H()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DescribeCoinSwapStatsReplyValidationError{
					field:  "Volume24H",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DescribeCoinSwapStatsReplyValidationError{
					field:  "Volume24H",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVolume24H()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeCoinSwapStatsReplyValidationError{
				field:  "Volume24H",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOrders24H()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DescribeCoinSwapStatsReplyValidationError{
					field:  "Orders24H",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DescribeCoinSwapStatsReplyValidationError{
					field:  "Orders24H",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrders24H()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeCoinSwapStatsReplyValidationError{
				field:  "Orders24H",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUsers24H()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DescribeCoinSwapStatsReplyValidationError{
					field:  "Users24H",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DescribeCoinSwapStatsReplyValidationError{
					field:  "Users24H",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUsers24H()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeCoinSwapStatsReplyValidationError{
				field:  "Users24H",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DescribeCoinSwapStatsReplyMultiError(errors)
	}

	return nil
}

// DescribeCoinSwapStatsReplyMultiError is an error wrapping multiple
// validation errors returned by DescribeCoinSwapStatsReply.ValidateAll() if
// the designated constraints aren't met.
type DescribeCoinSwapStatsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinSwapStatsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinSwapStatsReplyMultiError) AllErrors() []error { return m }

// DescribeCoinSwapStatsReplyValidationError is the validation error returned
// by DescribeCoinSwapStatsReply.Validate if the designated constraints aren't met.
type DescribeCoinSwapStatsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinSwapStatsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinSwapStatsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinSwapStatsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinSwapStatsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinSwapStatsReplyValidationError) ErrorName() string {
	return "DescribeCoinSwapStatsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinSwapStatsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinSwapStatsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinSwapStatsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinSwapStatsReplyValidationError{}

// Validate checks the field values on DescribeDeFiCoinsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeDeFiCoinsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeDeFiCoinsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeDeFiCoinsRequestMultiError, or nil if none found.
func (m *DescribeDeFiCoinsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeDeFiCoinsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if utf8.RuneCountInString(m.GetCurrency()) < 1 {
		err := DescribeDeFiCoinsRequestValidationError{
			field:  "Currency",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPage() <= 0 {
		err := DescribeDeFiCoinsRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val > 100 {
		err := DescribeDeFiCoinsRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := DescribeDeFiCoinsRequest_SortFieldDefine_name[int32(m.GetSortField())]; !ok {
		err := DescribeDeFiCoinsRequestValidationError{
			field:  "SortField",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for SortType

	// no validation rules for Category

	// no validation rules for CoinID

	// no validation rules for ColumnID

	// no validation rules for Chain

	// no validation rules for Range

	// no validation rules for RangeWithTime

	if len(errors) > 0 {
		return DescribeDeFiCoinsRequestMultiError(errors)
	}

	return nil
}

// DescribeDeFiCoinsRequestMultiError is an error wrapping multiple validation
// errors returned by DescribeDeFiCoinsRequest.ValidateAll() if the designated
// constraints aren't met.
type DescribeDeFiCoinsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeDeFiCoinsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeDeFiCoinsRequestMultiError) AllErrors() []error { return m }

// DescribeDeFiCoinsRequestValidationError is the validation error returned by
// DescribeDeFiCoinsRequest.Validate if the designated constraints aren't met.
type DescribeDeFiCoinsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeDeFiCoinsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeDeFiCoinsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeDeFiCoinsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeDeFiCoinsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeDeFiCoinsRequestValidationError) ErrorName() string {
	return "DescribeDeFiCoinsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeDeFiCoinsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeDeFiCoinsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeDeFiCoinsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeDeFiCoinsRequestValidationError{}

// Validate checks the field values on DescribeDeFiCoinsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeDeFiCoinsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeDeFiCoinsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeDeFiCoinsReplyMultiError, or nil if none found.
func (m *DescribeDeFiCoinsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeDeFiCoinsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCoins() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribeDeFiCoinsReplyValidationError{
						field:  fmt.Sprintf("Coins[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribeDeFiCoinsReplyValidationError{
						field:  fmt.Sprintf("Coins[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribeDeFiCoinsReplyValidationError{
					field:  fmt.Sprintf("Coins[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return DescribeDeFiCoinsReplyMultiError(errors)
	}

	return nil
}

// DescribeDeFiCoinsReplyMultiError is an error wrapping multiple validation
// errors returned by DescribeDeFiCoinsReply.ValidateAll() if the designated
// constraints aren't met.
type DescribeDeFiCoinsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeDeFiCoinsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeDeFiCoinsReplyMultiError) AllErrors() []error { return m }

// DescribeDeFiCoinsReplyValidationError is the validation error returned by
// DescribeDeFiCoinsReply.Validate if the designated constraints aren't met.
type DescribeDeFiCoinsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeDeFiCoinsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeDeFiCoinsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeDeFiCoinsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeDeFiCoinsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeDeFiCoinsReplyValidationError) ErrorName() string {
	return "DescribeDeFiCoinsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeDeFiCoinsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeDeFiCoinsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeDeFiCoinsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeDeFiCoinsReplyValidationError{}

// Validate checks the field values on DescribeCoinSimplesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCoinSimplesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCoinSimplesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeCoinSimplesRequestMultiError, or nil if none found.
func (m *DescribeCoinSimplesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinSimplesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if len(m.GetCoinIDs()) < 1 {
		err := DescribeCoinSimplesRequestValidationError{
			field:  "CoinIDs",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DescribeCoinSimplesRequestMultiError(errors)
	}

	return nil
}

// DescribeCoinSimplesRequestMultiError is an error wrapping multiple
// validation errors returned by DescribeCoinSimplesRequest.ValidateAll() if
// the designated constraints aren't met.
type DescribeCoinSimplesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinSimplesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinSimplesRequestMultiError) AllErrors() []error { return m }

// DescribeCoinSimplesRequestValidationError is the validation error returned
// by DescribeCoinSimplesRequest.Validate if the designated constraints aren't met.
type DescribeCoinSimplesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinSimplesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinSimplesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinSimplesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinSimplesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinSimplesRequestValidationError) ErrorName() string {
	return "DescribeCoinSimplesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinSimplesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinSimplesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinSimplesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinSimplesRequestValidationError{}

// Validate checks the field values on DescribeCoinSimplesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCoinSimplesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCoinSimplesReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeCoinSimplesReplyMultiError, or nil if none found.
func (m *DescribeCoinSimplesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinSimplesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCoins() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribeCoinSimplesReplyValidationError{
						field:  fmt.Sprintf("Coins[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribeCoinSimplesReplyValidationError{
						field:  fmt.Sprintf("Coins[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribeCoinSimplesReplyValidationError{
					field:  fmt.Sprintf("Coins[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DescribeCoinSimplesReplyMultiError(errors)
	}

	return nil
}

// DescribeCoinSimplesReplyMultiError is an error wrapping multiple validation
// errors returned by DescribeCoinSimplesReply.ValidateAll() if the designated
// constraints aren't met.
type DescribeCoinSimplesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinSimplesReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinSimplesReplyMultiError) AllErrors() []error { return m }

// DescribeCoinSimplesReplyValidationError is the validation error returned by
// DescribeCoinSimplesReply.Validate if the designated constraints aren't met.
type DescribeCoinSimplesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinSimplesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinSimplesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinSimplesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinSimplesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinSimplesReplyValidationError) ErrorName() string {
	return "DescribeCoinSimplesReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinSimplesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinSimplesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinSimplesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinSimplesReplyValidationError{}

// Validate checks the field values on SearchCoinsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchCoinsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchCoinsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchCoinsRequestMultiError, or nil if none found.
func (m *SearchCoinsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchCoinsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if utf8.RuneCountInString(m.GetKeyword()) < 1 {
		err := SearchCoinsRequestValidationError{
			field:  "Keyword",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val > 100 {
		err := SearchCoinsRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SearchCoinsRequestMultiError(errors)
	}

	return nil
}

// SearchCoinsRequestMultiError is an error wrapping multiple validation errors
// returned by SearchCoinsRequest.ValidateAll() if the designated constraints
// aren't met.
type SearchCoinsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchCoinsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchCoinsRequestMultiError) AllErrors() []error { return m }

// SearchCoinsRequestValidationError is the validation error returned by
// SearchCoinsRequest.Validate if the designated constraints aren't met.
type SearchCoinsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchCoinsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchCoinsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchCoinsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchCoinsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchCoinsRequestValidationError) ErrorName() string {
	return "SearchCoinsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchCoinsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchCoinsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchCoinsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchCoinsRequestValidationError{}

// Validate checks the field values on SearchCoinsReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SearchCoinsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchCoinsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchCoinsReplyMultiError, or nil if none found.
func (m *SearchCoinsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchCoinsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCoins() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchCoinsReplyValidationError{
						field:  fmt.Sprintf("Coins[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchCoinsReplyValidationError{
						field:  fmt.Sprintf("Coins[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchCoinsReplyValidationError{
					field:  fmt.Sprintf("Coins[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchCoinsReplyMultiError(errors)
	}

	return nil
}

// SearchCoinsReplyMultiError is an error wrapping multiple validation errors
// returned by SearchCoinsReply.ValidateAll() if the designated constraints
// aren't met.
type SearchCoinsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchCoinsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchCoinsReplyMultiError) AllErrors() []error { return m }

// SearchCoinsReplyValidationError is the validation error returned by
// SearchCoinsReply.Validate if the designated constraints aren't met.
type SearchCoinsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchCoinsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchCoinsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchCoinsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchCoinsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchCoinsReplyValidationError) ErrorName() string { return "SearchCoinsReplyValidationError" }

// Error satisfies the builtin error interface
func (e SearchCoinsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchCoinsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchCoinsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchCoinsReplyValidationError{}

// Validate checks the field values on DescribeTokensRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeTokensRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeTokensRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeTokensRequestMultiError, or nil if none found.
func (m *DescribeTokensRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeTokensRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	// no validation rules for CoinID

	// no validation rules for Symbol

	// no validation rules for Address

	// no validation rules for Chain

	if m.GetPage() <= 0 {
		err := DescribeTokensRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val > 100 {
		err := DescribeTokensRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DescribeTokensRequestMultiError(errors)
	}

	return nil
}

// DescribeTokensRequestMultiError is an error wrapping multiple validation
// errors returned by DescribeTokensRequest.ValidateAll() if the designated
// constraints aren't met.
type DescribeTokensRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeTokensRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeTokensRequestMultiError) AllErrors() []error { return m }

// DescribeTokensRequestValidationError is the validation error returned by
// DescribeTokensRequest.Validate if the designated constraints aren't met.
type DescribeTokensRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeTokensRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeTokensRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeTokensRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeTokensRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeTokensRequestValidationError) ErrorName() string {
	return "DescribeTokensRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeTokensRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeTokensRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeTokensRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeTokensRequestValidationError{}

// Validate checks the field values on DescribeTokensReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeTokensReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeTokensReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeTokensReplyMultiError, or nil if none found.
func (m *DescribeTokensReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeTokensReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetTokens() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribeTokensReplyValidationError{
						field:  fmt.Sprintf("Tokens[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribeTokensReplyValidationError{
						field:  fmt.Sprintf("Tokens[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribeTokensReplyValidationError{
					field:  fmt.Sprintf("Tokens[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DescribeTokensReplyMultiError(errors)
	}

	return nil
}

// DescribeTokensReplyMultiError is an error wrapping multiple validation
// errors returned by DescribeTokensReply.ValidateAll() if the designated
// constraints aren't met.
type DescribeTokensReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeTokensReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeTokensReplyMultiError) AllErrors() []error { return m }

// DescribeTokensReplyValidationError is the validation error returned by
// DescribeTokensReply.Validate if the designated constraints aren't met.
type DescribeTokensReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeTokensReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeTokensReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeTokensReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeTokensReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeTokensReplyValidationError) ErrorName() string {
	return "DescribeTokensReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeTokensReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeTokensReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeTokensReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeTokensReplyValidationError{}

// Validate checks the field values on DescribeGuruChainsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeGuruChainsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeGuruChainsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeGuruChainsRequestMultiError, or nil if none found.
func (m *DescribeGuruChainsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeGuruChainsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if len(errors) > 0 {
		return DescribeGuruChainsRequestMultiError(errors)
	}

	return nil
}

// DescribeGuruChainsRequestMultiError is an error wrapping multiple validation
// errors returned by DescribeGuruChainsRequest.ValidateAll() if the
// designated constraints aren't met.
type DescribeGuruChainsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeGuruChainsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeGuruChainsRequestMultiError) AllErrors() []error { return m }

// DescribeGuruChainsRequestValidationError is the validation error returned by
// DescribeGuruChainsRequest.Validate if the designated constraints aren't met.
type DescribeGuruChainsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeGuruChainsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeGuruChainsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeGuruChainsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeGuruChainsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeGuruChainsRequestValidationError) ErrorName() string {
	return "DescribeGuruChainsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeGuruChainsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeGuruChainsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeGuruChainsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeGuruChainsRequestValidationError{}

// Validate checks the field values on DescribeGuruChainsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeGuruChainsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeGuruChainsReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeGuruChainsReplyMultiError, or nil if none found.
func (m *DescribeGuruChainsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeGuruChainsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetChains() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribeGuruChainsReplyValidationError{
						field:  fmt.Sprintf("Chains[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribeGuruChainsReplyValidationError{
						field:  fmt.Sprintf("Chains[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribeGuruChainsReplyValidationError{
					field:  fmt.Sprintf("Chains[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DescribeGuruChainsReplyMultiError(errors)
	}

	return nil
}

// DescribeGuruChainsReplyMultiError is an error wrapping multiple validation
// errors returned by DescribeGuruChainsReply.ValidateAll() if the designated
// constraints aren't met.
type DescribeGuruChainsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeGuruChainsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeGuruChainsReplyMultiError) AllErrors() []error { return m }

// DescribeGuruChainsReplyValidationError is the validation error returned by
// DescribeGuruChainsReply.Validate if the designated constraints aren't met.
type DescribeGuruChainsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeGuruChainsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeGuruChainsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeGuruChainsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeGuruChainsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeGuruChainsReplyValidationError) ErrorName() string {
	return "DescribeGuruChainsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeGuruChainsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeGuruChainsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeGuruChainsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeGuruChainsReplyValidationError{}

// Validate checks the field values on DescribeSwapConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeSwapConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeSwapConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeSwapConfigRequestMultiError, or nil if none found.
func (m *DescribeSwapConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeSwapConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if utf8.RuneCountInString(m.GetCoinID()) < 1 {
		err := DescribeSwapConfigRequestValidationError{
			field:  "CoinID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _DescribeSwapConfigRequest_Client_InLookup[m.GetClient()]; !ok {
		err := DescribeSwapConfigRequestValidationError{
			field:  "Client",
			reason: "value must be in list [1 2]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DescribeSwapConfigRequestMultiError(errors)
	}

	return nil
}

// DescribeSwapConfigRequestMultiError is an error wrapping multiple validation
// errors returned by DescribeSwapConfigRequest.ValidateAll() if the
// designated constraints aren't met.
type DescribeSwapConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeSwapConfigRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeSwapConfigRequestMultiError) AllErrors() []error { return m }

// DescribeSwapConfigRequestValidationError is the validation error returned by
// DescribeSwapConfigRequest.Validate if the designated constraints aren't met.
type DescribeSwapConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeSwapConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeSwapConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeSwapConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeSwapConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeSwapConfigRequestValidationError) ErrorName() string {
	return "DescribeSwapConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeSwapConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeSwapConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeSwapConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeSwapConfigRequestValidationError{}

var _DescribeSwapConfigRequest_Client_InLookup = map[int32]struct{}{
	1: {},
	2: {},
}

// Validate checks the field values on DescribeSwapConfigReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeSwapConfigReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeSwapConfigReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeSwapConfigReplyMultiError, or nil if none found.
func (m *DescribeSwapConfigReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeSwapConfigReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Category

	// no validation rules for Config

	if len(errors) > 0 {
		return DescribeSwapConfigReplyMultiError(errors)
	}

	return nil
}

// DescribeSwapConfigReplyMultiError is an error wrapping multiple validation
// errors returned by DescribeSwapConfigReply.ValidateAll() if the designated
// constraints aren't met.
type DescribeSwapConfigReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeSwapConfigReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeSwapConfigReplyMultiError) AllErrors() []error { return m }

// DescribeSwapConfigReplyValidationError is the validation error returned by
// DescribeSwapConfigReply.Validate if the designated constraints aren't met.
type DescribeSwapConfigReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeSwapConfigReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeSwapConfigReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeSwapConfigReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeSwapConfigReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeSwapConfigReplyValidationError) ErrorName() string {
	return "DescribeSwapConfigReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeSwapConfigReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeSwapConfigReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeSwapConfigReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeSwapConfigReplyValidationError{}

// Validate checks the field values on DescribeCoinsByFieldsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCoinsByFieldsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCoinsByFieldsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeCoinsByFieldsRequestMultiError, or nil if none found.
func (m *DescribeCoinsByFieldsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinsByFieldsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if l := len(m.GetCoinIDs()); l < 1 || l > 100 {
		err := DescribeCoinsByFieldsRequestValidationError{
			field:  "CoinIDs",
			reason: "value must contain between 1 and 100 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetFields()) < 1 {
		err := DescribeCoinsByFieldsRequestValidationError{
			field:  "Fields",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DescribeCoinsByFieldsRequestMultiError(errors)
	}

	return nil
}

// DescribeCoinsByFieldsRequestMultiError is an error wrapping multiple
// validation errors returned by DescribeCoinsByFieldsRequest.ValidateAll() if
// the designated constraints aren't met.
type DescribeCoinsByFieldsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinsByFieldsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinsByFieldsRequestMultiError) AllErrors() []error { return m }

// DescribeCoinsByFieldsRequestValidationError is the validation error returned
// by DescribeCoinsByFieldsRequest.Validate if the designated constraints
// aren't met.
type DescribeCoinsByFieldsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinsByFieldsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinsByFieldsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinsByFieldsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinsByFieldsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinsByFieldsRequestValidationError) ErrorName() string {
	return "DescribeCoinsByFieldsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinsByFieldsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinsByFieldsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinsByFieldsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinsByFieldsRequestValidationError{}

// Validate checks the field values on DescribeCoinsByFieldsReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCoinsByFieldsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCoinsByFieldsReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeCoinsByFieldsReplyMultiError, or nil if none found.
func (m *DescribeCoinsByFieldsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinsByFieldsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCoins() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribeCoinsByFieldsReplyValidationError{
						field:  fmt.Sprintf("Coins[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribeCoinsByFieldsReplyValidationError{
						field:  fmt.Sprintf("Coins[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribeCoinsByFieldsReplyValidationError{
					field:  fmt.Sprintf("Coins[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DescribeCoinsByFieldsReplyMultiError(errors)
	}

	return nil
}

// DescribeCoinsByFieldsReplyMultiError is an error wrapping multiple
// validation errors returned by DescribeCoinsByFieldsReply.ValidateAll() if
// the designated constraints aren't met.
type DescribeCoinsByFieldsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinsByFieldsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinsByFieldsReplyMultiError) AllErrors() []error { return m }

// DescribeCoinsByFieldsReplyValidationError is the validation error returned
// by DescribeCoinsByFieldsReply.Validate if the designated constraints aren't met.
type DescribeCoinsByFieldsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinsByFieldsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinsByFieldsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinsByFieldsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinsByFieldsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinsByFieldsReplyValidationError) ErrorName() string {
	return "DescribeCoinsByFieldsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinsByFieldsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinsByFieldsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinsByFieldsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinsByFieldsReplyValidationError{}

// Validate checks the field values on DescribeTokensByFieldsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeTokensByFieldsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeTokensByFieldsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DescribeTokensByFieldsRequestMultiError, or nil if none found.
func (m *DescribeTokensByFieldsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeTokensByFieldsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if l := len(m.GetAddress()); l < 1 || l > 100 {
		err := DescribeTokensByFieldsRequestValidationError{
			field:  "Address",
			reason: "value must contain between 1 and 100 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetFields()) < 1 {
		err := DescribeTokensByFieldsRequestValidationError{
			field:  "Fields",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DescribeTokensByFieldsRequestMultiError(errors)
	}

	return nil
}

// DescribeTokensByFieldsRequestMultiError is an error wrapping multiple
// validation errors returned by DescribeTokensByFieldsRequest.ValidateAll()
// if the designated constraints aren't met.
type DescribeTokensByFieldsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeTokensByFieldsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeTokensByFieldsRequestMultiError) AllErrors() []error { return m }

// DescribeTokensByFieldsRequestValidationError is the validation error
// returned by DescribeTokensByFieldsRequest.Validate if the designated
// constraints aren't met.
type DescribeTokensByFieldsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeTokensByFieldsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeTokensByFieldsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeTokensByFieldsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeTokensByFieldsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeTokensByFieldsRequestValidationError) ErrorName() string {
	return "DescribeTokensByFieldsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeTokensByFieldsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeTokensByFieldsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeTokensByFieldsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeTokensByFieldsRequestValidationError{}

// Validate checks the field values on DescribeTokensByFieldsReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeTokensByFieldsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeTokensByFieldsReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeTokensByFieldsReplyMultiError, or nil if none found.
func (m *DescribeTokensByFieldsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeTokensByFieldsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTokens() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribeTokensByFieldsReplyValidationError{
						field:  fmt.Sprintf("Tokens[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribeTokensByFieldsReplyValidationError{
						field:  fmt.Sprintf("Tokens[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribeTokensByFieldsReplyValidationError{
					field:  fmt.Sprintf("Tokens[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DescribeTokensByFieldsReplyMultiError(errors)
	}

	return nil
}

// DescribeTokensByFieldsReplyMultiError is an error wrapping multiple
// validation errors returned by DescribeTokensByFieldsReply.ValidateAll() if
// the designated constraints aren't met.
type DescribeTokensByFieldsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeTokensByFieldsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeTokensByFieldsReplyMultiError) AllErrors() []error { return m }

// DescribeTokensByFieldsReplyValidationError is the validation error returned
// by DescribeTokensByFieldsReply.Validate if the designated constraints
// aren't met.
type DescribeTokensByFieldsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeTokensByFieldsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeTokensByFieldsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeTokensByFieldsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeTokensByFieldsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeTokensByFieldsReplyValidationError) ErrorName() string {
	return "DescribeTokensByFieldsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeTokensByFieldsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeTokensByFieldsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeTokensByFieldsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeTokensByFieldsReplyValidationError{}

// Validate checks the field values on DescribePriceByCoinAddressRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DescribePriceByCoinAddressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribePriceByCoinAddressRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DescribePriceByCoinAddressRequestMultiError, or nil if none found.
func (m *DescribePriceByCoinAddressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribePriceByCoinAddressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if len(m.GetCoinIDs()) > 1000 {
		err := DescribePriceByCoinAddressRequestValidationError{
			field:  "CoinIDs",
			reason: "value must contain no more than 1000 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetTokens()) > 1000 {
		err := DescribePriceByCoinAddressRequestValidationError{
			field:  "Tokens",
			reason: "value must contain no more than 1000 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetTokens() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribePriceByCoinAddressRequestValidationError{
						field:  fmt.Sprintf("Tokens[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribePriceByCoinAddressRequestValidationError{
						field:  fmt.Sprintf("Tokens[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribePriceByCoinAddressRequestValidationError{
					field:  fmt.Sprintf("Tokens[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DescribePriceByCoinAddressRequestMultiError(errors)
	}

	return nil
}

// DescribePriceByCoinAddressRequestMultiError is an error wrapping multiple
// validation errors returned by
// DescribePriceByCoinAddressRequest.ValidateAll() if the designated
// constraints aren't met.
type DescribePriceByCoinAddressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribePriceByCoinAddressRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribePriceByCoinAddressRequestMultiError) AllErrors() []error { return m }

// DescribePriceByCoinAddressRequestValidationError is the validation error
// returned by DescribePriceByCoinAddressRequest.Validate if the designated
// constraints aren't met.
type DescribePriceByCoinAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribePriceByCoinAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribePriceByCoinAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribePriceByCoinAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribePriceByCoinAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribePriceByCoinAddressRequestValidationError) ErrorName() string {
	return "DescribePriceByCoinAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribePriceByCoinAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribePriceByCoinAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribePriceByCoinAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribePriceByCoinAddressRequestValidationError{}

// Validate checks the field values on DescribePriceByCoinAddressReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribePriceByCoinAddressReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribePriceByCoinAddressReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DescribePriceByCoinAddressReplyMultiError, or nil if none found.
func (m *DescribePriceByCoinAddressReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribePriceByCoinAddressReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCoins() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribePriceByCoinAddressReplyValidationError{
						field:  fmt.Sprintf("Coins[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribePriceByCoinAddressReplyValidationError{
						field:  fmt.Sprintf("Coins[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribePriceByCoinAddressReplyValidationError{
					field:  fmt.Sprintf("Coins[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetTokens() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribePriceByCoinAddressReplyValidationError{
						field:  fmt.Sprintf("Tokens[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribePriceByCoinAddressReplyValidationError{
						field:  fmt.Sprintf("Tokens[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribePriceByCoinAddressReplyValidationError{
					field:  fmt.Sprintf("Tokens[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DescribePriceByCoinAddressReplyMultiError(errors)
	}

	return nil
}

// DescribePriceByCoinAddressReplyMultiError is an error wrapping multiple
// validation errors returned by DescribePriceByCoinAddressReply.ValidateAll()
// if the designated constraints aren't met.
type DescribePriceByCoinAddressReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribePriceByCoinAddressReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribePriceByCoinAddressReplyMultiError) AllErrors() []error { return m }

// DescribePriceByCoinAddressReplyValidationError is the validation error
// returned by DescribePriceByCoinAddressReply.Validate if the designated
// constraints aren't met.
type DescribePriceByCoinAddressReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribePriceByCoinAddressReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribePriceByCoinAddressReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribePriceByCoinAddressReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribePriceByCoinAddressReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribePriceByCoinAddressReplyValidationError) ErrorName() string {
	return "DescribePriceByCoinAddressReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribePriceByCoinAddressReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribePriceByCoinAddressReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribePriceByCoinAddressReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribePriceByCoinAddressReplyValidationError{}

// Validate checks the field values on DescribeCoinIDByTokensRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCoinIDByTokensRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCoinIDByTokensRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DescribeCoinIDByTokensRequestMultiError, or nil if none found.
func (m *DescribeCoinIDByTokensRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinIDByTokensRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if l := len(m.GetTokens()); l < 1 || l > 1000 {
		err := DescribeCoinIDByTokensRequestValidationError{
			field:  "Tokens",
			reason: "value must contain between 1 and 1000 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetTokens() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribeCoinIDByTokensRequestValidationError{
						field:  fmt.Sprintf("Tokens[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribeCoinIDByTokensRequestValidationError{
						field:  fmt.Sprintf("Tokens[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribeCoinIDByTokensRequestValidationError{
					field:  fmt.Sprintf("Tokens[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DescribeCoinIDByTokensRequestMultiError(errors)
	}

	return nil
}

// DescribeCoinIDByTokensRequestMultiError is an error wrapping multiple
// validation errors returned by DescribeCoinIDByTokensRequest.ValidateAll()
// if the designated constraints aren't met.
type DescribeCoinIDByTokensRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinIDByTokensRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinIDByTokensRequestMultiError) AllErrors() []error { return m }

// DescribeCoinIDByTokensRequestValidationError is the validation error
// returned by DescribeCoinIDByTokensRequest.Validate if the designated
// constraints aren't met.
type DescribeCoinIDByTokensRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinIDByTokensRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinIDByTokensRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinIDByTokensRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinIDByTokensRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinIDByTokensRequestValidationError) ErrorName() string {
	return "DescribeCoinIDByTokensRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinIDByTokensRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinIDByTokensRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinIDByTokensRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinIDByTokensRequestValidationError{}

// Validate checks the field values on DescribeCoinIDByTokensReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCoinIDByTokensReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCoinIDByTokensReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeCoinIDByTokensReplyMultiError, or nil if none found.
func (m *DescribeCoinIDByTokensReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinIDByTokensReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCoins() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribeCoinIDByTokensReplyValidationError{
						field:  fmt.Sprintf("Coins[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribeCoinIDByTokensReplyValidationError{
						field:  fmt.Sprintf("Coins[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribeCoinIDByTokensReplyValidationError{
					field:  fmt.Sprintf("Coins[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DescribeCoinIDByTokensReplyMultiError(errors)
	}

	return nil
}

// DescribeCoinIDByTokensReplyMultiError is an error wrapping multiple
// validation errors returned by DescribeCoinIDByTokensReply.ValidateAll() if
// the designated constraints aren't met.
type DescribeCoinIDByTokensReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinIDByTokensReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinIDByTokensReplyMultiError) AllErrors() []error { return m }

// DescribeCoinIDByTokensReplyValidationError is the validation error returned
// by DescribeCoinIDByTokensReply.Validate if the designated constraints
// aren't met.
type DescribeCoinIDByTokensReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinIDByTokensReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinIDByTokensReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinIDByTokensReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinIDByTokensReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinIDByTokensReplyValidationError) ErrorName() string {
	return "DescribeCoinIDByTokensReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinIDByTokensReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinIDByTokensReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinIDByTokensReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinIDByTokensReplyValidationError{}

// Validate checks the field values on Currency with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Currency) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Currency with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CurrencyMultiError, or nil
// if none found.
func (m *Currency) ValidateAll() error {
	return m.validate(true)
}

func (m *Currency) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Cny

	// no validation rules for Usd

	if len(errors) > 0 {
		return CurrencyMultiError(errors)
	}

	return nil
}

// CurrencyMultiError is an error wrapping multiple validation errors returned
// by Currency.ValidateAll() if the designated constraints aren't met.
type CurrencyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CurrencyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CurrencyMultiError) AllErrors() []error { return m }

// CurrencyValidationError is the validation error returned by
// Currency.Validate if the designated constraints aren't met.
type CurrencyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CurrencyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CurrencyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CurrencyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CurrencyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CurrencyValidationError) ErrorName() string { return "CurrencyValidationError" }

// Error satisfies the builtin error interface
func (e CurrencyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCurrency.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CurrencyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CurrencyValidationError{}

// Validate checks the field values on Tokens with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Tokens) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Tokens with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TokensMultiError, or nil if none found.
func (m *Tokens) ValidateAll() error {
	return m.validate(true)
}

func (m *Tokens) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetChain()) < 1 {
		err := TokensValidationError{
			field:  "Chain",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAddress()) < 1 {
		err := TokensValidationError{
			field:  "Address",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TokensMultiError(errors)
	}

	return nil
}

// TokensMultiError is an error wrapping multiple validation errors returned by
// Tokens.ValidateAll() if the designated constraints aren't met.
type TokensMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TokensMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TokensMultiError) AllErrors() []error { return m }

// TokensValidationError is the validation error returned by Tokens.Validate if
// the designated constraints aren't met.
type TokensValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokensValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokensValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokensValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokensValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokensValidationError) ErrorName() string { return "TokensValidationError" }

// Error satisfies the builtin error interface
func (e TokensValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTokens.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokensValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokensValidationError{}

// Validate checks the field values on CreateCoinGuideRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCoinGuideRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCoinGuideRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCoinGuideRequestMultiError, or nil if none found.
func (m *CreateCoinGuideRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCoinGuideRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if utf8.RuneCountInString(m.GetCoinID()) < 1 {
		err := CreateCoinGuideRequestValidationError{
			field:  "CoinID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetWeight() < 0 {
		err := CreateCoinGuideRequestValidationError{
			field:  "Weight",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateCoinGuideRequestMultiError(errors)
	}

	return nil
}

// CreateCoinGuideRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCoinGuideRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCoinGuideRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCoinGuideRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCoinGuideRequestMultiError) AllErrors() []error { return m }

// CreateCoinGuideRequestValidationError is the validation error returned by
// CreateCoinGuideRequest.Validate if the designated constraints aren't met.
type CreateCoinGuideRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCoinGuideRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCoinGuideRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCoinGuideRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCoinGuideRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCoinGuideRequestValidationError) ErrorName() string {
	return "CreateCoinGuideRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCoinGuideRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCoinGuideRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCoinGuideRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCoinGuideRequestValidationError{}

// Validate checks the field values on CreateCoinGuideReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCoinGuideReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCoinGuideReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCoinGuideReplyMultiError, or nil if none found.
func (m *CreateCoinGuideReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCoinGuideReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateCoinGuideReplyMultiError(errors)
	}

	return nil
}

// CreateCoinGuideReplyMultiError is an error wrapping multiple validation
// errors returned by CreateCoinGuideReply.ValidateAll() if the designated
// constraints aren't met.
type CreateCoinGuideReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCoinGuideReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCoinGuideReplyMultiError) AllErrors() []error { return m }

// CreateCoinGuideReplyValidationError is the validation error returned by
// CreateCoinGuideReply.Validate if the designated constraints aren't met.
type CreateCoinGuideReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCoinGuideReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCoinGuideReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCoinGuideReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCoinGuideReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCoinGuideReplyValidationError) ErrorName() string {
	return "CreateCoinGuideReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCoinGuideReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCoinGuideReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCoinGuideReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCoinGuideReplyValidationError{}

// Validate checks the field values on ModifyCoinGuideRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ModifyCoinGuideRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModifyCoinGuideRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ModifyCoinGuideRequestMultiError, or nil if none found.
func (m *ModifyCoinGuideRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ModifyCoinGuideRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if utf8.RuneCountInString(m.GetCoinID()) < 1 {
		err := ModifyCoinGuideRequestValidationError{
			field:  "CoinID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetWeight() < 0 {
		err := ModifyCoinGuideRequestValidationError{
			field:  "Weight",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ModifyCoinGuideRequestMultiError(errors)
	}

	return nil
}

// ModifyCoinGuideRequestMultiError is an error wrapping multiple validation
// errors returned by ModifyCoinGuideRequest.ValidateAll() if the designated
// constraints aren't met.
type ModifyCoinGuideRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModifyCoinGuideRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModifyCoinGuideRequestMultiError) AllErrors() []error { return m }

// ModifyCoinGuideRequestValidationError is the validation error returned by
// ModifyCoinGuideRequest.Validate if the designated constraints aren't met.
type ModifyCoinGuideRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModifyCoinGuideRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModifyCoinGuideRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModifyCoinGuideRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModifyCoinGuideRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModifyCoinGuideRequestValidationError) ErrorName() string {
	return "ModifyCoinGuideRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ModifyCoinGuideRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModifyCoinGuideRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModifyCoinGuideRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModifyCoinGuideRequestValidationError{}

// Validate checks the field values on ModifyCoinGuideReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ModifyCoinGuideReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModifyCoinGuideReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ModifyCoinGuideReplyMultiError, or nil if none found.
func (m *ModifyCoinGuideReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ModifyCoinGuideReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ModifyCoinGuideReplyMultiError(errors)
	}

	return nil
}

// ModifyCoinGuideReplyMultiError is an error wrapping multiple validation
// errors returned by ModifyCoinGuideReply.ValidateAll() if the designated
// constraints aren't met.
type ModifyCoinGuideReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModifyCoinGuideReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModifyCoinGuideReplyMultiError) AllErrors() []error { return m }

// ModifyCoinGuideReplyValidationError is the validation error returned by
// ModifyCoinGuideReply.Validate if the designated constraints aren't met.
type ModifyCoinGuideReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModifyCoinGuideReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModifyCoinGuideReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModifyCoinGuideReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModifyCoinGuideReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModifyCoinGuideReplyValidationError) ErrorName() string {
	return "ModifyCoinGuideReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ModifyCoinGuideReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModifyCoinGuideReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModifyCoinGuideReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModifyCoinGuideReplyValidationError{}

// Validate checks the field values on DeleteCoinGuideRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCoinGuideRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCoinGuideRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCoinGuideRequestMultiError, or nil if none found.
func (m *DeleteCoinGuideRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCoinGuideRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if utf8.RuneCountInString(m.GetCoinID()) < 1 {
		err := DeleteCoinGuideRequestValidationError{
			field:  "CoinID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteCoinGuideRequestMultiError(errors)
	}

	return nil
}

// DeleteCoinGuideRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCoinGuideRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteCoinGuideRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCoinGuideRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCoinGuideRequestMultiError) AllErrors() []error { return m }

// DeleteCoinGuideRequestValidationError is the validation error returned by
// DeleteCoinGuideRequest.Validate if the designated constraints aren't met.
type DeleteCoinGuideRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCoinGuideRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCoinGuideRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCoinGuideRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCoinGuideRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCoinGuideRequestValidationError) ErrorName() string {
	return "DeleteCoinGuideRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCoinGuideRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCoinGuideRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCoinGuideRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCoinGuideRequestValidationError{}

// Validate checks the field values on DeleteCoinGuideReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCoinGuideReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCoinGuideReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCoinGuideReplyMultiError, or nil if none found.
func (m *DeleteCoinGuideReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCoinGuideReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteCoinGuideReplyMultiError(errors)
	}

	return nil
}

// DeleteCoinGuideReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteCoinGuideReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteCoinGuideReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCoinGuideReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCoinGuideReplyMultiError) AllErrors() []error { return m }

// DeleteCoinGuideReplyValidationError is the validation error returned by
// DeleteCoinGuideReply.Validate if the designated constraints aren't met.
type DeleteCoinGuideReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCoinGuideReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCoinGuideReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCoinGuideReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCoinGuideReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCoinGuideReplyValidationError) ErrorName() string {
	return "DeleteCoinGuideReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCoinGuideReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCoinGuideReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCoinGuideReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCoinGuideReplyValidationError{}

// Validate checks the field values on DescribeWhiteTokensRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeWhiteTokensRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeWhiteTokensRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeWhiteTokensRequestMultiError, or nil if none found.
func (m *DescribeWhiteTokensRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeWhiteTokensRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if utf8.RuneCountInString(m.GetChain()) < 1 {
		err := DescribeWhiteTokensRequestValidationError{
			field:  "Chain",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetLimit() < 0 {
		err := DescribeWhiteTokensRequestValidationError{
			field:  "Limit",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCurrency()) < 1 {
		err := DescribeWhiteTokensRequestValidationError{
			field:  "Currency",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DescribeWhiteTokensRequestMultiError(errors)
	}

	return nil
}

// DescribeWhiteTokensRequestMultiError is an error wrapping multiple
// validation errors returned by DescribeWhiteTokensRequest.ValidateAll() if
// the designated constraints aren't met.
type DescribeWhiteTokensRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeWhiteTokensRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeWhiteTokensRequestMultiError) AllErrors() []error { return m }

// DescribeWhiteTokensRequestValidationError is the validation error returned
// by DescribeWhiteTokensRequest.Validate if the designated constraints aren't met.
type DescribeWhiteTokensRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeWhiteTokensRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeWhiteTokensRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeWhiteTokensRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeWhiteTokensRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeWhiteTokensRequestValidationError) ErrorName() string {
	return "DescribeWhiteTokensRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeWhiteTokensRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeWhiteTokensRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeWhiteTokensRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeWhiteTokensRequestValidationError{}

// Validate checks the field values on DescribeWhiteTokensReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeWhiteTokensReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeWhiteTokensReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeWhiteTokensReplyMultiError, or nil if none found.
func (m *DescribeWhiteTokensReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeWhiteTokensReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCoins() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribeWhiteTokensReplyValidationError{
						field:  fmt.Sprintf("Coins[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribeWhiteTokensReplyValidationError{
						field:  fmt.Sprintf("Coins[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribeWhiteTokensReplyValidationError{
					field:  fmt.Sprintf("Coins[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DescribeWhiteTokensReplyMultiError(errors)
	}

	return nil
}

// DescribeWhiteTokensReplyMultiError is an error wrapping multiple validation
// errors returned by DescribeWhiteTokensReply.ValidateAll() if the designated
// constraints aren't met.
type DescribeWhiteTokensReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeWhiteTokensReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeWhiteTokensReplyMultiError) AllErrors() []error { return m }

// DescribeWhiteTokensReplyValidationError is the validation error returned by
// DescribeWhiteTokensReply.Validate if the designated constraints aren't met.
type DescribeWhiteTokensReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeWhiteTokensReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeWhiteTokensReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeWhiteTokensReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeWhiteTokensReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeWhiteTokensReplyValidationError) ErrorName() string {
	return "DescribeWhiteTokensReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeWhiteTokensReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeWhiteTokensReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeWhiteTokensReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeWhiteTokensReplyValidationError{}

// Validate checks the field values on CreateChainRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateChainRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateChainRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateChainRequestMultiError, or nil if none found.
func (m *CreateChainRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateChainRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if utf8.RuneCountInString(m.GetChain()) < 1 {
		err := CreateChainRequestValidationError{
			field:  "Chain",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateChainRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetWeight() < 0 {
		err := CreateChainRequestValidationError{
			field:  "Weight",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Icon

	if len(errors) > 0 {
		return CreateChainRequestMultiError(errors)
	}

	return nil
}

// CreateChainRequestMultiError is an error wrapping multiple validation errors
// returned by CreateChainRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateChainRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateChainRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateChainRequestMultiError) AllErrors() []error { return m }

// CreateChainRequestValidationError is the validation error returned by
// CreateChainRequest.Validate if the designated constraints aren't met.
type CreateChainRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateChainRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateChainRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateChainRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateChainRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateChainRequestValidationError) ErrorName() string {
	return "CreateChainRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateChainRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateChainRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateChainRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateChainRequestValidationError{}

// Validate checks the field values on CreateChainReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateChainReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateChainReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateChainReplyMultiError, or nil if none found.
func (m *CreateChainReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateChainReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateChainReplyMultiError(errors)
	}

	return nil
}

// CreateChainReplyMultiError is an error wrapping multiple validation errors
// returned by CreateChainReply.ValidateAll() if the designated constraints
// aren't met.
type CreateChainReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateChainReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateChainReplyMultiError) AllErrors() []error { return m }

// CreateChainReplyValidationError is the validation error returned by
// CreateChainReply.Validate if the designated constraints aren't met.
type CreateChainReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateChainReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateChainReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateChainReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateChainReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateChainReplyValidationError) ErrorName() string { return "CreateChainReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateChainReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateChainReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateChainReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateChainReplyValidationError{}

// Validate checks the field values on ModifyChainRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ModifyChainRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModifyChainRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ModifyChainRequestMultiError, or nil if none found.
func (m *ModifyChainRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ModifyChainRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if m.GetId() <= 0 {
		err := ModifyChainRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := ModifyChainRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetWeight() < 0 {
		err := ModifyChainRequestValidationError{
			field:  "Weight",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Icon

	if len(errors) > 0 {
		return ModifyChainRequestMultiError(errors)
	}

	return nil
}

// ModifyChainRequestMultiError is an error wrapping multiple validation errors
// returned by ModifyChainRequest.ValidateAll() if the designated constraints
// aren't met.
type ModifyChainRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModifyChainRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModifyChainRequestMultiError) AllErrors() []error { return m }

// ModifyChainRequestValidationError is the validation error returned by
// ModifyChainRequest.Validate if the designated constraints aren't met.
type ModifyChainRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModifyChainRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModifyChainRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModifyChainRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModifyChainRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModifyChainRequestValidationError) ErrorName() string {
	return "ModifyChainRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ModifyChainRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModifyChainRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModifyChainRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModifyChainRequestValidationError{}

// Validate checks the field values on DeleteChainRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteChainRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteChainRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteChainRequestMultiError, or nil if none found.
func (m *DeleteChainRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteChainRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteChainRequestMultiError(errors)
	}

	return nil
}

// DeleteChainRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteChainRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteChainRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteChainRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteChainRequestMultiError) AllErrors() []error { return m }

// DeleteChainRequestValidationError is the validation error returned by
// DeleteChainRequest.Validate if the designated constraints aren't met.
type DeleteChainRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteChainRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteChainRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteChainRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteChainRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteChainRequestValidationError) ErrorName() string {
	return "DeleteChainRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteChainRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteChainRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteChainRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteChainRequestValidationError{}

// Validate checks the field values on CreateChainRelationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateChainRelationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateChainRelationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateChainRelationRequestMultiError, or nil if none found.
func (m *CreateChainRelationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateChainRelationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if utf8.RuneCountInString(m.GetChain()) < 1 {
		err := CreateChainRelationRequestValidationError{
			field:  "Chain",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTrdChain()) < 1 {
		err := CreateChainRelationRequestValidationError{
			field:  "TrdChain",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _CreateChainRelationRequest_TrdType_InLookup[m.GetTrdType()]; !ok {
		err := CreateChainRelationRequestValidationError{
			field:  "TrdType",
			reason: "value must be in list [1 2 3]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateChainRelationRequestMultiError(errors)
	}

	return nil
}

// CreateChainRelationRequestMultiError is an error wrapping multiple
// validation errors returned by CreateChainRelationRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateChainRelationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateChainRelationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateChainRelationRequestMultiError) AllErrors() []error { return m }

// CreateChainRelationRequestValidationError is the validation error returned
// by CreateChainRelationRequest.Validate if the designated constraints aren't met.
type CreateChainRelationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateChainRelationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateChainRelationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateChainRelationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateChainRelationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateChainRelationRequestValidationError) ErrorName() string {
	return "CreateChainRelationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateChainRelationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateChainRelationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateChainRelationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateChainRelationRequestValidationError{}

var _CreateChainRelationRequest_TrdType_InLookup = map[int32]struct{}{
	1: {},
	2: {},
	3: {},
}

// Validate checks the field values on DeleteChainRelationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteChainRelationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteChainRelationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteChainRelationRequestMultiError, or nil if none found.
func (m *DeleteChainRelationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteChainRelationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if m.GetId() <= 0 {
		err := DeleteChainRelationRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteChainRelationRequestMultiError(errors)
	}

	return nil
}

// DeleteChainRelationRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteChainRelationRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteChainRelationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteChainRelationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteChainRelationRequestMultiError) AllErrors() []error { return m }

// DeleteChainRelationRequestValidationError is the validation error returned
// by DeleteChainRelationRequest.Validate if the designated constraints aren't met.
type DeleteChainRelationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteChainRelationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteChainRelationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteChainRelationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteChainRelationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteChainRelationRequestValidationError) ErrorName() string {
	return "DeleteChainRelationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteChainRelationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteChainRelationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteChainRelationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteChainRelationRequestValidationError{}

// Validate checks the field values on DescribeCollectionGuidesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCollectionGuidesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCollectionGuidesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DescribeCollectionGuidesRequestMultiError, or nil if none found.
func (m *DescribeCollectionGuidesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCollectionGuidesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if val := m.GetPageSize(); val <= 0 || val > 50 {
		err := DescribeCollectionGuidesRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DescribeCollectionGuidesRequestMultiError(errors)
	}

	return nil
}

// DescribeCollectionGuidesRequestMultiError is an error wrapping multiple
// validation errors returned by DescribeCollectionGuidesRequest.ValidateAll()
// if the designated constraints aren't met.
type DescribeCollectionGuidesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCollectionGuidesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCollectionGuidesRequestMultiError) AllErrors() []error { return m }

// DescribeCollectionGuidesRequestValidationError is the validation error
// returned by DescribeCollectionGuidesRequest.Validate if the designated
// constraints aren't met.
type DescribeCollectionGuidesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCollectionGuidesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCollectionGuidesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCollectionGuidesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCollectionGuidesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCollectionGuidesRequestValidationError) ErrorName() string {
	return "DescribeCollectionGuidesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCollectionGuidesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCollectionGuidesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCollectionGuidesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCollectionGuidesRequestValidationError{}

// Validate checks the field values on DescribeCollectionGuidesReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCollectionGuidesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCollectionGuidesReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DescribeCollectionGuidesReplyMultiError, or nil if none found.
func (m *DescribeCollectionGuidesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCollectionGuidesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCoins() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribeCollectionGuidesReplyValidationError{
						field:  fmt.Sprintf("Coins[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribeCollectionGuidesReplyValidationError{
						field:  fmt.Sprintf("Coins[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribeCollectionGuidesReplyValidationError{
					field:  fmt.Sprintf("Coins[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DescribeCollectionGuidesReplyMultiError(errors)
	}

	return nil
}

// DescribeCollectionGuidesReplyMultiError is an error wrapping multiple
// validation errors returned by DescribeCollectionGuidesReply.ValidateAll()
// if the designated constraints aren't met.
type DescribeCollectionGuidesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCollectionGuidesReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCollectionGuidesReplyMultiError) AllErrors() []error { return m }

// DescribeCollectionGuidesReplyValidationError is the validation error
// returned by DescribeCollectionGuidesReply.Validate if the designated
// constraints aren't met.
type DescribeCollectionGuidesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCollectionGuidesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCollectionGuidesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCollectionGuidesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCollectionGuidesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCollectionGuidesReplyValidationError) ErrorName() string {
	return "DescribeCollectionGuidesReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCollectionGuidesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCollectionGuidesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCollectionGuidesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCollectionGuidesReplyValidationError{}

// Validate checks the field values on CheckCoinsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CheckCoinsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckCoinsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckCoinsRequestMultiError, or nil if none found.
func (m *CheckCoinsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckCoinsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if l := len(m.GetCoinIDs()); l < 1 || l > 100 {
		err := CheckCoinsRequestValidationError{
			field:  "CoinIDs",
			reason: "value must contain between 1 and 100 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CheckCoinsRequestMultiError(errors)
	}

	return nil
}

// CheckCoinsRequestMultiError is an error wrapping multiple validation errors
// returned by CheckCoinsRequest.ValidateAll() if the designated constraints
// aren't met.
type CheckCoinsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckCoinsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckCoinsRequestMultiError) AllErrors() []error { return m }

// CheckCoinsRequestValidationError is the validation error returned by
// CheckCoinsRequest.Validate if the designated constraints aren't met.
type CheckCoinsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckCoinsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckCoinsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckCoinsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckCoinsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckCoinsRequestValidationError) ErrorName() string {
	return "CheckCoinsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckCoinsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckCoinsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckCoinsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckCoinsRequestValidationError{}

// Validate checks the field values on CheckCoinsReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CheckCoinsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckCoinsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckCoinsReplyMultiError, or nil if none found.
func (m *CheckCoinsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckCoinsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCoins() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CheckCoinsReplyValidationError{
						field:  fmt.Sprintf("Coins[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CheckCoinsReplyValidationError{
						field:  fmt.Sprintf("Coins[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CheckCoinsReplyValidationError{
					field:  fmt.Sprintf("Coins[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CheckCoinsReplyMultiError(errors)
	}

	return nil
}

// CheckCoinsReplyMultiError is an error wrapping multiple validation errors
// returned by CheckCoinsReply.ValidateAll() if the designated constraints
// aren't met.
type CheckCoinsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckCoinsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckCoinsReplyMultiError) AllErrors() []error { return m }

// CheckCoinsReplyValidationError is the validation error returned by
// CheckCoinsReply.Validate if the designated constraints aren't met.
type CheckCoinsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckCoinsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckCoinsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckCoinsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckCoinsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckCoinsReplyValidationError) ErrorName() string { return "CheckCoinsReplyValidationError" }

// Error satisfies the builtin error interface
func (e CheckCoinsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckCoinsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckCoinsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckCoinsReplyValidationError{}

// Validate checks the field values on CoinSimple with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CoinSimple) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CoinSimple with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CoinSimpleMultiError, or
// nil if none found.
func (m *CoinSimple) ValidateAll() error {
	return m.validate(true)
}

func (m *CoinSimple) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CoinID

	// no validation rules for Name

	// no validation rules for Symbol

	// no validation rules for Image

	if len(errors) > 0 {
		return CoinSimpleMultiError(errors)
	}

	return nil
}

// CoinSimpleMultiError is an error wrapping multiple validation errors
// returned by CoinSimple.ValidateAll() if the designated constraints aren't met.
type CoinSimpleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CoinSimpleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CoinSimpleMultiError) AllErrors() []error { return m }

// CoinSimpleValidationError is the validation error returned by
// CoinSimple.Validate if the designated constraints aren't met.
type CoinSimpleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CoinSimpleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CoinSimpleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CoinSimpleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CoinSimpleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CoinSimpleValidationError) ErrorName() string { return "CoinSimpleValidationError" }

// Error satisfies the builtin error interface
func (e CoinSimpleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCoinSimple.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CoinSimpleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CoinSimpleValidationError{}

// Validate checks the field values on PairSimple with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PairSimple) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PairSimple with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PairSimpleMultiError, or
// nil if none found.
func (m *PairSimple) ValidateAll() error {
	return m.validate(true)
}

func (m *PairSimple) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Chain

	// no validation rules for Address

	// no validation rules for DexID

	// no validation rules for DexIcon

	// no validation rules for BaseToken

	// no validation rules for QuoteToken

	if len(errors) > 0 {
		return PairSimpleMultiError(errors)
	}

	return nil
}

// PairSimpleMultiError is an error wrapping multiple validation errors
// returned by PairSimple.ValidateAll() if the designated constraints aren't met.
type PairSimpleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PairSimpleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PairSimpleMultiError) AllErrors() []error { return m }

// PairSimpleValidationError is the validation error returned by
// PairSimple.Validate if the designated constraints aren't met.
type PairSimpleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PairSimpleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PairSimpleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PairSimpleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PairSimpleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PairSimpleValidationError) ErrorName() string { return "PairSimpleValidationError" }

// Error satisfies the builtin error interface
func (e PairSimpleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPairSimple.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PairSimpleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PairSimpleValidationError{}

// Validate checks the field values on NoneReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NoneReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NoneReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NoneReplyMultiError, or nil
// if none found.
func (m *NoneReply) ValidateAll() error {
	return m.validate(true)
}

func (m *NoneReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return NoneReplyMultiError(errors)
	}

	return nil
}

// NoneReplyMultiError is an error wrapping multiple validation errors returned
// by NoneReply.ValidateAll() if the designated constraints aren't met.
type NoneReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NoneReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NoneReplyMultiError) AllErrors() []error { return m }

// NoneReplyValidationError is the validation error returned by
// NoneReply.Validate if the designated constraints aren't met.
type NoneReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NoneReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NoneReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NoneReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NoneReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NoneReplyValidationError) ErrorName() string { return "NoneReplyValidationError" }

// Error satisfies the builtin error interface
func (e NoneReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNoneReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NoneReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NoneReplyValidationError{}

// Validate checks the field values on DescribePairsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribePairsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribePairsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribePairsRequestMultiError, or nil if none found.
func (m *DescribePairsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribePairsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	// no validation rules for Chain

	// no validation rules for Address

	if _, ok := _DescribePairsRequest_Currency_InLookup[m.GetCurrency()]; !ok {
		err := DescribePairsRequestValidationError{
			field:  "Currency",
			reason: "value must be in list [usd cny]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for DexID

	// no validation rules for UserID

	if m.GetPage() <= 0 {
		err := DescribePairsRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val > 100 {
		err := DescribePairsRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _DescribePairsRequest_SortField_InLookup[m.GetSortField()]; !ok {
		err := DescribePairsRequestValidationError{
			field:  "SortField",
			reason: "value must be in list [ price_delta.5m price_delta.1h price_delta.6h price_delta.24h volume_24h orders_24h fdv liquidity price]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _DescribePairsRequest_SortType_InLookup[m.GetSortType()]; !ok {
		err := DescribePairsRequestValidationError{
			field:  "SortType",
			reason: "value must be in list [ asc desc]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DescribePairsRequestMultiError(errors)
	}

	return nil
}

// DescribePairsRequestMultiError is an error wrapping multiple validation
// errors returned by DescribePairsRequest.ValidateAll() if the designated
// constraints aren't met.
type DescribePairsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribePairsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribePairsRequestMultiError) AllErrors() []error { return m }

// DescribePairsRequestValidationError is the validation error returned by
// DescribePairsRequest.Validate if the designated constraints aren't met.
type DescribePairsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribePairsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribePairsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribePairsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribePairsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribePairsRequestValidationError) ErrorName() string {
	return "DescribePairsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribePairsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribePairsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribePairsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribePairsRequestValidationError{}

var _DescribePairsRequest_Currency_InLookup = map[string]struct{}{
	"usd": {},
	"cny": {},
}

var _DescribePairsRequest_SortField_InLookup = map[string]struct{}{
	"":                {},
	"price_delta.5m":  {},
	"price_delta.1h":  {},
	"price_delta.6h":  {},
	"price_delta.24h": {},
	"volume_24h":      {},
	"orders_24h":      {},
	"fdv":             {},
	"liquidity":       {},
	"price":           {},
}

var _DescribePairsRequest_SortType_InLookup = map[string]struct{}{
	"":     {},
	"asc":  {},
	"desc": {},
}

// Validate checks the field values on DescribePairsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribePairsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribePairsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribePairsReplyMultiError, or nil if none found.
func (m *DescribePairsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribePairsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPairs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribePairsReplyValidationError{
						field:  fmt.Sprintf("Pairs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribePairsReplyValidationError{
						field:  fmt.Sprintf("Pairs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribePairsReplyValidationError{
					field:  fmt.Sprintf("Pairs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return DescribePairsReplyMultiError(errors)
	}

	return nil
}

// DescribePairsReplyMultiError is an error wrapping multiple validation errors
// returned by DescribePairsReply.ValidateAll() if the designated constraints
// aren't met.
type DescribePairsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribePairsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribePairsReplyMultiError) AllErrors() []error { return m }

// DescribePairsReplyValidationError is the validation error returned by
// DescribePairsReply.Validate if the designated constraints aren't met.
type DescribePairsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribePairsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribePairsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribePairsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribePairsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribePairsReplyValidationError) ErrorName() string {
	return "DescribePairsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribePairsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribePairsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribePairsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribePairsReplyValidationError{}

// Validate checks the field values on Pair with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Pair) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Pair with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PairMultiError, or nil if none found.
func (m *Pair) ValidateAll() error {
	return m.validate(true)
}

func (m *Pair) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Address

	// no validation rules for Chain

	// no validation rules for DexID

	// no validation rules for DexIcon

	// no validation rules for BaseToken

	// no validation rules for QuoteToken

	// no validation rules for Stat5M

	// no validation rules for Stat1H

	// no validation rules for Stat6H

	// no validation rules for Stat24H

	// no validation rules for Fdv

	// no validation rules for Liquidity

	// no validation rules for Price

	// no validation rules for IsFocus

	if len(errors) > 0 {
		return PairMultiError(errors)
	}

	return nil
}

// PairMultiError is an error wrapping multiple validation errors returned by
// Pair.ValidateAll() if the designated constraints aren't met.
type PairMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PairMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PairMultiError) AllErrors() []error { return m }

// PairValidationError is the validation error returned by Pair.Validate if the
// designated constraints aren't met.
type PairValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PairValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PairValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PairValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PairValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PairValidationError) ErrorName() string { return "PairValidationError" }

// Error satisfies the builtin error interface
func (e PairValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPair.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PairValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PairValidationError{}

// Validate checks the field values on DescribePairRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribePairRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribePairRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribePairRequestMultiError, or nil if none found.
func (m *DescribePairRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribePairRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if utf8.RuneCountInString(m.GetChain()) < 1 {
		err := DescribePairRequestValidationError{
			field:  "Chain",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAddress()) < 1 {
		err := DescribePairRequestValidationError{
			field:  "Address",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _DescribePairRequest_Currency_InLookup[m.GetCurrency()]; !ok {
		err := DescribePairRequestValidationError{
			field:  "Currency",
			reason: "value must be in list [usd cny]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for UserID

	if len(errors) > 0 {
		return DescribePairRequestMultiError(errors)
	}

	return nil
}

// DescribePairRequestMultiError is an error wrapping multiple validation
// errors returned by DescribePairRequest.ValidateAll() if the designated
// constraints aren't met.
type DescribePairRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribePairRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribePairRequestMultiError) AllErrors() []error { return m }

// DescribePairRequestValidationError is the validation error returned by
// DescribePairRequest.Validate if the designated constraints aren't met.
type DescribePairRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribePairRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribePairRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribePairRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribePairRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribePairRequestValidationError) ErrorName() string {
	return "DescribePairRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribePairRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribePairRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribePairRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribePairRequestValidationError{}

var _DescribePairRequest_Currency_InLookup = map[string]struct{}{
	"usd": {},
	"cny": {},
}

// Validate checks the field values on DescribePairReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DescribePairReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribePairReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribePairReplyMultiError, or nil if none found.
func (m *DescribePairReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribePairReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPair()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DescribePairReplyValidationError{
					field:  "Pair",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DescribePairReplyValidationError{
					field:  "Pair",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPair()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribePairReplyValidationError{
				field:  "Pair",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DescribePairReplyMultiError(errors)
	}

	return nil
}

// DescribePairReplyMultiError is an error wrapping multiple validation errors
// returned by DescribePairReply.ValidateAll() if the designated constraints
// aren't met.
type DescribePairReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribePairReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribePairReplyMultiError) AllErrors() []error { return m }

// DescribePairReplyValidationError is the validation error returned by
// DescribePairReply.Validate if the designated constraints aren't met.
type DescribePairReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribePairReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribePairReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribePairReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribePairReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribePairReplyValidationError) ErrorName() string {
	return "DescribePairReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribePairReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribePairReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribePairReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribePairReplyValidationError{}

// Validate checks the field values on DescribePairTrendsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribePairTrendsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribePairTrendsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribePairTrendsRequestMultiError, or nil if none found.
func (m *DescribePairTrendsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribePairTrendsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if val := m.GetLimit(); val < 0 || val > 100 {
		err := DescribePairTrendsRequestValidationError{
			field:  "Limit",
			reason: "value must be inside range [0, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _DescribePairTrendsRequest_Type_InLookup[m.GetType()]; !ok {
		err := DescribePairTrendsRequestValidationError{
			field:  "Type",
			reason: "value must be in list [1 2]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _DescribePairTrendsRequest_Currency_InLookup[m.GetCurrency()]; !ok {
		err := DescribePairTrendsRequestValidationError{
			field:  "Currency",
			reason: "value must be in list [usd cny]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for UserID

	if len(errors) > 0 {
		return DescribePairTrendsRequestMultiError(errors)
	}

	return nil
}

// DescribePairTrendsRequestMultiError is an error wrapping multiple validation
// errors returned by DescribePairTrendsRequest.ValidateAll() if the
// designated constraints aren't met.
type DescribePairTrendsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribePairTrendsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribePairTrendsRequestMultiError) AllErrors() []error { return m }

// DescribePairTrendsRequestValidationError is the validation error returned by
// DescribePairTrendsRequest.Validate if the designated constraints aren't met.
type DescribePairTrendsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribePairTrendsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribePairTrendsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribePairTrendsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribePairTrendsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribePairTrendsRequestValidationError) ErrorName() string {
	return "DescribePairTrendsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribePairTrendsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribePairTrendsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribePairTrendsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribePairTrendsRequestValidationError{}

var _DescribePairTrendsRequest_Type_InLookup = map[int32]struct{}{
	1: {},
	2: {},
}

var _DescribePairTrendsRequest_Currency_InLookup = map[string]struct{}{
	"usd": {},
	"cny": {},
}

// Validate checks the field values on DescribePairTrendsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribePairTrendsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribePairTrendsReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribePairTrendsReplyMultiError, or nil if none found.
func (m *DescribePairTrendsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribePairTrendsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPairs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribePairTrendsReplyValidationError{
						field:  fmt.Sprintf("Pairs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribePairTrendsReplyValidationError{
						field:  fmt.Sprintf("Pairs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribePairTrendsReplyValidationError{
					field:  fmt.Sprintf("Pairs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DescribePairTrendsReplyMultiError(errors)
	}

	return nil
}

// DescribePairTrendsReplyMultiError is an error wrapping multiple validation
// errors returned by DescribePairTrendsReply.ValidateAll() if the designated
// constraints aren't met.
type DescribePairTrendsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribePairTrendsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribePairTrendsReplyMultiError) AllErrors() []error { return m }

// DescribePairTrendsReplyValidationError is the validation error returned by
// DescribePairTrendsReply.Validate if the designated constraints aren't met.
type DescribePairTrendsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribePairTrendsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribePairTrendsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribePairTrendsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribePairTrendsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribePairTrendsReplyValidationError) ErrorName() string {
	return "DescribePairTrendsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribePairTrendsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribePairTrendsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribePairTrendsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribePairTrendsReplyValidationError{}

// Validate checks the field values on DescribePairTrendsV2Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribePairTrendsV2Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribePairTrendsV2Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribePairTrendsV2RequestMultiError, or nil if none found.
func (m *DescribePairTrendsV2Request) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribePairTrendsV2Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if val := m.GetLimit(); val < 0 || val > 100 {
		err := DescribePairTrendsV2RequestValidationError{
			field:  "Limit",
			reason: "value must be inside range [0, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _DescribePairTrendsV2Request_Currency_InLookup[m.GetCurrency()]; !ok {
		err := DescribePairTrendsV2RequestValidationError{
			field:  "Currency",
			reason: "value must be in list [usd cny]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for UserID

	if len(errors) > 0 {
		return DescribePairTrendsV2RequestMultiError(errors)
	}

	return nil
}

// DescribePairTrendsV2RequestMultiError is an error wrapping multiple
// validation errors returned by DescribePairTrendsV2Request.ValidateAll() if
// the designated constraints aren't met.
type DescribePairTrendsV2RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribePairTrendsV2RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribePairTrendsV2RequestMultiError) AllErrors() []error { return m }

// DescribePairTrendsV2RequestValidationError is the validation error returned
// by DescribePairTrendsV2Request.Validate if the designated constraints
// aren't met.
type DescribePairTrendsV2RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribePairTrendsV2RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribePairTrendsV2RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribePairTrendsV2RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribePairTrendsV2RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribePairTrendsV2RequestValidationError) ErrorName() string {
	return "DescribePairTrendsV2RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribePairTrendsV2RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribePairTrendsV2Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribePairTrendsV2RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribePairTrendsV2RequestValidationError{}

var _DescribePairTrendsV2Request_Currency_InLookup = map[string]struct{}{
	"usd": {},
	"cny": {},
}

// Validate checks the field values on DescribePairTrendsV2Reply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribePairTrendsV2Reply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribePairTrendsV2Reply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribePairTrendsV2ReplyMultiError, or nil if none found.
func (m *DescribePairTrendsV2Reply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribePairTrendsV2Reply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPairs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribePairTrendsV2ReplyValidationError{
						field:  fmt.Sprintf("Pairs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribePairTrendsV2ReplyValidationError{
						field:  fmt.Sprintf("Pairs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribePairTrendsV2ReplyValidationError{
					field:  fmt.Sprintf("Pairs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DescribePairTrendsV2ReplyMultiError(errors)
	}

	return nil
}

// DescribePairTrendsV2ReplyMultiError is an error wrapping multiple validation
// errors returned by DescribePairTrendsV2Reply.ValidateAll() if the
// designated constraints aren't met.
type DescribePairTrendsV2ReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribePairTrendsV2ReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribePairTrendsV2ReplyMultiError) AllErrors() []error { return m }

// DescribePairTrendsV2ReplyValidationError is the validation error returned by
// DescribePairTrendsV2Reply.Validate if the designated constraints aren't met.
type DescribePairTrendsV2ReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribePairTrendsV2ReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribePairTrendsV2ReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribePairTrendsV2ReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribePairTrendsV2ReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribePairTrendsV2ReplyValidationError) ErrorName() string {
	return "DescribePairTrendsV2ReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribePairTrendsV2ReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribePairTrendsV2Reply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribePairTrendsV2ReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribePairTrendsV2ReplyValidationError{}

// Validate checks the field values on CreateDexRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateDexRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDexRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDexRequestMultiError, or nil if none found.
func (m *CreateDexRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDexRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if utf8.RuneCountInString(m.GetDexID()) < 1 {
		err := CreateDexRequestValidationError{
			field:  "DexID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateDexRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetWeight() < 0 {
		err := CreateDexRequestValidationError{
			field:  "Weight",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Icon

	if len(errors) > 0 {
		return CreateDexRequestMultiError(errors)
	}

	return nil
}

// CreateDexRequestMultiError is an error wrapping multiple validation errors
// returned by CreateDexRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateDexRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDexRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDexRequestMultiError) AllErrors() []error { return m }

// CreateDexRequestValidationError is the validation error returned by
// CreateDexRequest.Validate if the designated constraints aren't met.
type CreateDexRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDexRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDexRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDexRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDexRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDexRequestValidationError) ErrorName() string { return "CreateDexRequestValidationError" }

// Error satisfies the builtin error interface
func (e CreateDexRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDexRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDexRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDexRequestValidationError{}

// Validate checks the field values on CreateDexReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateDexReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDexReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateDexReplyMultiError,
// or nil if none found.
func (m *CreateDexReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDexReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateDexReplyMultiError(errors)
	}

	return nil
}

// CreateDexReplyMultiError is an error wrapping multiple validation errors
// returned by CreateDexReply.ValidateAll() if the designated constraints
// aren't met.
type CreateDexReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDexReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDexReplyMultiError) AllErrors() []error { return m }

// CreateDexReplyValidationError is the validation error returned by
// CreateDexReply.Validate if the designated constraints aren't met.
type CreateDexReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDexReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDexReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDexReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDexReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDexReplyValidationError) ErrorName() string { return "CreateDexReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateDexReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDexReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDexReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDexReplyValidationError{}

// Validate checks the field values on ModifyDexRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ModifyDexRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModifyDexRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ModifyDexRequestMultiError, or nil if none found.
func (m *ModifyDexRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ModifyDexRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if m.GetId() <= 0 {
		err := ModifyDexRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := ModifyDexRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetWeight() < 0 {
		err := ModifyDexRequestValidationError{
			field:  "Weight",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Icon

	if len(errors) > 0 {
		return ModifyDexRequestMultiError(errors)
	}

	return nil
}

// ModifyDexRequestMultiError is an error wrapping multiple validation errors
// returned by ModifyDexRequest.ValidateAll() if the designated constraints
// aren't met.
type ModifyDexRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModifyDexRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModifyDexRequestMultiError) AllErrors() []error { return m }

// ModifyDexRequestValidationError is the validation error returned by
// ModifyDexRequest.Validate if the designated constraints aren't met.
type ModifyDexRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModifyDexRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModifyDexRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModifyDexRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModifyDexRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModifyDexRequestValidationError) ErrorName() string { return "ModifyDexRequestValidationError" }

// Error satisfies the builtin error interface
func (e ModifyDexRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModifyDexRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModifyDexRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModifyDexRequestValidationError{}

// Validate checks the field values on DeleteDexRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteDexRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDexRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDexRequestMultiError, or nil if none found.
func (m *DeleteDexRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDexRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteDexRequestMultiError(errors)
	}

	return nil
}

// DeleteDexRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteDexRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteDexRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDexRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDexRequestMultiError) AllErrors() []error { return m }

// DeleteDexRequestValidationError is the validation error returned by
// DeleteDexRequest.Validate if the designated constraints aren't met.
type DeleteDexRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDexRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDexRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDexRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDexRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDexRequestValidationError) ErrorName() string { return "DeleteDexRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteDexRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDexRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDexRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDexRequestValidationError{}

// Validate checks the field values on DescribeRateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeRateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeRateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeRateRequestMultiError, or nil if none found.
func (m *DescribeRateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeRateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if _, ok := _DescribeRateRequest_Currency_InLookup[m.GetCurrency()]; !ok {
		err := DescribeRateRequestValidationError{
			field:  "Currency",
			reason: "value must be in list [cny usd]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DescribeRateRequestMultiError(errors)
	}

	return nil
}

// DescribeRateRequestMultiError is an error wrapping multiple validation
// errors returned by DescribeRateRequest.ValidateAll() if the designated
// constraints aren't met.
type DescribeRateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeRateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeRateRequestMultiError) AllErrors() []error { return m }

// DescribeRateRequestValidationError is the validation error returned by
// DescribeRateRequest.Validate if the designated constraints aren't met.
type DescribeRateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeRateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeRateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeRateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeRateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeRateRequestValidationError) ErrorName() string {
	return "DescribeRateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeRateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeRateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeRateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeRateRequestValidationError{}

var _DescribeRateRequest_Currency_InLookup = map[string]struct{}{
	"cny": {},
	"usd": {},
}

// Validate checks the field values on DescribeRateReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DescribeRateReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeRateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeRateReplyMultiError, or nil if none found.
func (m *DescribeRateReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeRateReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Rate

	if len(errors) > 0 {
		return DescribeRateReplyMultiError(errors)
	}

	return nil
}

// DescribeRateReplyMultiError is an error wrapping multiple validation errors
// returned by DescribeRateReply.ValidateAll() if the designated constraints
// aren't met.
type DescribeRateReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeRateReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeRateReplyMultiError) AllErrors() []error { return m }

// DescribeRateReplyValidationError is the validation error returned by
// DescribeRateReply.Validate if the designated constraints aren't met.
type DescribeRateReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeRateReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeRateReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeRateReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeRateReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeRateReplyValidationError) ErrorName() string {
	return "DescribeRateReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeRateReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeRateReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeRateReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeRateReplyValidationError{}

// Validate checks the field values on DescribePairGuidesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribePairGuidesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribePairGuidesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribePairGuidesRequestMultiError, or nil if none found.
func (m *DescribePairGuidesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribePairGuidesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if val := m.GetPageSize(); val <= 0 || val > 50 {
		err := DescribePairGuidesRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DescribePairGuidesRequestMultiError(errors)
	}

	return nil
}

// DescribePairGuidesRequestMultiError is an error wrapping multiple validation
// errors returned by DescribePairGuidesRequest.ValidateAll() if the
// designated constraints aren't met.
type DescribePairGuidesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribePairGuidesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribePairGuidesRequestMultiError) AllErrors() []error { return m }

// DescribePairGuidesRequestValidationError is the validation error returned by
// DescribePairGuidesRequest.Validate if the designated constraints aren't met.
type DescribePairGuidesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribePairGuidesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribePairGuidesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribePairGuidesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribePairGuidesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribePairGuidesRequestValidationError) ErrorName() string {
	return "DescribePairGuidesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribePairGuidesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribePairGuidesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribePairGuidesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribePairGuidesRequestValidationError{}

// Validate checks the field values on DescribePairGuidesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribePairGuidesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribePairGuidesReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribePairGuidesReplyMultiError, or nil if none found.
func (m *DescribePairGuidesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribePairGuidesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPairs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribePairGuidesReplyValidationError{
						field:  fmt.Sprintf("Pairs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribePairGuidesReplyValidationError{
						field:  fmt.Sprintf("Pairs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribePairGuidesReplyValidationError{
					field:  fmt.Sprintf("Pairs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DescribePairGuidesReplyMultiError(errors)
	}

	return nil
}

// DescribePairGuidesReplyMultiError is an error wrapping multiple validation
// errors returned by DescribePairGuidesReply.ValidateAll() if the designated
// constraints aren't met.
type DescribePairGuidesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribePairGuidesReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribePairGuidesReplyMultiError) AllErrors() []error { return m }

// DescribePairGuidesReplyValidationError is the validation error returned by
// DescribePairGuidesReply.Validate if the designated constraints aren't met.
type DescribePairGuidesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribePairGuidesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribePairGuidesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribePairGuidesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribePairGuidesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribePairGuidesReplyValidationError) ErrorName() string {
	return "DescribePairGuidesReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribePairGuidesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribePairGuidesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribePairGuidesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribePairGuidesReplyValidationError{}

// Validate checks the field values on DescribeCoinsByChainRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCoinsByChainRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCoinsByChainRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeCoinsByChainRequestMultiError, or nil if none found.
func (m *DescribeCoinsByChainRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinsByChainRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	// no validation rules for Chain

	if m.GetPage() <= 0 {
		err := DescribeCoinsByChainRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val > 500 {
		err := DescribeCoinsByChainRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 500]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DescribeCoinsByChainRequestMultiError(errors)
	}

	return nil
}

// DescribeCoinsByChainRequestMultiError is an error wrapping multiple
// validation errors returned by DescribeCoinsByChainRequest.ValidateAll() if
// the designated constraints aren't met.
type DescribeCoinsByChainRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinsByChainRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinsByChainRequestMultiError) AllErrors() []error { return m }

// DescribeCoinsByChainRequestValidationError is the validation error returned
// by DescribeCoinsByChainRequest.Validate if the designated constraints
// aren't met.
type DescribeCoinsByChainRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinsByChainRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinsByChainRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinsByChainRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinsByChainRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinsByChainRequestValidationError) ErrorName() string {
	return "DescribeCoinsByChainRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinsByChainRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinsByChainRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinsByChainRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinsByChainRequestValidationError{}

// Validate checks the field values on DescribeCoinsByChainReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCoinsByChainReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCoinsByChainReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeCoinsByChainReplyMultiError, or nil if none found.
func (m *DescribeCoinsByChainReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinsByChainReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCoins() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribeCoinsByChainReplyValidationError{
						field:  fmt.Sprintf("Coins[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribeCoinsByChainReplyValidationError{
						field:  fmt.Sprintf("Coins[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribeCoinsByChainReplyValidationError{
					field:  fmt.Sprintf("Coins[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DescribeCoinsByChainReplyMultiError(errors)
	}

	return nil
}

// DescribeCoinsByChainReplyMultiError is an error wrapping multiple validation
// errors returned by DescribeCoinsByChainReply.ValidateAll() if the
// designated constraints aren't met.
type DescribeCoinsByChainReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinsByChainReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinsByChainReplyMultiError) AllErrors() []error { return m }

// DescribeCoinsByChainReplyValidationError is the validation error returned by
// DescribeCoinsByChainReply.Validate if the designated constraints aren't met.
type DescribeCoinsByChainReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinsByChainReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinsByChainReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinsByChainReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinsByChainReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinsByChainReplyValidationError) ErrorName() string {
	return "DescribeCoinsByChainReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinsByChainReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinsByChainReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinsByChainReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinsByChainReplyValidationError{}

// Validate checks the field values on DescribeCollectionsReply_Coin with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCollectionsReply_Coin) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCollectionsReply_Coin with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DescribeCollectionsReply_CoinMultiError, or nil if none found.
func (m *DescribeCollectionsReply_Coin) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCollectionsReply_Coin) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Rank

	// no validation rules for CoinID

	// no validation rules for Price

	// no validation rules for Delta1H

	// no validation rules for Delta24H

	// no validation rules for Delta7D

	// no validation rules for Delta30D

	// no validation rules for Delta1Y

	// no validation rules for Volume24H

	// no validation rules for MarketCap

	// no validation rules for FullyDilutedValuation

	// no validation rules for TotalSupply

	// no validation rules for MaxSupply

	// no validation rules for CirculatingSupply

	// no validation rules for High24

	// no validation rules for Low24

	// no validation rules for Sparkline7D

	// no validation rules for UpdatedAt

	// no validation rules for Image

	// no validation rules for Name

	// no validation rules for Symbol

	// no validation rules for IsFocus

	if len(errors) > 0 {
		return DescribeCollectionsReply_CoinMultiError(errors)
	}

	return nil
}

// DescribeCollectionsReply_CoinMultiError is an error wrapping multiple
// validation errors returned by DescribeCollectionsReply_Coin.ValidateAll()
// if the designated constraints aren't met.
type DescribeCollectionsReply_CoinMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCollectionsReply_CoinMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCollectionsReply_CoinMultiError) AllErrors() []error { return m }

// DescribeCollectionsReply_CoinValidationError is the validation error
// returned by DescribeCollectionsReply_Coin.Validate if the designated
// constraints aren't met.
type DescribeCollectionsReply_CoinValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCollectionsReply_CoinValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCollectionsReply_CoinValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCollectionsReply_CoinValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCollectionsReply_CoinValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCollectionsReply_CoinValidationError) ErrorName() string {
	return "DescribeCollectionsReply_CoinValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCollectionsReply_CoinValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCollectionsReply_Coin.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCollectionsReply_CoinValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCollectionsReply_CoinValidationError{}

// Validate checks the field values on DescribeCollectionsReply_Pair with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCollectionsReply_Pair) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCollectionsReply_Pair with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DescribeCollectionsReply_PairMultiError, or nil if none found.
func (m *DescribeCollectionsReply_Pair) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCollectionsReply_Pair) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Address

	// no validation rules for Chain

	// no validation rules for DexID

	// no validation rules for DexIcon

	// no validation rules for BaseToken

	// no validation rules for QuoteToken

	// no validation rules for Stat5M

	// no validation rules for Stat1H

	// no validation rules for Stat6H

	// no validation rules for Stat24H

	// no validation rules for Fdv

	// no validation rules for Liquidity

	// no validation rules for Price

	// no validation rules for IsFocus

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return DescribeCollectionsReply_PairMultiError(errors)
	}

	return nil
}

// DescribeCollectionsReply_PairMultiError is an error wrapping multiple
// validation errors returned by DescribeCollectionsReply_Pair.ValidateAll()
// if the designated constraints aren't met.
type DescribeCollectionsReply_PairMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCollectionsReply_PairMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCollectionsReply_PairMultiError) AllErrors() []error { return m }

// DescribeCollectionsReply_PairValidationError is the validation error
// returned by DescribeCollectionsReply_Pair.Validate if the designated
// constraints aren't met.
type DescribeCollectionsReply_PairValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCollectionsReply_PairValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCollectionsReply_PairValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCollectionsReply_PairValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCollectionsReply_PairValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCollectionsReply_PairValidationError) ErrorName() string {
	return "DescribeCollectionsReply_PairValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCollectionsReply_PairValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCollectionsReply_Pair.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCollectionsReply_PairValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCollectionsReply_PairValidationError{}

// Validate checks the field values on CoinAndPair_Token with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CoinAndPair_Token) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CoinAndPair_Token with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CoinAndPair_TokenMultiError, or nil if none found.
func (m *CoinAndPair_Token) ValidateAll() error {
	return m.validate(true)
}

func (m *CoinAndPair_Token) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Symbol

	// no validation rules for Address

	if len(errors) > 0 {
		return CoinAndPair_TokenMultiError(errors)
	}

	return nil
}

// CoinAndPair_TokenMultiError is an error wrapping multiple validation errors
// returned by CoinAndPair_Token.ValidateAll() if the designated constraints
// aren't met.
type CoinAndPair_TokenMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CoinAndPair_TokenMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CoinAndPair_TokenMultiError) AllErrors() []error { return m }

// CoinAndPair_TokenValidationError is the validation error returned by
// CoinAndPair_Token.Validate if the designated constraints aren't met.
type CoinAndPair_TokenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CoinAndPair_TokenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CoinAndPair_TokenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CoinAndPair_TokenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CoinAndPair_TokenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CoinAndPair_TokenValidationError) ErrorName() string {
	return "CoinAndPair_TokenValidationError"
}

// Error satisfies the builtin error interface
func (e CoinAndPair_TokenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCoinAndPair_Token.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CoinAndPair_TokenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CoinAndPair_TokenValidationError{}

// Validate checks the field values on DescribeDexReply_Dex with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeDexReply_Dex) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeDexReply_Dex with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeDexReply_DexMultiError, or nil if none found.
func (m *DescribeDexReply_Dex) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeDexReply_Dex) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DexID

	// no validation rules for Name

	// no validation rules for Weight

	// no validation rules for Image

	if len(errors) > 0 {
		return DescribeDexReply_DexMultiError(errors)
	}

	return nil
}

// DescribeDexReply_DexMultiError is an error wrapping multiple validation
// errors returned by DescribeDexReply_Dex.ValidateAll() if the designated
// constraints aren't met.
type DescribeDexReply_DexMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeDexReply_DexMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeDexReply_DexMultiError) AllErrors() []error { return m }

// DescribeDexReply_DexValidationError is the validation error returned by
// DescribeDexReply_Dex.Validate if the designated constraints aren't met.
type DescribeDexReply_DexValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeDexReply_DexValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeDexReply_DexValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeDexReply_DexValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeDexReply_DexValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeDexReply_DexValidationError) ErrorName() string {
	return "DescribeDexReply_DexValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeDexReply_DexValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeDexReply_Dex.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeDexReply_DexValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeDexReply_DexValidationError{}

// Validate checks the field values on DescribeHotCoinsReply_HotCoin with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeHotCoinsReply_HotCoin) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeHotCoinsReply_HotCoin with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DescribeHotCoinsReply_HotCoinMultiError, or nil if none found.
func (m *DescribeHotCoinsReply_HotCoin) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeHotCoinsReply_HotCoin) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CoinID

	// no validation rules for Name

	// no validation rules for Symbol

	// no validation rules for Image

	// no validation rules for PriceDelta

	// no validation rules for Price

	if len(errors) > 0 {
		return DescribeHotCoinsReply_HotCoinMultiError(errors)
	}

	return nil
}

// DescribeHotCoinsReply_HotCoinMultiError is an error wrapping multiple
// validation errors returned by DescribeHotCoinsReply_HotCoin.ValidateAll()
// if the designated constraints aren't met.
type DescribeHotCoinsReply_HotCoinMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeHotCoinsReply_HotCoinMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeHotCoinsReply_HotCoinMultiError) AllErrors() []error { return m }

// DescribeHotCoinsReply_HotCoinValidationError is the validation error
// returned by DescribeHotCoinsReply_HotCoin.Validate if the designated
// constraints aren't met.
type DescribeHotCoinsReply_HotCoinValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeHotCoinsReply_HotCoinValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeHotCoinsReply_HotCoinValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeHotCoinsReply_HotCoinValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeHotCoinsReply_HotCoinValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeHotCoinsReply_HotCoinValidationError) ErrorName() string {
	return "DescribeHotCoinsReply_HotCoinValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeHotCoinsReply_HotCoinValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeHotCoinsReply_HotCoin.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeHotCoinsReply_HotCoinValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeHotCoinsReply_HotCoinValidationError{}

// Validate checks the field values on DescribeHotCoinsV2Reply_HotCoin with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeHotCoinsV2Reply_HotCoin) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeHotCoinsV2Reply_HotCoin with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DescribeHotCoinsV2Reply_HotCoinMultiError, or nil if none found.
func (m *DescribeHotCoinsV2Reply_HotCoin) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeHotCoinsV2Reply_HotCoin) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CoinID

	// no validation rules for Name

	// no validation rules for Symbol

	// no validation rules for Image

	// no validation rules for Delta24H

	// no validation rules for Price

	// no validation rules for Volume24H

	// no validation rules for MarketCap

	// no validation rules for Sparkline7D

	if len(errors) > 0 {
		return DescribeHotCoinsV2Reply_HotCoinMultiError(errors)
	}

	return nil
}

// DescribeHotCoinsV2Reply_HotCoinMultiError is an error wrapping multiple
// validation errors returned by DescribeHotCoinsV2Reply_HotCoin.ValidateAll()
// if the designated constraints aren't met.
type DescribeHotCoinsV2Reply_HotCoinMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeHotCoinsV2Reply_HotCoinMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeHotCoinsV2Reply_HotCoinMultiError) AllErrors() []error { return m }

// DescribeHotCoinsV2Reply_HotCoinValidationError is the validation error
// returned by DescribeHotCoinsV2Reply_HotCoin.Validate if the designated
// constraints aren't met.
type DescribeHotCoinsV2Reply_HotCoinValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeHotCoinsV2Reply_HotCoinValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeHotCoinsV2Reply_HotCoinValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeHotCoinsV2Reply_HotCoinValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeHotCoinsV2Reply_HotCoinValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeHotCoinsV2Reply_HotCoinValidationError) ErrorName() string {
	return "DescribeHotCoinsV2Reply_HotCoinValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeHotCoinsV2Reply_HotCoinValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeHotCoinsV2Reply_HotCoin.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeHotCoinsV2Reply_HotCoinValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeHotCoinsV2Reply_HotCoinValidationError{}

// Validate checks the field values on DescribeChainsSupportReply_Chain with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DescribeChainsSupportReply_Chain) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeChainsSupportReply_Chain with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DescribeChainsSupportReply_ChainMultiError, or nil if none found.
func (m *DescribeChainsSupportReply_Chain) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeChainsSupportReply_Chain) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Chain

	// no validation rules for Name

	// no validation rules for Icon

	if len(errors) > 0 {
		return DescribeChainsSupportReply_ChainMultiError(errors)
	}

	return nil
}

// DescribeChainsSupportReply_ChainMultiError is an error wrapping multiple
// validation errors returned by
// DescribeChainsSupportReply_Chain.ValidateAll() if the designated
// constraints aren't met.
type DescribeChainsSupportReply_ChainMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeChainsSupportReply_ChainMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeChainsSupportReply_ChainMultiError) AllErrors() []error { return m }

// DescribeChainsSupportReply_ChainValidationError is the validation error
// returned by DescribeChainsSupportReply_Chain.Validate if the designated
// constraints aren't met.
type DescribeChainsSupportReply_ChainValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeChainsSupportReply_ChainValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeChainsSupportReply_ChainValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeChainsSupportReply_ChainValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeChainsSupportReply_ChainValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeChainsSupportReply_ChainValidationError) ErrorName() string {
	return "DescribeChainsSupportReply_ChainValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeChainsSupportReply_ChainValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeChainsSupportReply_Chain.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeChainsSupportReply_ChainValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeChainsSupportReply_ChainValidationError{}

// Validate checks the field values on DescribeAlertsReply_CoinAlerts with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeAlertsReply_CoinAlerts) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeAlertsReply_CoinAlerts with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DescribeAlertsReply_CoinAlertsMultiError, or nil if none found.
func (m *DescribeAlertsReply_CoinAlerts) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeAlertsReply_CoinAlerts) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CoinID

	for idx, item := range m.GetAlerts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribeAlertsReply_CoinAlertsValidationError{
						field:  fmt.Sprintf("Alerts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribeAlertsReply_CoinAlertsValidationError{
						field:  fmt.Sprintf("Alerts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribeAlertsReply_CoinAlertsValidationError{
					field:  fmt.Sprintf("Alerts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Type

	if len(errors) > 0 {
		return DescribeAlertsReply_CoinAlertsMultiError(errors)
	}

	return nil
}

// DescribeAlertsReply_CoinAlertsMultiError is an error wrapping multiple
// validation errors returned by DescribeAlertsReply_CoinAlerts.ValidateAll()
// if the designated constraints aren't met.
type DescribeAlertsReply_CoinAlertsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeAlertsReply_CoinAlertsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeAlertsReply_CoinAlertsMultiError) AllErrors() []error { return m }

// DescribeAlertsReply_CoinAlertsValidationError is the validation error
// returned by DescribeAlertsReply_CoinAlerts.Validate if the designated
// constraints aren't met.
type DescribeAlertsReply_CoinAlertsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeAlertsReply_CoinAlertsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeAlertsReply_CoinAlertsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeAlertsReply_CoinAlertsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeAlertsReply_CoinAlertsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeAlertsReply_CoinAlertsValidationError) ErrorName() string {
	return "DescribeAlertsReply_CoinAlertsValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeAlertsReply_CoinAlertsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeAlertsReply_CoinAlerts.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeAlertsReply_CoinAlertsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeAlertsReply_CoinAlertsValidationError{}

// Validate checks the field values on DescribeAlertsReply_CoinAlerts_Alerts
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DescribeAlertsReply_CoinAlerts_Alerts) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeAlertsReply_CoinAlerts_Alerts
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DescribeAlertsReply_CoinAlerts_AlertsMultiError, or nil if none found.
func (m *DescribeAlertsReply_CoinAlerts_Alerts) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeAlertsReply_CoinAlerts_Alerts) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AlertID

	if _, ok := _DescribeAlertsReply_CoinAlerts_Alerts_AlertType_InLookup[m.GetAlertType()]; !ok {
		err := DescribeAlertsReply_CoinAlerts_AlertsValidationError{
			field:  "AlertType",
			reason: "value must be in list [1 2 3]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Value

	if _, ok := _DescribeAlertsReply_CoinAlerts_Alerts_Frequency_InLookup[m.GetFrequency()]; !ok {
		err := DescribeAlertsReply_CoinAlerts_AlertsValidationError{
			field:  "Frequency",
			reason: "value must be in list [1 2]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCurrency()) < 1 {
		err := DescribeAlertsReply_CoinAlerts_AlertsValidationError{
			field:  "Currency",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _DescribeAlertsReply_CoinAlerts_Alerts_Type_InLookup[m.GetType()]; !ok {
		err := DescribeAlertsReply_CoinAlerts_AlertsValidationError{
			field:  "Type",
			reason: "value must be in list [1 2]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DescribeAlertsReply_CoinAlerts_AlertsMultiError(errors)
	}

	return nil
}

// DescribeAlertsReply_CoinAlerts_AlertsMultiError is an error wrapping
// multiple validation errors returned by
// DescribeAlertsReply_CoinAlerts_Alerts.ValidateAll() if the designated
// constraints aren't met.
type DescribeAlertsReply_CoinAlerts_AlertsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeAlertsReply_CoinAlerts_AlertsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeAlertsReply_CoinAlerts_AlertsMultiError) AllErrors() []error { return m }

// DescribeAlertsReply_CoinAlerts_AlertsValidationError is the validation error
// returned by DescribeAlertsReply_CoinAlerts_Alerts.Validate if the
// designated constraints aren't met.
type DescribeAlertsReply_CoinAlerts_AlertsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeAlertsReply_CoinAlerts_AlertsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeAlertsReply_CoinAlerts_AlertsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeAlertsReply_CoinAlerts_AlertsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeAlertsReply_CoinAlerts_AlertsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeAlertsReply_CoinAlerts_AlertsValidationError) ErrorName() string {
	return "DescribeAlertsReply_CoinAlerts_AlertsValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeAlertsReply_CoinAlerts_AlertsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeAlertsReply_CoinAlerts_Alerts.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeAlertsReply_CoinAlerts_AlertsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeAlertsReply_CoinAlerts_AlertsValidationError{}

var _DescribeAlertsReply_CoinAlerts_Alerts_AlertType_InLookup = map[int32]struct{}{
	1: {},
	2: {},
	3: {},
}

var _DescribeAlertsReply_CoinAlerts_Alerts_Frequency_InLookup = map[int32]struct{}{
	1: {},
	2: {},
}

var _DescribeAlertsReply_CoinAlerts_Alerts_Type_InLookup = map[int32]struct{}{
	1: {},
	2: {},
}

// Validate checks the field values on DescribeCollectionGuideListReply_Guide
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DescribeCollectionGuideListReply_Guide) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DescribeCollectionGuideListReply_Guide with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// DescribeCollectionGuideListReply_GuideMultiError, or nil if none found.
func (m *DescribeCollectionGuideListReply_Guide) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCollectionGuideListReply_Guide) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CoinID

	// no validation rules for Weight

	if len(errors) > 0 {
		return DescribeCollectionGuideListReply_GuideMultiError(errors)
	}

	return nil
}

// DescribeCollectionGuideListReply_GuideMultiError is an error wrapping
// multiple validation errors returned by
// DescribeCollectionGuideListReply_Guide.ValidateAll() if the designated
// constraints aren't met.
type DescribeCollectionGuideListReply_GuideMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCollectionGuideListReply_GuideMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCollectionGuideListReply_GuideMultiError) AllErrors() []error { return m }

// DescribeCollectionGuideListReply_GuideValidationError is the validation
// error returned by DescribeCollectionGuideListReply_Guide.Validate if the
// designated constraints aren't met.
type DescribeCollectionGuideListReply_GuideValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCollectionGuideListReply_GuideValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCollectionGuideListReply_GuideValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCollectionGuideListReply_GuideValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCollectionGuideListReply_GuideValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCollectionGuideListReply_GuideValidationError) ErrorName() string {
	return "DescribeCollectionGuideListReply_GuideValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCollectionGuideListReply_GuideValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCollectionGuideListReply_Guide.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCollectionGuideListReply_GuideValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCollectionGuideListReply_GuideValidationError{}

// Validate checks the field values on DescribeColumnListReply_Column with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeColumnListReply_Column) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeColumnListReply_Column with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DescribeColumnListReply_ColumnMultiError, or nil if none found.
func (m *DescribeColumnListReply_Column) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeColumnListReply_Column) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ColumnID

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for Weight

	// no validation rules for Valid

	if len(errors) > 0 {
		return DescribeColumnListReply_ColumnMultiError(errors)
	}

	return nil
}

// DescribeColumnListReply_ColumnMultiError is an error wrapping multiple
// validation errors returned by DescribeColumnListReply_Column.ValidateAll()
// if the designated constraints aren't met.
type DescribeColumnListReply_ColumnMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeColumnListReply_ColumnMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeColumnListReply_ColumnMultiError) AllErrors() []error { return m }

// DescribeColumnListReply_ColumnValidationError is the validation error
// returned by DescribeColumnListReply_Column.Validate if the designated
// constraints aren't met.
type DescribeColumnListReply_ColumnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeColumnListReply_ColumnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeColumnListReply_ColumnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeColumnListReply_ColumnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeColumnListReply_ColumnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeColumnListReply_ColumnValidationError) ErrorName() string {
	return "DescribeColumnListReply_ColumnValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeColumnListReply_ColumnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeColumnListReply_Column.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeColumnListReply_ColumnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeColumnListReply_ColumnValidationError{}

// Validate checks the field values on DescribeCexCoinsRequest_Sort with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCexCoinsRequest_Sort) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCexCoinsRequest_Sort with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeCexCoinsRequest_SortMultiError, or nil if none found.
func (m *DescribeCexCoinsRequest_Sort) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCexCoinsRequest_Sort) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := DescribeCexCoinsRequest_SortFieldEnum_name[int32(m.GetSortField())]; !ok {
		err := DescribeCexCoinsRequest_SortValidationError{
			field:  "SortField",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for SortType

	if len(errors) > 0 {
		return DescribeCexCoinsRequest_SortMultiError(errors)
	}

	return nil
}

// DescribeCexCoinsRequest_SortMultiError is an error wrapping multiple
// validation errors returned by DescribeCexCoinsRequest_Sort.ValidateAll() if
// the designated constraints aren't met.
type DescribeCexCoinsRequest_SortMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCexCoinsRequest_SortMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCexCoinsRequest_SortMultiError) AllErrors() []error { return m }

// DescribeCexCoinsRequest_SortValidationError is the validation error returned
// by DescribeCexCoinsRequest_Sort.Validate if the designated constraints
// aren't met.
type DescribeCexCoinsRequest_SortValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCexCoinsRequest_SortValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCexCoinsRequest_SortValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCexCoinsRequest_SortValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCexCoinsRequest_SortValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCexCoinsRequest_SortValidationError) ErrorName() string {
	return "DescribeCexCoinsRequest_SortValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCexCoinsRequest_SortValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCexCoinsRequest_Sort.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCexCoinsRequest_SortValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCexCoinsRequest_SortValidationError{}

// Validate checks the field values on DescribeCexCoinsReply_Coin with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCexCoinsReply_Coin) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCexCoinsReply_Coin with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeCexCoinsReply_CoinMultiError, or nil if none found.
func (m *DescribeCexCoinsReply_Coin) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCexCoinsReply_Coin) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Rank

	// no validation rules for CoinID

	// no validation rules for Price

	// no validation rules for Delta1H

	// no validation rules for Delta24H

	// no validation rules for Delta7D

	// no validation rules for Delta30D

	// no validation rules for Delta1Y

	// no validation rules for Volume24H

	// no validation rules for MarketCap

	// no validation rules for FullyDilutedValuation

	// no validation rules for TotalSupply

	// no validation rules for MaxSupply

	// no validation rules for CirculatingSupply

	// no validation rules for High24

	// no validation rules for Low24

	// no validation rules for Sparkline7D

	// no validation rules for UpdatedAt

	// no validation rules for Image

	// no validation rules for Name

	// no validation rules for Symbol

	if len(errors) > 0 {
		return DescribeCexCoinsReply_CoinMultiError(errors)
	}

	return nil
}

// DescribeCexCoinsReply_CoinMultiError is an error wrapping multiple
// validation errors returned by DescribeCexCoinsReply_Coin.ValidateAll() if
// the designated constraints aren't met.
type DescribeCexCoinsReply_CoinMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCexCoinsReply_CoinMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCexCoinsReply_CoinMultiError) AllErrors() []error { return m }

// DescribeCexCoinsReply_CoinValidationError is the validation error returned
// by DescribeCexCoinsReply_Coin.Validate if the designated constraints aren't met.
type DescribeCexCoinsReply_CoinValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCexCoinsReply_CoinValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCexCoinsReply_CoinValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCexCoinsReply_CoinValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCexCoinsReply_CoinValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCexCoinsReply_CoinValidationError) ErrorName() string {
	return "DescribeCexCoinsReply_CoinValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCexCoinsReply_CoinValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCexCoinsReply_Coin.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCexCoinsReply_CoinValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCexCoinsReply_CoinValidationError{}

// Validate checks the field values on
// DescribeMarketExtraDetailReply_ChainAddress with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DescribeMarketExtraDetailReply_ChainAddress) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DescribeMarketExtraDetailReply_ChainAddress with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// DescribeMarketExtraDetailReply_ChainAddressMultiError, or nil if none found.
func (m *DescribeMarketExtraDetailReply_ChainAddress) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeMarketExtraDetailReply_ChainAddress) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Chain

	// no validation rules for Address

	// no validation rules for Icon

	if len(errors) > 0 {
		return DescribeMarketExtraDetailReply_ChainAddressMultiError(errors)
	}

	return nil
}

// DescribeMarketExtraDetailReply_ChainAddressMultiError is an error wrapping
// multiple validation errors returned by
// DescribeMarketExtraDetailReply_ChainAddress.ValidateAll() if the designated
// constraints aren't met.
type DescribeMarketExtraDetailReply_ChainAddressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeMarketExtraDetailReply_ChainAddressMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeMarketExtraDetailReply_ChainAddressMultiError) AllErrors() []error { return m }

// DescribeMarketExtraDetailReply_ChainAddressValidationError is the validation
// error returned by DescribeMarketExtraDetailReply_ChainAddress.Validate if
// the designated constraints aren't met.
type DescribeMarketExtraDetailReply_ChainAddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeMarketExtraDetailReply_ChainAddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeMarketExtraDetailReply_ChainAddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeMarketExtraDetailReply_ChainAddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeMarketExtraDetailReply_ChainAddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeMarketExtraDetailReply_ChainAddressValidationError) ErrorName() string {
	return "DescribeMarketExtraDetailReply_ChainAddressValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeMarketExtraDetailReply_ChainAddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeMarketExtraDetailReply_ChainAddress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeMarketExtraDetailReply_ChainAddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeMarketExtraDetailReply_ChainAddressValidationError{}

// Validate checks the field values on
// DescribeMarketExtraDetailReply_SocialLink with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DescribeMarketExtraDetailReply_SocialLink) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DescribeMarketExtraDetailReply_SocialLink with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// DescribeMarketExtraDetailReply_SocialLinkMultiError, or nil if none found.
func (m *DescribeMarketExtraDetailReply_SocialLink) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeMarketExtraDetailReply_SocialLink) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Twitter

	// no validation rules for Facebook

	// no validation rules for Reddit

	// no validation rules for Telegram

	if len(errors) > 0 {
		return DescribeMarketExtraDetailReply_SocialLinkMultiError(errors)
	}

	return nil
}

// DescribeMarketExtraDetailReply_SocialLinkMultiError is an error wrapping
// multiple validation errors returned by
// DescribeMarketExtraDetailReply_SocialLink.ValidateAll() if the designated
// constraints aren't met.
type DescribeMarketExtraDetailReply_SocialLinkMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeMarketExtraDetailReply_SocialLinkMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeMarketExtraDetailReply_SocialLinkMultiError) AllErrors() []error { return m }

// DescribeMarketExtraDetailReply_SocialLinkValidationError is the validation
// error returned by DescribeMarketExtraDetailReply_SocialLink.Validate if the
// designated constraints aren't met.
type DescribeMarketExtraDetailReply_SocialLinkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeMarketExtraDetailReply_SocialLinkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeMarketExtraDetailReply_SocialLinkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeMarketExtraDetailReply_SocialLinkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeMarketExtraDetailReply_SocialLinkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeMarketExtraDetailReply_SocialLinkValidationError) ErrorName() string {
	return "DescribeMarketExtraDetailReply_SocialLinkValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeMarketExtraDetailReply_SocialLinkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeMarketExtraDetailReply_SocialLink.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeMarketExtraDetailReply_SocialLinkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeMarketExtraDetailReply_SocialLinkValidationError{}

// Validate checks the field values on DescribeCoinPriceChartReply_PriceChart
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DescribeCoinPriceChartReply_PriceChart) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DescribeCoinPriceChartReply_PriceChart with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// DescribeCoinPriceChartReply_PriceChartMultiError, or nil if none found.
func (m *DescribeCoinPriceChartReply_PriceChart) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinPriceChartReply_PriceChart) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Timestamp

	// no validation rules for Price

	if len(errors) > 0 {
		return DescribeCoinPriceChartReply_PriceChartMultiError(errors)
	}

	return nil
}

// DescribeCoinPriceChartReply_PriceChartMultiError is an error wrapping
// multiple validation errors returned by
// DescribeCoinPriceChartReply_PriceChart.ValidateAll() if the designated
// constraints aren't met.
type DescribeCoinPriceChartReply_PriceChartMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinPriceChartReply_PriceChartMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinPriceChartReply_PriceChartMultiError) AllErrors() []error { return m }

// DescribeCoinPriceChartReply_PriceChartValidationError is the validation
// error returned by DescribeCoinPriceChartReply_PriceChart.Validate if the
// designated constraints aren't met.
type DescribeCoinPriceChartReply_PriceChartValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinPriceChartReply_PriceChartValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinPriceChartReply_PriceChartValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinPriceChartReply_PriceChartValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinPriceChartReply_PriceChartValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinPriceChartReply_PriceChartValidationError) ErrorName() string {
	return "DescribeCoinPriceChartReply_PriceChartValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinPriceChartReply_PriceChartValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinPriceChartReply_PriceChart.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinPriceChartReply_PriceChartValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinPriceChartReply_PriceChartValidationError{}

// Validate checks the field values on DescribeCoinPriceChartReply_CapChart
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DescribeCoinPriceChartReply_CapChart) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCoinPriceChartReply_CapChart
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DescribeCoinPriceChartReply_CapChartMultiError, or nil if none found.
func (m *DescribeCoinPriceChartReply_CapChart) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinPriceChartReply_CapChart) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Timestamp

	// no validation rules for Cap

	if len(errors) > 0 {
		return DescribeCoinPriceChartReply_CapChartMultiError(errors)
	}

	return nil
}

// DescribeCoinPriceChartReply_CapChartMultiError is an error wrapping multiple
// validation errors returned by
// DescribeCoinPriceChartReply_CapChart.ValidateAll() if the designated
// constraints aren't met.
type DescribeCoinPriceChartReply_CapChartMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinPriceChartReply_CapChartMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinPriceChartReply_CapChartMultiError) AllErrors() []error { return m }

// DescribeCoinPriceChartReply_CapChartValidationError is the validation error
// returned by DescribeCoinPriceChartReply_CapChart.Validate if the designated
// constraints aren't met.
type DescribeCoinPriceChartReply_CapChartValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinPriceChartReply_CapChartValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinPriceChartReply_CapChartValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinPriceChartReply_CapChartValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinPriceChartReply_CapChartValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinPriceChartReply_CapChartValidationError) ErrorName() string {
	return "DescribeCoinPriceChartReply_CapChartValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinPriceChartReply_CapChartValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinPriceChartReply_CapChart.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinPriceChartReply_CapChartValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinPriceChartReply_CapChartValidationError{}

// Validate checks the field values on DescribeCoinPriceChartReply_VolumeChart
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DescribeCoinPriceChartReply_VolumeChart) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DescribeCoinPriceChartReply_VolumeChart with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// DescribeCoinPriceChartReply_VolumeChartMultiError, or nil if none found.
func (m *DescribeCoinPriceChartReply_VolumeChart) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinPriceChartReply_VolumeChart) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Timestamp

	// no validation rules for Volume

	if len(errors) > 0 {
		return DescribeCoinPriceChartReply_VolumeChartMultiError(errors)
	}

	return nil
}

// DescribeCoinPriceChartReply_VolumeChartMultiError is an error wrapping
// multiple validation errors returned by
// DescribeCoinPriceChartReply_VolumeChart.ValidateAll() if the designated
// constraints aren't met.
type DescribeCoinPriceChartReply_VolumeChartMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinPriceChartReply_VolumeChartMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinPriceChartReply_VolumeChartMultiError) AllErrors() []error { return m }

// DescribeCoinPriceChartReply_VolumeChartValidationError is the validation
// error returned by DescribeCoinPriceChartReply_VolumeChart.Validate if the
// designated constraints aren't met.
type DescribeCoinPriceChartReply_VolumeChartValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinPriceChartReply_VolumeChartValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinPriceChartReply_VolumeChartValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinPriceChartReply_VolumeChartValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinPriceChartReply_VolumeChartValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinPriceChartReply_VolumeChartValidationError) ErrorName() string {
	return "DescribeCoinPriceChartReply_VolumeChartValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinPriceChartReply_VolumeChartValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinPriceChartReply_VolumeChart.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinPriceChartReply_VolumeChartValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinPriceChartReply_VolumeChartValidationError{}

// Validate checks the field values on DescribeCoinPriceByRangeReply_Price with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DescribeCoinPriceByRangeReply_Price) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCoinPriceByRangeReply_Price
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DescribeCoinPriceByRangeReply_PriceMultiError, or nil if none found.
func (m *DescribeCoinPriceByRangeReply_Price) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinPriceByRangeReply_Price) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Timestamp

	// no validation rules for Price

	if len(errors) > 0 {
		return DescribeCoinPriceByRangeReply_PriceMultiError(errors)
	}

	return nil
}

// DescribeCoinPriceByRangeReply_PriceMultiError is an error wrapping multiple
// validation errors returned by
// DescribeCoinPriceByRangeReply_Price.ValidateAll() if the designated
// constraints aren't met.
type DescribeCoinPriceByRangeReply_PriceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinPriceByRangeReply_PriceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinPriceByRangeReply_PriceMultiError) AllErrors() []error { return m }

// DescribeCoinPriceByRangeReply_PriceValidationError is the validation error
// returned by DescribeCoinPriceByRangeReply_Price.Validate if the designated
// constraints aren't met.
type DescribeCoinPriceByRangeReply_PriceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinPriceByRangeReply_PriceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinPriceByRangeReply_PriceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinPriceByRangeReply_PriceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinPriceByRangeReply_PriceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinPriceByRangeReply_PriceValidationError) ErrorName() string {
	return "DescribeCoinPriceByRangeReply_PriceValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinPriceByRangeReply_PriceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinPriceByRangeReply_Price.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinPriceByRangeReply_PriceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinPriceByRangeReply_PriceValidationError{}

// Validate checks the field values on DescribeCoinSwapsReply_CoinSwapsDetail
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DescribeCoinSwapsReply_CoinSwapsDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DescribeCoinSwapsReply_CoinSwapsDetail with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// DescribeCoinSwapsReply_CoinSwapsDetailMultiError, or nil if none found.
func (m *DescribeCoinSwapsReply_CoinSwapsDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinSwapsReply_CoinSwapsDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UUID

	// no validation rules for Timestamp

	// no validation rules for Amm

	// no validation rules for Chain

	// no validation rules for Price

	// no validation rules for SenderCoinID

	// no validation rules for ReceiverCoinID

	// no validation rules for SenderAddress

	// no validation rules for ReceiverAddress

	// no validation rules for TokenIn

	// no validation rules for TokenOut

	// no validation rules for PairAddress

	// no validation rules for WalletAddress

	// no validation rules for BlockNumber

	// no validation rules for WalletCategory

	// no validation rules for TransType

	// no validation rules for TransAddress

	if len(errors) > 0 {
		return DescribeCoinSwapsReply_CoinSwapsDetailMultiError(errors)
	}

	return nil
}

// DescribeCoinSwapsReply_CoinSwapsDetailMultiError is an error wrapping
// multiple validation errors returned by
// DescribeCoinSwapsReply_CoinSwapsDetail.ValidateAll() if the designated
// constraints aren't met.
type DescribeCoinSwapsReply_CoinSwapsDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinSwapsReply_CoinSwapsDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinSwapsReply_CoinSwapsDetailMultiError) AllErrors() []error { return m }

// DescribeCoinSwapsReply_CoinSwapsDetailValidationError is the validation
// error returned by DescribeCoinSwapsReply_CoinSwapsDetail.Validate if the
// designated constraints aren't met.
type DescribeCoinSwapsReply_CoinSwapsDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinSwapsReply_CoinSwapsDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinSwapsReply_CoinSwapsDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinSwapsReply_CoinSwapsDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinSwapsReply_CoinSwapsDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinSwapsReply_CoinSwapsDetailValidationError) ErrorName() string {
	return "DescribeCoinSwapsReply_CoinSwapsDetailValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinSwapsReply_CoinSwapsDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinSwapsReply_CoinSwapsDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinSwapsReply_CoinSwapsDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinSwapsReply_CoinSwapsDetailValidationError{}

// Validate checks the field values on
// DescribeCoinLiquidityReply_CoinLiquidityDetail with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DescribeCoinLiquidityReply_CoinLiquidityDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DescribeCoinLiquidityReply_CoinLiquidityDetail with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// DescribeCoinLiquidityReply_CoinLiquidityDetailMultiError, or nil if none found.
func (m *DescribeCoinLiquidityReply_CoinLiquidityDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinLiquidityReply_CoinLiquidityDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UUID

	// no validation rules for Timestamp

	// no validation rules for Amm

	// no validation rules for Chain

	// no validation rules for Price

	// no validation rules for Token1CoinID

	// no validation rules for Token2CoinID

	// no validation rules for Token1Address

	// no validation rules for Token2Address

	// no validation rules for Token1

	// no validation rules for Token2

	// no validation rules for PairAddress

	// no validation rules for WalletAddress

	// no validation rules for BlockNumber

	// no validation rules for TransType

	// no validation rules for TransAddress

	if len(errors) > 0 {
		return DescribeCoinLiquidityReply_CoinLiquidityDetailMultiError(errors)
	}

	return nil
}

// DescribeCoinLiquidityReply_CoinLiquidityDetailMultiError is an error
// wrapping multiple validation errors returned by
// DescribeCoinLiquidityReply_CoinLiquidityDetail.ValidateAll() if the
// designated constraints aren't met.
type DescribeCoinLiquidityReply_CoinLiquidityDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinLiquidityReply_CoinLiquidityDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinLiquidityReply_CoinLiquidityDetailMultiError) AllErrors() []error { return m }

// DescribeCoinLiquidityReply_CoinLiquidityDetailValidationError is the
// validation error returned by
// DescribeCoinLiquidityReply_CoinLiquidityDetail.Validate if the designated
// constraints aren't met.
type DescribeCoinLiquidityReply_CoinLiquidityDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinLiquidityReply_CoinLiquidityDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinLiquidityReply_CoinLiquidityDetailValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e DescribeCoinLiquidityReply_CoinLiquidityDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinLiquidityReply_CoinLiquidityDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinLiquidityReply_CoinLiquidityDetailValidationError) ErrorName() string {
	return "DescribeCoinLiquidityReply_CoinLiquidityDetailValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinLiquidityReply_CoinLiquidityDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinLiquidityReply_CoinLiquidityDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinLiquidityReply_CoinLiquidityDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinLiquidityReply_CoinLiquidityDetailValidationError{}

// Validate checks the field values on
// DescribeCoinLiquidityChartReply_LiquidityChart with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DescribeCoinLiquidityChartReply_LiquidityChart) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DescribeCoinLiquidityChartReply_LiquidityChart with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// DescribeCoinLiquidityChartReply_LiquidityChartMultiError, or nil if none found.
func (m *DescribeCoinLiquidityChartReply_LiquidityChart) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinLiquidityChartReply_LiquidityChart) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Timestamp

	// no validation rules for Price

	if len(errors) > 0 {
		return DescribeCoinLiquidityChartReply_LiquidityChartMultiError(errors)
	}

	return nil
}

// DescribeCoinLiquidityChartReply_LiquidityChartMultiError is an error
// wrapping multiple validation errors returned by
// DescribeCoinLiquidityChartReply_LiquidityChart.ValidateAll() if the
// designated constraints aren't met.
type DescribeCoinLiquidityChartReply_LiquidityChartMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinLiquidityChartReply_LiquidityChartMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinLiquidityChartReply_LiquidityChartMultiError) AllErrors() []error { return m }

// DescribeCoinLiquidityChartReply_LiquidityChartValidationError is the
// validation error returned by
// DescribeCoinLiquidityChartReply_LiquidityChart.Validate if the designated
// constraints aren't met.
type DescribeCoinLiquidityChartReply_LiquidityChartValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinLiquidityChartReply_LiquidityChartValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinLiquidityChartReply_LiquidityChartValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e DescribeCoinLiquidityChartReply_LiquidityChartValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinLiquidityChartReply_LiquidityChartValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinLiquidityChartReply_LiquidityChartValidationError) ErrorName() string {
	return "DescribeCoinLiquidityChartReply_LiquidityChartValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinLiquidityChartReply_LiquidityChartValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinLiquidityChartReply_LiquidityChart.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinLiquidityChartReply_LiquidityChartValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinLiquidityChartReply_LiquidityChartValidationError{}

// Validate checks the field values on DescribeCoinUserChartReply_UserChart
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DescribeCoinUserChartReply_UserChart) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCoinUserChartReply_UserChart
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DescribeCoinUserChartReply_UserChartMultiError, or nil if none found.
func (m *DescribeCoinUserChartReply_UserChart) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinUserChartReply_UserChart) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Timestamp

	// no validation rules for Buy

	// no validation rules for Sell

	// no validation rules for Total

	if len(errors) > 0 {
		return DescribeCoinUserChartReply_UserChartMultiError(errors)
	}

	return nil
}

// DescribeCoinUserChartReply_UserChartMultiError is an error wrapping multiple
// validation errors returned by
// DescribeCoinUserChartReply_UserChart.ValidateAll() if the designated
// constraints aren't met.
type DescribeCoinUserChartReply_UserChartMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinUserChartReply_UserChartMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinUserChartReply_UserChartMultiError) AllErrors() []error { return m }

// DescribeCoinUserChartReply_UserChartValidationError is the validation error
// returned by DescribeCoinUserChartReply_UserChart.Validate if the designated
// constraints aren't met.
type DescribeCoinUserChartReply_UserChartValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinUserChartReply_UserChartValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinUserChartReply_UserChartValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinUserChartReply_UserChartValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinUserChartReply_UserChartValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinUserChartReply_UserChartValidationError) ErrorName() string {
	return "DescribeCoinUserChartReply_UserChartValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinUserChartReply_UserChartValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinUserChartReply_UserChart.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinUserChartReply_UserChartValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinUserChartReply_UserChartValidationError{}

// Validate checks the field values on DescribeCoinOrderChartReply_OrderChart
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DescribeCoinOrderChartReply_OrderChart) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DescribeCoinOrderChartReply_OrderChart with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// DescribeCoinOrderChartReply_OrderChartMultiError, or nil if none found.
func (m *DescribeCoinOrderChartReply_OrderChart) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinOrderChartReply_OrderChart) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Timestamp

	// no validation rules for Buy

	// no validation rules for Sell

	// no validation rules for Total

	if len(errors) > 0 {
		return DescribeCoinOrderChartReply_OrderChartMultiError(errors)
	}

	return nil
}

// DescribeCoinOrderChartReply_OrderChartMultiError is an error wrapping
// multiple validation errors returned by
// DescribeCoinOrderChartReply_OrderChart.ValidateAll() if the designated
// constraints aren't met.
type DescribeCoinOrderChartReply_OrderChartMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinOrderChartReply_OrderChartMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinOrderChartReply_OrderChartMultiError) AllErrors() []error { return m }

// DescribeCoinOrderChartReply_OrderChartValidationError is the validation
// error returned by DescribeCoinOrderChartReply_OrderChart.Validate if the
// designated constraints aren't met.
type DescribeCoinOrderChartReply_OrderChartValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinOrderChartReply_OrderChartValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinOrderChartReply_OrderChartValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinOrderChartReply_OrderChartValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinOrderChartReply_OrderChartValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinOrderChartReply_OrderChartValidationError) ErrorName() string {
	return "DescribeCoinOrderChartReply_OrderChartValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinOrderChartReply_OrderChartValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinOrderChartReply_OrderChart.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinOrderChartReply_OrderChartValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinOrderChartReply_OrderChartValidationError{}

// Validate checks the field values on DescribeCoinVolumeChartReply_VolumeChart
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DescribeCoinVolumeChartReply_VolumeChart) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DescribeCoinVolumeChartReply_VolumeChart with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// DescribeCoinVolumeChartReply_VolumeChartMultiError, or nil if none found.
func (m *DescribeCoinVolumeChartReply_VolumeChart) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinVolumeChartReply_VolumeChart) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Timestamp

	// no validation rules for Buy

	// no validation rules for Sell

	// no validation rules for Total

	if len(errors) > 0 {
		return DescribeCoinVolumeChartReply_VolumeChartMultiError(errors)
	}

	return nil
}

// DescribeCoinVolumeChartReply_VolumeChartMultiError is an error wrapping
// multiple validation errors returned by
// DescribeCoinVolumeChartReply_VolumeChart.ValidateAll() if the designated
// constraints aren't met.
type DescribeCoinVolumeChartReply_VolumeChartMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinVolumeChartReply_VolumeChartMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinVolumeChartReply_VolumeChartMultiError) AllErrors() []error { return m }

// DescribeCoinVolumeChartReply_VolumeChartValidationError is the validation
// error returned by DescribeCoinVolumeChartReply_VolumeChart.Validate if the
// designated constraints aren't met.
type DescribeCoinVolumeChartReply_VolumeChartValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinVolumeChartReply_VolumeChartValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinVolumeChartReply_VolumeChartValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinVolumeChartReply_VolumeChartValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinVolumeChartReply_VolumeChartValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinVolumeChartReply_VolumeChartValidationError) ErrorName() string {
	return "DescribeCoinVolumeChartReply_VolumeChartValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinVolumeChartReply_VolumeChartValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinVolumeChartReply_VolumeChart.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinVolumeChartReply_VolumeChartValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinVolumeChartReply_VolumeChartValidationError{}

// Validate checks the field values on DescribeCoinSwapStatsReply_SwapStatInt
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DescribeCoinSwapStatsReply_SwapStatInt) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DescribeCoinSwapStatsReply_SwapStatInt with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// DescribeCoinSwapStatsReply_SwapStatIntMultiError, or nil if none found.
func (m *DescribeCoinSwapStatsReply_SwapStatInt) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinSwapStatsReply_SwapStatInt) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	// no validation rules for Buy

	// no validation rules for Sell

	if len(errors) > 0 {
		return DescribeCoinSwapStatsReply_SwapStatIntMultiError(errors)
	}

	return nil
}

// DescribeCoinSwapStatsReply_SwapStatIntMultiError is an error wrapping
// multiple validation errors returned by
// DescribeCoinSwapStatsReply_SwapStatInt.ValidateAll() if the designated
// constraints aren't met.
type DescribeCoinSwapStatsReply_SwapStatIntMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinSwapStatsReply_SwapStatIntMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinSwapStatsReply_SwapStatIntMultiError) AllErrors() []error { return m }

// DescribeCoinSwapStatsReply_SwapStatIntValidationError is the validation
// error returned by DescribeCoinSwapStatsReply_SwapStatInt.Validate if the
// designated constraints aren't met.
type DescribeCoinSwapStatsReply_SwapStatIntValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinSwapStatsReply_SwapStatIntValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinSwapStatsReply_SwapStatIntValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinSwapStatsReply_SwapStatIntValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinSwapStatsReply_SwapStatIntValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinSwapStatsReply_SwapStatIntValidationError) ErrorName() string {
	return "DescribeCoinSwapStatsReply_SwapStatIntValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinSwapStatsReply_SwapStatIntValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinSwapStatsReply_SwapStatInt.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinSwapStatsReply_SwapStatIntValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinSwapStatsReply_SwapStatIntValidationError{}

// Validate checks the field values on
// DescribeCoinSwapStatsReply_SwapStatDouble with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DescribeCoinSwapStatsReply_SwapStatDouble) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DescribeCoinSwapStatsReply_SwapStatDouble with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// DescribeCoinSwapStatsReply_SwapStatDoubleMultiError, or nil if none found.
func (m *DescribeCoinSwapStatsReply_SwapStatDouble) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinSwapStatsReply_SwapStatDouble) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	// no validation rules for Buy

	// no validation rules for Sell

	if len(errors) > 0 {
		return DescribeCoinSwapStatsReply_SwapStatDoubleMultiError(errors)
	}

	return nil
}

// DescribeCoinSwapStatsReply_SwapStatDoubleMultiError is an error wrapping
// multiple validation errors returned by
// DescribeCoinSwapStatsReply_SwapStatDouble.ValidateAll() if the designated
// constraints aren't met.
type DescribeCoinSwapStatsReply_SwapStatDoubleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinSwapStatsReply_SwapStatDoubleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinSwapStatsReply_SwapStatDoubleMultiError) AllErrors() []error { return m }

// DescribeCoinSwapStatsReply_SwapStatDoubleValidationError is the validation
// error returned by DescribeCoinSwapStatsReply_SwapStatDouble.Validate if the
// designated constraints aren't met.
type DescribeCoinSwapStatsReply_SwapStatDoubleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinSwapStatsReply_SwapStatDoubleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinSwapStatsReply_SwapStatDoubleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinSwapStatsReply_SwapStatDoubleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinSwapStatsReply_SwapStatDoubleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinSwapStatsReply_SwapStatDoubleValidationError) ErrorName() string {
	return "DescribeCoinSwapStatsReply_SwapStatDoubleValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinSwapStatsReply_SwapStatDoubleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinSwapStatsReply_SwapStatDouble.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinSwapStatsReply_SwapStatDoubleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinSwapStatsReply_SwapStatDoubleValidationError{}

// Validate checks the field values on DescribeDeFiCoinsReply_DeFiCoin with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeDeFiCoinsReply_DeFiCoin) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeDeFiCoinsReply_DeFiCoin with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DescribeDeFiCoinsReply_DeFiCoinMultiError, or nil if none found.
func (m *DescribeDeFiCoinsReply_DeFiCoin) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeDeFiCoinsReply_DeFiCoin) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CoinID

	// no validation rules for Price

	// no validation rules for PriceDelta24H

	// no validation rules for Liquidity

	// no validation rules for Volume24H

	// no validation rules for Orders24H

	// no validation rules for Users24H

	// no validation rules for Rank

	if len(errors) > 0 {
		return DescribeDeFiCoinsReply_DeFiCoinMultiError(errors)
	}

	return nil
}

// DescribeDeFiCoinsReply_DeFiCoinMultiError is an error wrapping multiple
// validation errors returned by DescribeDeFiCoinsReply_DeFiCoin.ValidateAll()
// if the designated constraints aren't met.
type DescribeDeFiCoinsReply_DeFiCoinMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeDeFiCoinsReply_DeFiCoinMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeDeFiCoinsReply_DeFiCoinMultiError) AllErrors() []error { return m }

// DescribeDeFiCoinsReply_DeFiCoinValidationError is the validation error
// returned by DescribeDeFiCoinsReply_DeFiCoin.Validate if the designated
// constraints aren't met.
type DescribeDeFiCoinsReply_DeFiCoinValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeDeFiCoinsReply_DeFiCoinValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeDeFiCoinsReply_DeFiCoinValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeDeFiCoinsReply_DeFiCoinValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeDeFiCoinsReply_DeFiCoinValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeDeFiCoinsReply_DeFiCoinValidationError) ErrorName() string {
	return "DescribeDeFiCoinsReply_DeFiCoinValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeDeFiCoinsReply_DeFiCoinValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeDeFiCoinsReply_DeFiCoin.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeDeFiCoinsReply_DeFiCoinValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeDeFiCoinsReply_DeFiCoinValidationError{}

// Validate checks the field values on DescribeTokensReply_Token with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeTokensReply_Token) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeTokensReply_Token with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeTokensReply_TokenMultiError, or nil if none found.
func (m *DescribeTokensReply_Token) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeTokensReply_Token) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Timestamp

	// no validation rules for Name

	// no validation rules for Symbol

	// no validation rules for CoinID

	// no validation rules for Address

	// no validation rules for Liquidity

	// no validation rules for Chain

	if len(errors) > 0 {
		return DescribeTokensReply_TokenMultiError(errors)
	}

	return nil
}

// DescribeTokensReply_TokenMultiError is an error wrapping multiple validation
// errors returned by DescribeTokensReply_Token.ValidateAll() if the
// designated constraints aren't met.
type DescribeTokensReply_TokenMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeTokensReply_TokenMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeTokensReply_TokenMultiError) AllErrors() []error { return m }

// DescribeTokensReply_TokenValidationError is the validation error returned by
// DescribeTokensReply_Token.Validate if the designated constraints aren't met.
type DescribeTokensReply_TokenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeTokensReply_TokenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeTokensReply_TokenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeTokensReply_TokenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeTokensReply_TokenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeTokensReply_TokenValidationError) ErrorName() string {
	return "DescribeTokensReply_TokenValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeTokensReply_TokenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeTokensReply_Token.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeTokensReply_TokenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeTokensReply_TokenValidationError{}

// Validate checks the field values on DescribeGuruChainsReply_Chain with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeGuruChainsReply_Chain) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeGuruChainsReply_Chain with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DescribeGuruChainsReply_ChainMultiError, or nil if none found.
func (m *DescribeGuruChainsReply_Chain) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeGuruChainsReply_Chain) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Chain

	// no validation rules for Name

	// no validation rules for Description

	if len(errors) > 0 {
		return DescribeGuruChainsReply_ChainMultiError(errors)
	}

	return nil
}

// DescribeGuruChainsReply_ChainMultiError is an error wrapping multiple
// validation errors returned by DescribeGuruChainsReply_Chain.ValidateAll()
// if the designated constraints aren't met.
type DescribeGuruChainsReply_ChainMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeGuruChainsReply_ChainMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeGuruChainsReply_ChainMultiError) AllErrors() []error { return m }

// DescribeGuruChainsReply_ChainValidationError is the validation error
// returned by DescribeGuruChainsReply_Chain.Validate if the designated
// constraints aren't met.
type DescribeGuruChainsReply_ChainValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeGuruChainsReply_ChainValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeGuruChainsReply_ChainValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeGuruChainsReply_ChainValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeGuruChainsReply_ChainValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeGuruChainsReply_ChainValidationError) ErrorName() string {
	return "DescribeGuruChainsReply_ChainValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeGuruChainsReply_ChainValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeGuruChainsReply_Chain.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeGuruChainsReply_ChainValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeGuruChainsReply_ChainValidationError{}

// Validate checks the field values on DescribeCoinsByFieldsReply_Coin with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCoinsByFieldsReply_Coin) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCoinsByFieldsReply_Coin with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DescribeCoinsByFieldsReply_CoinMultiError, or nil if none found.
func (m *DescribeCoinsByFieldsReply_Coin) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinsByFieldsReply_Coin) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CoinID

	if all {
		switch v := interface{}(m.GetPrice()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DescribeCoinsByFieldsReply_CoinValidationError{
					field:  "Price",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DescribeCoinsByFieldsReply_CoinValidationError{
					field:  "Price",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeCoinsByFieldsReply_CoinValidationError{
				field:  "Price",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Icon

	if len(errors) > 0 {
		return DescribeCoinsByFieldsReply_CoinMultiError(errors)
	}

	return nil
}

// DescribeCoinsByFieldsReply_CoinMultiError is an error wrapping multiple
// validation errors returned by DescribeCoinsByFieldsReply_Coin.ValidateAll()
// if the designated constraints aren't met.
type DescribeCoinsByFieldsReply_CoinMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinsByFieldsReply_CoinMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinsByFieldsReply_CoinMultiError) AllErrors() []error { return m }

// DescribeCoinsByFieldsReply_CoinValidationError is the validation error
// returned by DescribeCoinsByFieldsReply_Coin.Validate if the designated
// constraints aren't met.
type DescribeCoinsByFieldsReply_CoinValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinsByFieldsReply_CoinValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinsByFieldsReply_CoinValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinsByFieldsReply_CoinValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinsByFieldsReply_CoinValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinsByFieldsReply_CoinValidationError) ErrorName() string {
	return "DescribeCoinsByFieldsReply_CoinValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinsByFieldsReply_CoinValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinsByFieldsReply_Coin.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinsByFieldsReply_CoinValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinsByFieldsReply_CoinValidationError{}

// Validate checks the field values on DescribeTokensByFieldsReply_Token with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DescribeTokensByFieldsReply_Token) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeTokensByFieldsReply_Token
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DescribeTokensByFieldsReply_TokenMultiError, or nil if none found.
func (m *DescribeTokensByFieldsReply_Token) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeTokensByFieldsReply_Token) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CoinID

	// no validation rules for Address

	if all {
		switch v := interface{}(m.GetPrice()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DescribeTokensByFieldsReply_TokenValidationError{
					field:  "Price",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DescribeTokensByFieldsReply_TokenValidationError{
					field:  "Price",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeTokensByFieldsReply_TokenValidationError{
				field:  "Price",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Icon

	if len(errors) > 0 {
		return DescribeTokensByFieldsReply_TokenMultiError(errors)
	}

	return nil
}

// DescribeTokensByFieldsReply_TokenMultiError is an error wrapping multiple
// validation errors returned by
// DescribeTokensByFieldsReply_Token.ValidateAll() if the designated
// constraints aren't met.
type DescribeTokensByFieldsReply_TokenMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeTokensByFieldsReply_TokenMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeTokensByFieldsReply_TokenMultiError) AllErrors() []error { return m }

// DescribeTokensByFieldsReply_TokenValidationError is the validation error
// returned by DescribeTokensByFieldsReply_Token.Validate if the designated
// constraints aren't met.
type DescribeTokensByFieldsReply_TokenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeTokensByFieldsReply_TokenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeTokensByFieldsReply_TokenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeTokensByFieldsReply_TokenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeTokensByFieldsReply_TokenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeTokensByFieldsReply_TokenValidationError) ErrorName() string {
	return "DescribeTokensByFieldsReply_TokenValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeTokensByFieldsReply_TokenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeTokensByFieldsReply_Token.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeTokensByFieldsReply_TokenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeTokensByFieldsReply_TokenValidationError{}

// Validate checks the field values on DescribePriceByCoinAddressReply_Tokens
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DescribePriceByCoinAddressReply_Tokens) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DescribePriceByCoinAddressReply_Tokens with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// DescribePriceByCoinAddressReply_TokensMultiError, or nil if none found.
func (m *DescribePriceByCoinAddressReply_Tokens) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribePriceByCoinAddressReply_Tokens) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPrice()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DescribePriceByCoinAddressReply_TokensValidationError{
					field:  "Price",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DescribePriceByCoinAddressReply_TokensValidationError{
					field:  "Price",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribePriceByCoinAddressReply_TokensValidationError{
				field:  "Price",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Chain

	// no validation rules for Address

	// no validation rules for Icon

	// no validation rules for CoinID

	// no validation rules for DecimalPlace

	if len(errors) > 0 {
		return DescribePriceByCoinAddressReply_TokensMultiError(errors)
	}

	return nil
}

// DescribePriceByCoinAddressReply_TokensMultiError is an error wrapping
// multiple validation errors returned by
// DescribePriceByCoinAddressReply_Tokens.ValidateAll() if the designated
// constraints aren't met.
type DescribePriceByCoinAddressReply_TokensMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribePriceByCoinAddressReply_TokensMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribePriceByCoinAddressReply_TokensMultiError) AllErrors() []error { return m }

// DescribePriceByCoinAddressReply_TokensValidationError is the validation
// error returned by DescribePriceByCoinAddressReply_Tokens.Validate if the
// designated constraints aren't met.
type DescribePriceByCoinAddressReply_TokensValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribePriceByCoinAddressReply_TokensValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribePriceByCoinAddressReply_TokensValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribePriceByCoinAddressReply_TokensValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribePriceByCoinAddressReply_TokensValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribePriceByCoinAddressReply_TokensValidationError) ErrorName() string {
	return "DescribePriceByCoinAddressReply_TokensValidationError"
}

// Error satisfies the builtin error interface
func (e DescribePriceByCoinAddressReply_TokensValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribePriceByCoinAddressReply_Tokens.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribePriceByCoinAddressReply_TokensValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribePriceByCoinAddressReply_TokensValidationError{}

// Validate checks the field values on
// DescribePriceByCoinAddressReply_CoinCurrency with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DescribePriceByCoinAddressReply_CoinCurrency) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DescribePriceByCoinAddressReply_CoinCurrency with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// DescribePriceByCoinAddressReply_CoinCurrencyMultiError, or nil if none found.
func (m *DescribePriceByCoinAddressReply_CoinCurrency) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribePriceByCoinAddressReply_CoinCurrency) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPrice()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DescribePriceByCoinAddressReply_CoinCurrencyValidationError{
					field:  "Price",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DescribePriceByCoinAddressReply_CoinCurrencyValidationError{
					field:  "Price",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribePriceByCoinAddressReply_CoinCurrencyValidationError{
				field:  "Price",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Icon

	// no validation rules for CoinID

	if len(errors) > 0 {
		return DescribePriceByCoinAddressReply_CoinCurrencyMultiError(errors)
	}

	return nil
}

// DescribePriceByCoinAddressReply_CoinCurrencyMultiError is an error wrapping
// multiple validation errors returned by
// DescribePriceByCoinAddressReply_CoinCurrency.ValidateAll() if the
// designated constraints aren't met.
type DescribePriceByCoinAddressReply_CoinCurrencyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribePriceByCoinAddressReply_CoinCurrencyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribePriceByCoinAddressReply_CoinCurrencyMultiError) AllErrors() []error { return m }

// DescribePriceByCoinAddressReply_CoinCurrencyValidationError is the
// validation error returned by
// DescribePriceByCoinAddressReply_CoinCurrency.Validate if the designated
// constraints aren't met.
type DescribePriceByCoinAddressReply_CoinCurrencyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribePriceByCoinAddressReply_CoinCurrencyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribePriceByCoinAddressReply_CoinCurrencyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribePriceByCoinAddressReply_CoinCurrencyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribePriceByCoinAddressReply_CoinCurrencyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribePriceByCoinAddressReply_CoinCurrencyValidationError) ErrorName() string {
	return "DescribePriceByCoinAddressReply_CoinCurrencyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribePriceByCoinAddressReply_CoinCurrencyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribePriceByCoinAddressReply_CoinCurrency.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribePriceByCoinAddressReply_CoinCurrencyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribePriceByCoinAddressReply_CoinCurrencyValidationError{}

// Validate checks the field values on DescribeCoinIDByTokensReply_Coin with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DescribeCoinIDByTokensReply_Coin) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCoinIDByTokensReply_Coin with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DescribeCoinIDByTokensReply_CoinMultiError, or nil if none found.
func (m *DescribeCoinIDByTokensReply_Coin) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinIDByTokensReply_Coin) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CoinID

	// no validation rules for Chain

	// no validation rules for Address

	if len(errors) > 0 {
		return DescribeCoinIDByTokensReply_CoinMultiError(errors)
	}

	return nil
}

// DescribeCoinIDByTokensReply_CoinMultiError is an error wrapping multiple
// validation errors returned by
// DescribeCoinIDByTokensReply_Coin.ValidateAll() if the designated
// constraints aren't met.
type DescribeCoinIDByTokensReply_CoinMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinIDByTokensReply_CoinMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinIDByTokensReply_CoinMultiError) AllErrors() []error { return m }

// DescribeCoinIDByTokensReply_CoinValidationError is the validation error
// returned by DescribeCoinIDByTokensReply_Coin.Validate if the designated
// constraints aren't met.
type DescribeCoinIDByTokensReply_CoinValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinIDByTokensReply_CoinValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinIDByTokensReply_CoinValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinIDByTokensReply_CoinValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinIDByTokensReply_CoinValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinIDByTokensReply_CoinValidationError) ErrorName() string {
	return "DescribeCoinIDByTokensReply_CoinValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinIDByTokensReply_CoinValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinIDByTokensReply_Coin.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinIDByTokensReply_CoinValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinIDByTokensReply_CoinValidationError{}

// Validate checks the field values on DescribeWhiteTokensReply_Coin with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeWhiteTokensReply_Coin) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeWhiteTokensReply_Coin with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DescribeWhiteTokensReply_CoinMultiError, or nil if none found.
func (m *DescribeWhiteTokensReply_Coin) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeWhiteTokensReply_Coin) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CoinID

	// no validation rules for Address

	// no validation rules for Symbol

	// no validation rules for Icon

	// no validation rules for Price

	if len(errors) > 0 {
		return DescribeWhiteTokensReply_CoinMultiError(errors)
	}

	return nil
}

// DescribeWhiteTokensReply_CoinMultiError is an error wrapping multiple
// validation errors returned by DescribeWhiteTokensReply_Coin.ValidateAll()
// if the designated constraints aren't met.
type DescribeWhiteTokensReply_CoinMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeWhiteTokensReply_CoinMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeWhiteTokensReply_CoinMultiError) AllErrors() []error { return m }

// DescribeWhiteTokensReply_CoinValidationError is the validation error
// returned by DescribeWhiteTokensReply_Coin.Validate if the designated
// constraints aren't met.
type DescribeWhiteTokensReply_CoinValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeWhiteTokensReply_CoinValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeWhiteTokensReply_CoinValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeWhiteTokensReply_CoinValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeWhiteTokensReply_CoinValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeWhiteTokensReply_CoinValidationError) ErrorName() string {
	return "DescribeWhiteTokensReply_CoinValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeWhiteTokensReply_CoinValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeWhiteTokensReply_Coin.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeWhiteTokensReply_CoinValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeWhiteTokensReply_CoinValidationError{}

// Validate checks the field values on CheckCoinsReply_Coin with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckCoinsReply_Coin) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckCoinsReply_Coin with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckCoinsReply_CoinMultiError, or nil if none found.
func (m *CheckCoinsReply_Coin) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckCoinsReply_Coin) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CoinID

	// no validation rules for IsCex

	// no validation rules for IsDex

	if len(errors) > 0 {
		return CheckCoinsReply_CoinMultiError(errors)
	}

	return nil
}

// CheckCoinsReply_CoinMultiError is an error wrapping multiple validation
// errors returned by CheckCoinsReply_Coin.ValidateAll() if the designated
// constraints aren't met.
type CheckCoinsReply_CoinMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckCoinsReply_CoinMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckCoinsReply_CoinMultiError) AllErrors() []error { return m }

// CheckCoinsReply_CoinValidationError is the validation error returned by
// CheckCoinsReply_Coin.Validate if the designated constraints aren't met.
type CheckCoinsReply_CoinValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckCoinsReply_CoinValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckCoinsReply_CoinValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckCoinsReply_CoinValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckCoinsReply_CoinValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckCoinsReply_CoinValidationError) ErrorName() string {
	return "CheckCoinsReply_CoinValidationError"
}

// Error satisfies the builtin error interface
func (e CheckCoinsReply_CoinValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckCoinsReply_Coin.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckCoinsReply_CoinValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckCoinsReply_CoinValidationError{}

// Validate checks the field values on DescribePairReply_Pair with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribePairReply_Pair) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribePairReply_Pair with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribePairReply_PairMultiError, or nil if none found.
func (m *DescribePairReply_Pair) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribePairReply_Pair) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Address

	// no validation rules for Chain

	// no validation rules for DexID

	// no validation rules for DexIcon

	// no validation rules for BaseToken

	// no validation rules for QuoteToken

	// no validation rules for Stat5M

	// no validation rules for Stat1H

	// no validation rules for Stat6H

	// no validation rules for Stat24H

	// no validation rules for Fdv

	// no validation rules for Liquidity

	// no validation rules for Price

	// no validation rules for IsFocus

	// no validation rules for DexScreenerChain

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return DescribePairReply_PairMultiError(errors)
	}

	return nil
}

// DescribePairReply_PairMultiError is an error wrapping multiple validation
// errors returned by DescribePairReply_Pair.ValidateAll() if the designated
// constraints aren't met.
type DescribePairReply_PairMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribePairReply_PairMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribePairReply_PairMultiError) AllErrors() []error { return m }

// DescribePairReply_PairValidationError is the validation error returned by
// DescribePairReply_Pair.Validate if the designated constraints aren't met.
type DescribePairReply_PairValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribePairReply_PairValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribePairReply_PairValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribePairReply_PairValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribePairReply_PairValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribePairReply_PairValidationError) ErrorName() string {
	return "DescribePairReply_PairValidationError"
}

// Error satisfies the builtin error interface
func (e DescribePairReply_PairValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribePairReply_Pair.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribePairReply_PairValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribePairReply_PairValidationError{}

// Validate checks the field values on DescribePairTrendsReply_PairTrend with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DescribePairTrendsReply_PairTrend) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribePairTrendsReply_PairTrend
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DescribePairTrendsReply_PairTrendMultiError, or nil if none found.
func (m *DescribePairTrendsReply_PairTrend) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribePairTrendsReply_PairTrend) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Address

	// no validation rules for Chain

	// no validation rules for DexIcon

	// no validation rules for BaseToken

	// no validation rules for QuoteToken

	// no validation rules for Price

	// no validation rules for PriceDelta

	// no validation rules for DexID

	// no validation rules for IsFocus

	if len(errors) > 0 {
		return DescribePairTrendsReply_PairTrendMultiError(errors)
	}

	return nil
}

// DescribePairTrendsReply_PairTrendMultiError is an error wrapping multiple
// validation errors returned by
// DescribePairTrendsReply_PairTrend.ValidateAll() if the designated
// constraints aren't met.
type DescribePairTrendsReply_PairTrendMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribePairTrendsReply_PairTrendMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribePairTrendsReply_PairTrendMultiError) AllErrors() []error { return m }

// DescribePairTrendsReply_PairTrendValidationError is the validation error
// returned by DescribePairTrendsReply_PairTrend.Validate if the designated
// constraints aren't met.
type DescribePairTrendsReply_PairTrendValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribePairTrendsReply_PairTrendValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribePairTrendsReply_PairTrendValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribePairTrendsReply_PairTrendValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribePairTrendsReply_PairTrendValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribePairTrendsReply_PairTrendValidationError) ErrorName() string {
	return "DescribePairTrendsReply_PairTrendValidationError"
}

// Error satisfies the builtin error interface
func (e DescribePairTrendsReply_PairTrendValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribePairTrendsReply_PairTrend.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribePairTrendsReply_PairTrendValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribePairTrendsReply_PairTrendValidationError{}

// Validate checks the field values on DescribeCoinsByChainReply_Coin with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCoinsByChainReply_Coin) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCoinsByChainReply_Coin with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DescribeCoinsByChainReply_CoinMultiError, or nil if none found.
func (m *DescribeCoinsByChainReply_Coin) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinsByChainReply_Coin) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CoinID

	// no validation rules for Address

	// no validation rules for Symbol

	// no validation rules for Icon

	// no validation rules for Description

	// no validation rules for DecimalPlace

	// no validation rules for Name

	if len(errors) > 0 {
		return DescribeCoinsByChainReply_CoinMultiError(errors)
	}

	return nil
}

// DescribeCoinsByChainReply_CoinMultiError is an error wrapping multiple
// validation errors returned by DescribeCoinsByChainReply_Coin.ValidateAll()
// if the designated constraints aren't met.
type DescribeCoinsByChainReply_CoinMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinsByChainReply_CoinMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinsByChainReply_CoinMultiError) AllErrors() []error { return m }

// DescribeCoinsByChainReply_CoinValidationError is the validation error
// returned by DescribeCoinsByChainReply_Coin.Validate if the designated
// constraints aren't met.
type DescribeCoinsByChainReply_CoinValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinsByChainReply_CoinValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinsByChainReply_CoinValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinsByChainReply_CoinValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinsByChainReply_CoinValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinsByChainReply_CoinValidationError) ErrorName() string {
	return "DescribeCoinsByChainReply_CoinValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinsByChainReply_CoinValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinsByChainReply_Coin.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinsByChainReply_CoinValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinsByChainReply_CoinValidationError{}

// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/market/v1/market.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ModifyColumnRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ModifyColumnRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModifyColumnRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ModifyColumnRequestMultiError, or nil if none found.
func (m *ModifyColumnRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ModifyColumnRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	// no validation rules for ColumnID

	// no validation rules for Name

	if _, ok := _ModifyColumnRequest_Type_InLookup[m.GetType()]; !ok {
		err := ModifyColumnRequestValidationError{
			field:  "Type",
			reason: "value must be in list [1 2]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Weight

	if m.Valid != nil {
		// no validation rules for Valid
	}

	if len(errors) > 0 {
		return ModifyColumnRequestMultiError(errors)
	}

	return nil
}

// ModifyColumnRequestMultiError is an error wrapping multiple validation
// errors returned by ModifyColumnRequest.ValidateAll() if the designated
// constraints aren't met.
type ModifyColumnRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModifyColumnRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModifyColumnRequestMultiError) AllErrors() []error { return m }

// ModifyColumnRequestValidationError is the validation error returned by
// ModifyColumnRequest.Validate if the designated constraints aren't met.
type ModifyColumnRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModifyColumnRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModifyColumnRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModifyColumnRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModifyColumnRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModifyColumnRequestValidationError) ErrorName() string {
	return "ModifyColumnRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ModifyColumnRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModifyColumnRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModifyColumnRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModifyColumnRequestValidationError{}

var _ModifyColumnRequest_Type_InLookup = map[int32]struct{}{
	1: {},
	2: {},
}

// Validate checks the field values on ModifyColumnReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ModifyColumnReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModifyColumnReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ModifyColumnReplyMultiError, or nil if none found.
func (m *ModifyColumnReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ModifyColumnReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for EventId

	if len(errors) > 0 {
		return ModifyColumnReplyMultiError(errors)
	}

	return nil
}

// ModifyColumnReplyMultiError is an error wrapping multiple validation errors
// returned by ModifyColumnReply.ValidateAll() if the designated constraints
// aren't met.
type ModifyColumnReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModifyColumnReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModifyColumnReplyMultiError) AllErrors() []error { return m }

// ModifyColumnReplyValidationError is the validation error returned by
// ModifyColumnReply.Validate if the designated constraints aren't met.
type ModifyColumnReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModifyColumnReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModifyColumnReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModifyColumnReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModifyColumnReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModifyColumnReplyValidationError) ErrorName() string {
	return "ModifyColumnReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ModifyColumnReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModifyColumnReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModifyColumnReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModifyColumnReplyValidationError{}

// Validate checks the field values on RemoveColumnRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveColumnRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveColumnRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveColumnRequestMultiError, or nil if none found.
func (m *RemoveColumnRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveColumnRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if len(errors) > 0 {
		return RemoveColumnRequestMultiError(errors)
	}

	return nil
}

// RemoveColumnRequestMultiError is an error wrapping multiple validation
// errors returned by RemoveColumnRequest.ValidateAll() if the designated
// constraints aren't met.
type RemoveColumnRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveColumnRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveColumnRequestMultiError) AllErrors() []error { return m }

// RemoveColumnRequestValidationError is the validation error returned by
// RemoveColumnRequest.Validate if the designated constraints aren't met.
type RemoveColumnRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveColumnRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveColumnRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveColumnRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveColumnRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveColumnRequestValidationError) ErrorName() string {
	return "RemoveColumnRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveColumnRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveColumnRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveColumnRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveColumnRequestValidationError{}

// Validate checks the field values on RemoveColumnReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RemoveColumnReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveColumnReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveColumnReplyMultiError, or nil if none found.
func (m *RemoveColumnReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveColumnReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for EventId

	if len(errors) > 0 {
		return RemoveColumnReplyMultiError(errors)
	}

	return nil
}

// RemoveColumnReplyMultiError is an error wrapping multiple validation errors
// returned by RemoveColumnReply.ValidateAll() if the designated constraints
// aren't met.
type RemoveColumnReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveColumnReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveColumnReplyMultiError) AllErrors() []error { return m }

// RemoveColumnReplyValidationError is the validation error returned by
// RemoveColumnReply.Validate if the designated constraints aren't met.
type RemoveColumnReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveColumnReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveColumnReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveColumnReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveColumnReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveColumnReplyValidationError) ErrorName() string {
	return "RemoveColumnReplyValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveColumnReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveColumnReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveColumnReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveColumnReplyValidationError{}

// Validate checks the field values on CreateColumnRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateColumnRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateColumnRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateColumnRequestMultiError, or nil if none found.
func (m *CreateColumnRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateColumnRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	// no validation rules for Name

	if _, ok := _CreateColumnRequest_Type_InLookup[m.GetType()]; !ok {
		err := CreateColumnRequestValidationError{
			field:  "Type",
			reason: "value must be in list [1 2]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Weight

	if m.Valid != nil {
		// no validation rules for Valid
	}

	if len(errors) > 0 {
		return CreateColumnRequestMultiError(errors)
	}

	return nil
}

// CreateColumnRequestMultiError is an error wrapping multiple validation
// errors returned by CreateColumnRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateColumnRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateColumnRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateColumnRequestMultiError) AllErrors() []error { return m }

// CreateColumnRequestValidationError is the validation error returned by
// CreateColumnRequest.Validate if the designated constraints aren't met.
type CreateColumnRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateColumnRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateColumnRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateColumnRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateColumnRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateColumnRequestValidationError) ErrorName() string {
	return "CreateColumnRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateColumnRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateColumnRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateColumnRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateColumnRequestValidationError{}

var _CreateColumnRequest_Type_InLookup = map[int32]struct{}{
	1: {},
	2: {},
}

// Validate checks the field values on CreateColumnReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateColumnReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateColumnReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateColumnReplyMultiError, or nil if none found.
func (m *CreateColumnReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateColumnReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for EventId

	if len(errors) > 0 {
		return CreateColumnReplyMultiError(errors)
	}

	return nil
}

// CreateColumnReplyMultiError is an error wrapping multiple validation errors
// returned by CreateColumnReply.ValidateAll() if the designated constraints
// aren't met.
type CreateColumnReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateColumnReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateColumnReplyMultiError) AllErrors() []error { return m }

// CreateColumnReplyValidationError is the validation error returned by
// CreateColumnReply.Validate if the designated constraints aren't met.
type CreateColumnReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateColumnReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateColumnReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateColumnReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateColumnReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateColumnReplyValidationError) ErrorName() string {
	return "CreateColumnReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateColumnReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateColumnReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateColumnReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateColumnReplyValidationError{}

// Validate checks the field values on DescribeColumnListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeColumnListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeColumnListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeColumnListRequestMultiError, or nil if none found.
func (m *DescribeColumnListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeColumnListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for Category

	if m.GetPage() <= 0 {
		err := DescribeColumnListRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val > 100 {
		err := DescribeColumnListRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Valid != nil {
		// no validation rules for Valid
	}

	if len(errors) > 0 {
		return DescribeColumnListRequestMultiError(errors)
	}

	return nil
}

// DescribeColumnListRequestMultiError is an error wrapping multiple validation
// errors returned by DescribeColumnListRequest.ValidateAll() if the
// designated constraints aren't met.
type DescribeColumnListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeColumnListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeColumnListRequestMultiError) AllErrors() []error { return m }

// DescribeColumnListRequestValidationError is the validation error returned by
// DescribeColumnListRequest.Validate if the designated constraints aren't met.
type DescribeColumnListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeColumnListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeColumnListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeColumnListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeColumnListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeColumnListRequestValidationError) ErrorName() string {
	return "DescribeColumnListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeColumnListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeColumnListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeColumnListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeColumnListRequestValidationError{}

// Validate checks the field values on DescribeColumnListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeColumnListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeColumnListReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeColumnListReplyMultiError, or nil if none found.
func (m *DescribeColumnListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeColumnListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetColumns() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribeColumnListReplyValidationError{
						field:  fmt.Sprintf("Columns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribeColumnListReplyValidationError{
						field:  fmt.Sprintf("Columns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribeColumnListReplyValidationError{
					field:  fmt.Sprintf("Columns[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DescribeColumnListReplyMultiError(errors)
	}

	return nil
}

// DescribeColumnListReplyMultiError is an error wrapping multiple validation
// errors returned by DescribeColumnListReply.ValidateAll() if the designated
// constraints aren't met.
type DescribeColumnListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeColumnListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeColumnListReplyMultiError) AllErrors() []error { return m }

// DescribeColumnListReplyValidationError is the validation error returned by
// DescribeColumnListReply.Validate if the designated constraints aren't met.
type DescribeColumnListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeColumnListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeColumnListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeColumnListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeColumnListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeColumnListReplyValidationError) ErrorName() string {
	return "DescribeColumnListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeColumnListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeColumnListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeColumnListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeColumnListReplyValidationError{}

// Validate checks the field values on DescribeAllExtraDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeAllExtraDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeAllExtraDetailRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DescribeAllExtraDetailRequestMultiError, or nil if none found.
func (m *DescribeAllExtraDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeAllExtraDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if utf8.RuneCountInString(m.GetCoinID()) < 1 {
		err := DescribeAllExtraDetailRequestValidationError{
			field:  "CoinID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DescribeAllExtraDetailRequestMultiError(errors)
	}

	return nil
}

// DescribeAllExtraDetailRequestMultiError is an error wrapping multiple
// validation errors returned by DescribeAllExtraDetailRequest.ValidateAll()
// if the designated constraints aren't met.
type DescribeAllExtraDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeAllExtraDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeAllExtraDetailRequestMultiError) AllErrors() []error { return m }

// DescribeAllExtraDetailRequestValidationError is the validation error
// returned by DescribeAllExtraDetailRequest.Validate if the designated
// constraints aren't met.
type DescribeAllExtraDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeAllExtraDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeAllExtraDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeAllExtraDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeAllExtraDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeAllExtraDetailRequestValidationError) ErrorName() string {
	return "DescribeAllExtraDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeAllExtraDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeAllExtraDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeAllExtraDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeAllExtraDetailRequestValidationError{}

// Validate checks the field values on DescribeAllExtraDetailReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeAllExtraDetailReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeAllExtraDetailReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeAllExtraDetailReplyMultiError, or nil if none found.
func (m *DescribeAllExtraDetailReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeAllExtraDetailReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CoinID

	// no validation rules for GenesisDate

	// no validation rules for Desc

	if len(errors) > 0 {
		return DescribeAllExtraDetailReplyMultiError(errors)
	}

	return nil
}

// DescribeAllExtraDetailReplyMultiError is an error wrapping multiple
// validation errors returned by DescribeAllExtraDetailReply.ValidateAll() if
// the designated constraints aren't met.
type DescribeAllExtraDetailReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeAllExtraDetailReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeAllExtraDetailReplyMultiError) AllErrors() []error { return m }

// DescribeAllExtraDetailReplyValidationError is the validation error returned
// by DescribeAllExtraDetailReply.Validate if the designated constraints
// aren't met.
type DescribeAllExtraDetailReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeAllExtraDetailReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeAllExtraDetailReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeAllExtraDetailReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeAllExtraDetailReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeAllExtraDetailReplyValidationError) ErrorName() string {
	return "DescribeAllExtraDetailReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeAllExtraDetailReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeAllExtraDetailReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeAllExtraDetailReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeAllExtraDetailReplyValidationError{}

// Validate checks the field values on DescribeCategoryListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCategoryListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCategoryListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeCategoryListRequestMultiError, or nil if none found.
func (m *DescribeCategoryListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCategoryListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if len(errors) > 0 {
		return DescribeCategoryListRequestMultiError(errors)
	}

	return nil
}

// DescribeCategoryListRequestMultiError is an error wrapping multiple
// validation errors returned by DescribeCategoryListRequest.ValidateAll() if
// the designated constraints aren't met.
type DescribeCategoryListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCategoryListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCategoryListRequestMultiError) AllErrors() []error { return m }

// DescribeCategoryListRequestValidationError is the validation error returned
// by DescribeCategoryListRequest.Validate if the designated constraints
// aren't met.
type DescribeCategoryListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCategoryListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCategoryListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCategoryListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCategoryListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCategoryListRequestValidationError) ErrorName() string {
	return "DescribeCategoryListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCategoryListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCategoryListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCategoryListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCategoryListRequestValidationError{}

// Validate checks the field values on DescribeCategoryListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCategoryListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCategoryListReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeCategoryListReplyMultiError, or nil if none found.
func (m *DescribeCategoryListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCategoryListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DescribeCategoryListReplyMultiError(errors)
	}

	return nil
}

// DescribeCategoryListReplyMultiError is an error wrapping multiple validation
// errors returned by DescribeCategoryListReply.ValidateAll() if the
// designated constraints aren't met.
type DescribeCategoryListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCategoryListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCategoryListReplyMultiError) AllErrors() []error { return m }

// DescribeCategoryListReplyValidationError is the validation error returned by
// DescribeCategoryListReply.Validate if the designated constraints aren't met.
type DescribeCategoryListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCategoryListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCategoryListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCategoryListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCategoryListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCategoryListReplyValidationError) ErrorName() string {
	return "DescribeCategoryListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCategoryListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCategoryListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCategoryListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCategoryListReplyValidationError{}

// Validate checks the field values on ModifyMenuCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ModifyMenuCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModifyMenuCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ModifyMenuCategoryRequestMultiError, or nil if none found.
func (m *ModifyMenuCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ModifyMenuCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if _, ok := _ModifyMenuCategoryRequest_Type_InLookup[m.GetType()]; !ok {
		err := ModifyMenuCategoryRequestValidationError{
			field:  "Type",
			reason: "value must be in list [1 2]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ModifyMenuCategoryRequestMultiError(errors)
	}

	return nil
}

// ModifyMenuCategoryRequestMultiError is an error wrapping multiple validation
// errors returned by ModifyMenuCategoryRequest.ValidateAll() if the
// designated constraints aren't met.
type ModifyMenuCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModifyMenuCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModifyMenuCategoryRequestMultiError) AllErrors() []error { return m }

// ModifyMenuCategoryRequestValidationError is the validation error returned by
// ModifyMenuCategoryRequest.Validate if the designated constraints aren't met.
type ModifyMenuCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModifyMenuCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModifyMenuCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModifyMenuCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModifyMenuCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModifyMenuCategoryRequestValidationError) ErrorName() string {
	return "ModifyMenuCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ModifyMenuCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModifyMenuCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModifyMenuCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModifyMenuCategoryRequestValidationError{}

var _ModifyMenuCategoryRequest_Type_InLookup = map[int32]struct{}{
	1: {},
	2: {},
}

// Validate checks the field values on ModifyMenuCategoryReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ModifyMenuCategoryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModifyMenuCategoryReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ModifyMenuCategoryReplyMultiError, or nil if none found.
func (m *ModifyMenuCategoryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ModifyMenuCategoryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for EventId

	if len(errors) > 0 {
		return ModifyMenuCategoryReplyMultiError(errors)
	}

	return nil
}

// ModifyMenuCategoryReplyMultiError is an error wrapping multiple validation
// errors returned by ModifyMenuCategoryReply.ValidateAll() if the designated
// constraints aren't met.
type ModifyMenuCategoryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModifyMenuCategoryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModifyMenuCategoryReplyMultiError) AllErrors() []error { return m }

// ModifyMenuCategoryReplyValidationError is the validation error returned by
// ModifyMenuCategoryReply.Validate if the designated constraints aren't met.
type ModifyMenuCategoryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModifyMenuCategoryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModifyMenuCategoryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModifyMenuCategoryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModifyMenuCategoryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModifyMenuCategoryReplyValidationError) ErrorName() string {
	return "ModifyMenuCategoryReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ModifyMenuCategoryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModifyMenuCategoryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModifyMenuCategoryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModifyMenuCategoryReplyValidationError{}

// Validate checks the field values on CreateCoinCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCoinCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCoinCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCoinCategoryRequestMultiError, or nil if none found.
func (m *CreateCoinCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCoinCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if utf8.RuneCountInString(m.GetCategory()) < 1 {
		err := CreateCoinCategoryRequestValidationError{
			field:  "Category",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateCoinCategoryRequestMultiError(errors)
	}

	return nil
}

// CreateCoinCategoryRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCoinCategoryRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateCoinCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCoinCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCoinCategoryRequestMultiError) AllErrors() []error { return m }

// CreateCoinCategoryRequestValidationError is the validation error returned by
// CreateCoinCategoryRequest.Validate if the designated constraints aren't met.
type CreateCoinCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCoinCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCoinCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCoinCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCoinCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCoinCategoryRequestValidationError) ErrorName() string {
	return "CreateCoinCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCoinCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCoinCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCoinCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCoinCategoryRequestValidationError{}

// Validate checks the field values on CreateCoinCategoryReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCoinCategoryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCoinCategoryReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCoinCategoryReplyMultiError, or nil if none found.
func (m *CreateCoinCategoryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCoinCategoryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for EventId

	if len(errors) > 0 {
		return CreateCoinCategoryReplyMultiError(errors)
	}

	return nil
}

// CreateCoinCategoryReplyMultiError is an error wrapping multiple validation
// errors returned by CreateCoinCategoryReply.ValidateAll() if the designated
// constraints aren't met.
type CreateCoinCategoryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCoinCategoryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCoinCategoryReplyMultiError) AllErrors() []error { return m }

// CreateCoinCategoryReplyValidationError is the validation error returned by
// CreateCoinCategoryReply.Validate if the designated constraints aren't met.
type CreateCoinCategoryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCoinCategoryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCoinCategoryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCoinCategoryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCoinCategoryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCoinCategoryReplyValidationError) ErrorName() string {
	return "CreateCoinCategoryReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCoinCategoryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCoinCategoryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCoinCategoryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCoinCategoryReplyValidationError{}

// Validate checks the field values on ModifyCoinDescriptionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ModifyCoinDescriptionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModifyCoinDescriptionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ModifyCoinDescriptionRequestMultiError, or nil if none found.
func (m *ModifyCoinDescriptionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ModifyCoinDescriptionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if utf8.RuneCountInString(m.GetCoinID()) < 1 {
		err := ModifyCoinDescriptionRequestValidationError{
			field:  "CoinID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Desc

	if len(errors) > 0 {
		return ModifyCoinDescriptionRequestMultiError(errors)
	}

	return nil
}

// ModifyCoinDescriptionRequestMultiError is an error wrapping multiple
// validation errors returned by ModifyCoinDescriptionRequest.ValidateAll() if
// the designated constraints aren't met.
type ModifyCoinDescriptionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModifyCoinDescriptionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModifyCoinDescriptionRequestMultiError) AllErrors() []error { return m }

// ModifyCoinDescriptionRequestValidationError is the validation error returned
// by ModifyCoinDescriptionRequest.Validate if the designated constraints
// aren't met.
type ModifyCoinDescriptionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModifyCoinDescriptionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModifyCoinDescriptionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModifyCoinDescriptionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModifyCoinDescriptionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModifyCoinDescriptionRequestValidationError) ErrorName() string {
	return "ModifyCoinDescriptionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ModifyCoinDescriptionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModifyCoinDescriptionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModifyCoinDescriptionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModifyCoinDescriptionRequestValidationError{}

// Validate checks the field values on ModifyCoinDescriptionReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ModifyCoinDescriptionReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModifyCoinDescriptionReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ModifyCoinDescriptionReplyMultiError, or nil if none found.
func (m *ModifyCoinDescriptionReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ModifyCoinDescriptionReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for EventId

	// no validation rules for CoinID

	if len(errors) > 0 {
		return ModifyCoinDescriptionReplyMultiError(errors)
	}

	return nil
}

// ModifyCoinDescriptionReplyMultiError is an error wrapping multiple
// validation errors returned by ModifyCoinDescriptionReply.ValidateAll() if
// the designated constraints aren't met.
type ModifyCoinDescriptionReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModifyCoinDescriptionReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModifyCoinDescriptionReplyMultiError) AllErrors() []error { return m }

// ModifyCoinDescriptionReplyValidationError is the validation error returned
// by ModifyCoinDescriptionReply.Validate if the designated constraints aren't met.
type ModifyCoinDescriptionReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModifyCoinDescriptionReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModifyCoinDescriptionReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModifyCoinDescriptionReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModifyCoinDescriptionReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModifyCoinDescriptionReplyValidationError) ErrorName() string {
	return "ModifyCoinDescriptionReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ModifyCoinDescriptionReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModifyCoinDescriptionReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModifyCoinDescriptionReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModifyCoinDescriptionReplyValidationError{}

// Validate checks the field values on DescribeCexCoinsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCexCoinsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCexCoinsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeCexCoinsRequestMultiError, or nil if none found.
func (m *DescribeCexCoinsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCexCoinsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if utf8.RuneCountInString(m.GetCurrency()) < 1 {
		err := DescribeCexCoinsRequestValidationError{
			field:  "Currency",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPage() <= 0 {
		err := DescribeCexCoinsRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val > 100 {
		err := DescribeCexCoinsRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := DescribeCexCoinsRequest_SortFieldEnum_name[int32(m.GetSortField())]; !ok {
		err := DescribeCexCoinsRequestValidationError{
			field:  "SortField",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for SortType

	// no validation rules for ColumnID

	if m.Category != nil {

		if utf8.RuneCountInString(m.GetCategory()) < 1 {
			err := DescribeCexCoinsRequestValidationError{
				field:  "Category",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return DescribeCexCoinsRequestMultiError(errors)
	}

	return nil
}

// DescribeCexCoinsRequestMultiError is an error wrapping multiple validation
// errors returned by DescribeCexCoinsRequest.ValidateAll() if the designated
// constraints aren't met.
type DescribeCexCoinsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCexCoinsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCexCoinsRequestMultiError) AllErrors() []error { return m }

// DescribeCexCoinsRequestValidationError is the validation error returned by
// DescribeCexCoinsRequest.Validate if the designated constraints aren't met.
type DescribeCexCoinsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCexCoinsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCexCoinsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCexCoinsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCexCoinsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCexCoinsRequestValidationError) ErrorName() string {
	return "DescribeCexCoinsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCexCoinsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCexCoinsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCexCoinsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCexCoinsRequestValidationError{}

// Validate checks the field values on DescribeCexCoinsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCexCoinsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCexCoinsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeCexCoinsReplyMultiError, or nil if none found.
func (m *DescribeCexCoinsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCexCoinsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCoins() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribeCexCoinsReplyValidationError{
						field:  fmt.Sprintf("Coins[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribeCexCoinsReplyValidationError{
						field:  fmt.Sprintf("Coins[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribeCexCoinsReplyValidationError{
					field:  fmt.Sprintf("Coins[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return DescribeCexCoinsReplyMultiError(errors)
	}

	return nil
}

// DescribeCexCoinsReplyMultiError is an error wrapping multiple validation
// errors returned by DescribeCexCoinsReply.ValidateAll() if the designated
// constraints aren't met.
type DescribeCexCoinsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCexCoinsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCexCoinsReplyMultiError) AllErrors() []error { return m }

// DescribeCexCoinsReplyValidationError is the validation error returned by
// DescribeCexCoinsReply.Validate if the designated constraints aren't met.
type DescribeCexCoinsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCexCoinsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCexCoinsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCexCoinsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCexCoinsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCexCoinsReplyValidationError) ErrorName() string {
	return "DescribeCexCoinsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCexCoinsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCexCoinsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCexCoinsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCexCoinsReplyValidationError{}

// Validate checks the field values on ModifyCoinCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ModifyCoinCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModifyCoinCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ModifyCoinCategoryRequestMultiError, or nil if none found.
func (m *ModifyCoinCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ModifyCoinCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if utf8.RuneCountInString(m.GetCoinID()) < 1 {
		err := ModifyCoinCategoryRequestValidationError{
			field:  "CoinID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _ModifyCoinCategoryRequest_Type_InLookup[m.GetType()]; !ok {
		err := ModifyCoinCategoryRequestValidationError{
			field:  "Type",
			reason: "value must be in list [1 2]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ModifyCoinCategoryRequestMultiError(errors)
	}

	return nil
}

// ModifyCoinCategoryRequestMultiError is an error wrapping multiple validation
// errors returned by ModifyCoinCategoryRequest.ValidateAll() if the
// designated constraints aren't met.
type ModifyCoinCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModifyCoinCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModifyCoinCategoryRequestMultiError) AllErrors() []error { return m }

// ModifyCoinCategoryRequestValidationError is the validation error returned by
// ModifyCoinCategoryRequest.Validate if the designated constraints aren't met.
type ModifyCoinCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModifyCoinCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModifyCoinCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModifyCoinCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModifyCoinCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModifyCoinCategoryRequestValidationError) ErrorName() string {
	return "ModifyCoinCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ModifyCoinCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModifyCoinCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModifyCoinCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModifyCoinCategoryRequestValidationError{}

var _ModifyCoinCategoryRequest_Type_InLookup = map[int32]struct{}{
	1: {},
	2: {},
}

// Validate checks the field values on ModifyCoinCategoryReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ModifyCoinCategoryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModifyCoinCategoryReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ModifyCoinCategoryReplyMultiError, or nil if none found.
func (m *ModifyCoinCategoryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ModifyCoinCategoryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for EventId

	// no validation rules for CoinID

	if len(errors) > 0 {
		return ModifyCoinCategoryReplyMultiError(errors)
	}

	return nil
}

// ModifyCoinCategoryReplyMultiError is an error wrapping multiple validation
// errors returned by ModifyCoinCategoryReply.ValidateAll() if the designated
// constraints aren't met.
type ModifyCoinCategoryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModifyCoinCategoryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModifyCoinCategoryReplyMultiError) AllErrors() []error { return m }

// ModifyCoinCategoryReplyValidationError is the validation error returned by
// ModifyCoinCategoryReply.Validate if the designated constraints aren't met.
type ModifyCoinCategoryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModifyCoinCategoryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModifyCoinCategoryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModifyCoinCategoryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModifyCoinCategoryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModifyCoinCategoryReplyValidationError) ErrorName() string {
	return "ModifyCoinCategoryReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ModifyCoinCategoryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModifyCoinCategoryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModifyCoinCategoryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModifyCoinCategoryReplyValidationError{}

// Validate checks the field values on DescribeMenuCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeMenuCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeMenuCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeMenuCategoryRequestMultiError, or nil if none found.
func (m *DescribeMenuCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeMenuCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if _, ok := _DescribeMenuCategoryRequest_Type_InLookup[m.GetType()]; !ok {
		err := DescribeMenuCategoryRequestValidationError{
			field:  "Type",
			reason: "value must be in list [1 2]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DescribeMenuCategoryRequestMultiError(errors)
	}

	return nil
}

// DescribeMenuCategoryRequestMultiError is an error wrapping multiple
// validation errors returned by DescribeMenuCategoryRequest.ValidateAll() if
// the designated constraints aren't met.
type DescribeMenuCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeMenuCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeMenuCategoryRequestMultiError) AllErrors() []error { return m }

// DescribeMenuCategoryRequestValidationError is the validation error returned
// by DescribeMenuCategoryRequest.Validate if the designated constraints
// aren't met.
type DescribeMenuCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeMenuCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeMenuCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeMenuCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeMenuCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeMenuCategoryRequestValidationError) ErrorName() string {
	return "DescribeMenuCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeMenuCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeMenuCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeMenuCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeMenuCategoryRequestValidationError{}

var _DescribeMenuCategoryRequest_Type_InLookup = map[int32]struct{}{
	1: {},
	2: {},
}

// Validate checks the field values on DescribeMenuCategoryReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeMenuCategoryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeMenuCategoryReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeMenuCategoryReplyMultiError, or nil if none found.
func (m *DescribeMenuCategoryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeMenuCategoryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DescribeMenuCategoryReplyMultiError(errors)
	}

	return nil
}

// DescribeMenuCategoryReplyMultiError is an error wrapping multiple validation
// errors returned by DescribeMenuCategoryReply.ValidateAll() if the
// designated constraints aren't met.
type DescribeMenuCategoryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeMenuCategoryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeMenuCategoryReplyMultiError) AllErrors() []error { return m }

// DescribeMenuCategoryReplyValidationError is the validation error returned by
// DescribeMenuCategoryReply.Validate if the designated constraints aren't met.
type DescribeMenuCategoryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeMenuCategoryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeMenuCategoryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeMenuCategoryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeMenuCategoryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeMenuCategoryReplyValidationError) ErrorName() string {
	return "DescribeMenuCategoryReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeMenuCategoryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeMenuCategoryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeMenuCategoryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeMenuCategoryReplyValidationError{}

// Validate checks the field values on DescribeMarketExtraDetailRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DescribeMarketExtraDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeMarketExtraDetailRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DescribeMarketExtraDetailRequestMultiError, or nil if none found.
func (m *DescribeMarketExtraDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeMarketExtraDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if utf8.RuneCountInString(m.GetCurrency()) < 1 {
		err := DescribeMarketExtraDetailRequestValidationError{
			field:  "Currency",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCoinID()) < 1 {
		err := DescribeMarketExtraDetailRequestValidationError{
			field:  "CoinID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetLang()) < 1 {
		err := DescribeMarketExtraDetailRequestValidationError{
			field:  "Lang",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DescribeMarketExtraDetailRequestMultiError(errors)
	}

	return nil
}

// DescribeMarketExtraDetailRequestMultiError is an error wrapping multiple
// validation errors returned by
// DescribeMarketExtraDetailRequest.ValidateAll() if the designated
// constraints aren't met.
type DescribeMarketExtraDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeMarketExtraDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeMarketExtraDetailRequestMultiError) AllErrors() []error { return m }

// DescribeMarketExtraDetailRequestValidationError is the validation error
// returned by DescribeMarketExtraDetailRequest.Validate if the designated
// constraints aren't met.
type DescribeMarketExtraDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeMarketExtraDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeMarketExtraDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeMarketExtraDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeMarketExtraDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeMarketExtraDetailRequestValidationError) ErrorName() string {
	return "DescribeMarketExtraDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeMarketExtraDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeMarketExtraDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeMarketExtraDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeMarketExtraDetailRequestValidationError{}

// Validate checks the field values on DescribeMarketExtraDetailReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeMarketExtraDetailReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeMarketExtraDetailReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DescribeMarketExtraDetailReplyMultiError, or nil if none found.
func (m *DescribeMarketExtraDetailReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeMarketExtraDetailReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CoinID

	// no validation rules for GenesisDate

	// no validation rules for Description

	for idx, item := range m.GetChainAddress() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribeMarketExtraDetailReplyValidationError{
						field:  fmt.Sprintf("ChainAddress[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribeMarketExtraDetailReplyValidationError{
						field:  fmt.Sprintf("ChainAddress[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribeMarketExtraDetailReplyValidationError{
					field:  fmt.Sprintf("ChainAddress[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetSocialLink()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DescribeMarketExtraDetailReplyValidationError{
					field:  "SocialLink",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DescribeMarketExtraDetailReplyValidationError{
					field:  "SocialLink",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSocialLink()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeMarketExtraDetailReplyValidationError{
				field:  "SocialLink",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DescribeMarketExtraDetailReplyMultiError(errors)
	}

	return nil
}

// DescribeMarketExtraDetailReplyMultiError is an error wrapping multiple
// validation errors returned by DescribeMarketExtraDetailReply.ValidateAll()
// if the designated constraints aren't met.
type DescribeMarketExtraDetailReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeMarketExtraDetailReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeMarketExtraDetailReplyMultiError) AllErrors() []error { return m }

// DescribeMarketExtraDetailReplyValidationError is the validation error
// returned by DescribeMarketExtraDetailReply.Validate if the designated
// constraints aren't met.
type DescribeMarketExtraDetailReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeMarketExtraDetailReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeMarketExtraDetailReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeMarketExtraDetailReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeMarketExtraDetailReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeMarketExtraDetailReplyValidationError) ErrorName() string {
	return "DescribeMarketExtraDetailReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeMarketExtraDetailReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeMarketExtraDetailReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeMarketExtraDetailReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeMarketExtraDetailReplyValidationError{}

// Validate checks the field values on DescribeCoinPriceChartRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCoinPriceChartRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCoinPriceChartRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DescribeCoinPriceChartRequestMultiError, or nil if none found.
func (m *DescribeCoinPriceChartRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinPriceChartRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if utf8.RuneCountInString(m.GetCoinID()) < 1 {
		err := DescribeCoinPriceChartRequestValidationError{
			field:  "CoinID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetVsCurrency()) < 1 {
		err := DescribeCoinPriceChartRequestValidationError{
			field:  "VsCurrency",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetDays(); val <= 0 || val > 11430 {
		err := DescribeCoinPriceChartRequestValidationError{
			field:  "Days",
			reason: "value must be inside range (0, 11430]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DescribeCoinPriceChartRequestMultiError(errors)
	}

	return nil
}

// DescribeCoinPriceChartRequestMultiError is an error wrapping multiple
// validation errors returned by DescribeCoinPriceChartRequest.ValidateAll()
// if the designated constraints aren't met.
type DescribeCoinPriceChartRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinPriceChartRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinPriceChartRequestMultiError) AllErrors() []error { return m }

// DescribeCoinPriceChartRequestValidationError is the validation error
// returned by DescribeCoinPriceChartRequest.Validate if the designated
// constraints aren't met.
type DescribeCoinPriceChartRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinPriceChartRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinPriceChartRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinPriceChartRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinPriceChartRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinPriceChartRequestValidationError) ErrorName() string {
	return "DescribeCoinPriceChartRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinPriceChartRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinPriceChartRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinPriceChartRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinPriceChartRequestValidationError{}

// Validate checks the field values on DescribeCoinPriceChartReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCoinPriceChartReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCoinPriceChartReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeCoinPriceChartReplyMultiError, or nil if none found.
func (m *DescribeCoinPriceChartReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinPriceChartReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPrices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribeCoinPriceChartReplyValidationError{
						field:  fmt.Sprintf("Prices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribeCoinPriceChartReplyValidationError{
						field:  fmt.Sprintf("Prices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribeCoinPriceChartReplyValidationError{
					field:  fmt.Sprintf("Prices[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetMarketCaps() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribeCoinPriceChartReplyValidationError{
						field:  fmt.Sprintf("MarketCaps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribeCoinPriceChartReplyValidationError{
						field:  fmt.Sprintf("MarketCaps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribeCoinPriceChartReplyValidationError{
					field:  fmt.Sprintf("MarketCaps[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetTotalVolumes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribeCoinPriceChartReplyValidationError{
						field:  fmt.Sprintf("TotalVolumes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribeCoinPriceChartReplyValidationError{
						field:  fmt.Sprintf("TotalVolumes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribeCoinPriceChartReplyValidationError{
					field:  fmt.Sprintf("TotalVolumes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DescribeCoinPriceChartReplyMultiError(errors)
	}

	return nil
}

// DescribeCoinPriceChartReplyMultiError is an error wrapping multiple
// validation errors returned by DescribeCoinPriceChartReply.ValidateAll() if
// the designated constraints aren't met.
type DescribeCoinPriceChartReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinPriceChartReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinPriceChartReplyMultiError) AllErrors() []error { return m }

// DescribeCoinPriceChartReplyValidationError is the validation error returned
// by DescribeCoinPriceChartReply.Validate if the designated constraints
// aren't met.
type DescribeCoinPriceChartReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinPriceChartReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinPriceChartReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinPriceChartReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinPriceChartReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinPriceChartReplyValidationError) ErrorName() string {
	return "DescribeCoinPriceChartReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinPriceChartReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinPriceChartReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinPriceChartReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinPriceChartReplyValidationError{}

// Validate checks the field values on DescribeCoinSwapsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCoinSwapsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCoinSwapsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeCoinSwapsRequestMultiError, or nil if none found.
func (m *DescribeCoinSwapsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinSwapsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if utf8.RuneCountInString(m.GetCoinID()) < 1 {
		err := DescribeCoinSwapsRequestValidationError{
			field:  "CoinID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCurrency()) < 1 {
		err := DescribeCoinSwapsRequestValidationError{
			field:  "Currency",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for BeginTimestamp

	// no validation rules for EndTimestamp

	if m.GetPage() <= 0 {
		err := DescribeCoinSwapsRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val > 500 {
		err := DescribeCoinSwapsRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 500]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DescribeCoinSwapsRequestMultiError(errors)
	}

	return nil
}

// DescribeCoinSwapsRequestMultiError is an error wrapping multiple validation
// errors returned by DescribeCoinSwapsRequest.ValidateAll() if the designated
// constraints aren't met.
type DescribeCoinSwapsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinSwapsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinSwapsRequestMultiError) AllErrors() []error { return m }

// DescribeCoinSwapsRequestValidationError is the validation error returned by
// DescribeCoinSwapsRequest.Validate if the designated constraints aren't met.
type DescribeCoinSwapsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinSwapsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinSwapsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinSwapsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinSwapsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinSwapsRequestValidationError) ErrorName() string {
	return "DescribeCoinSwapsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinSwapsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinSwapsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinSwapsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinSwapsRequestValidationError{}

// Validate checks the field values on DescribeCoinSwapsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCoinSwapsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCoinSwapsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeCoinSwapsReplyMultiError, or nil if none found.
func (m *DescribeCoinSwapsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinSwapsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSwaps() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribeCoinSwapsReplyValidationError{
						field:  fmt.Sprintf("Swaps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribeCoinSwapsReplyValidationError{
						field:  fmt.Sprintf("Swaps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribeCoinSwapsReplyValidationError{
					field:  fmt.Sprintf("Swaps[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return DescribeCoinSwapsReplyMultiError(errors)
	}

	return nil
}

// DescribeCoinSwapsReplyMultiError is an error wrapping multiple validation
// errors returned by DescribeCoinSwapsReply.ValidateAll() if the designated
// constraints aren't met.
type DescribeCoinSwapsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinSwapsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinSwapsReplyMultiError) AllErrors() []error { return m }

// DescribeCoinSwapsReplyValidationError is the validation error returned by
// DescribeCoinSwapsReply.Validate if the designated constraints aren't met.
type DescribeCoinSwapsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinSwapsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinSwapsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinSwapsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinSwapsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinSwapsReplyValidationError) ErrorName() string {
	return "DescribeCoinSwapsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinSwapsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinSwapsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinSwapsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinSwapsReplyValidationError{}

// Validate checks the field values on DescribeCoinLiquidityRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCoinLiquidityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCoinLiquidityRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeCoinLiquidityRequestMultiError, or nil if none found.
func (m *DescribeCoinLiquidityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinLiquidityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if utf8.RuneCountInString(m.GetCoinID()) < 1 {
		err := DescribeCoinLiquidityRequestValidationError{
			field:  "CoinID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCurrency()) < 1 {
		err := DescribeCoinLiquidityRequestValidationError{
			field:  "Currency",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for BeginTimestamp

	// no validation rules for EndTimestamp

	if m.GetPage() <= 0 {
		err := DescribeCoinLiquidityRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val > 500 {
		err := DescribeCoinLiquidityRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 500]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DescribeCoinLiquidityRequestMultiError(errors)
	}

	return nil
}

// DescribeCoinLiquidityRequestMultiError is an error wrapping multiple
// validation errors returned by DescribeCoinLiquidityRequest.ValidateAll() if
// the designated constraints aren't met.
type DescribeCoinLiquidityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinLiquidityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinLiquidityRequestMultiError) AllErrors() []error { return m }

// DescribeCoinLiquidityRequestValidationError is the validation error returned
// by DescribeCoinLiquidityRequest.Validate if the designated constraints
// aren't met.
type DescribeCoinLiquidityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinLiquidityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinLiquidityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinLiquidityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinLiquidityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinLiquidityRequestValidationError) ErrorName() string {
	return "DescribeCoinLiquidityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinLiquidityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinLiquidityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinLiquidityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinLiquidityRequestValidationError{}

// Validate checks the field values on DescribeCoinLiquidityReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCoinLiquidityReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCoinLiquidityReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeCoinLiquidityReplyMultiError, or nil if none found.
func (m *DescribeCoinLiquidityReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinLiquidityReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLiquidity() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribeCoinLiquidityReplyValidationError{
						field:  fmt.Sprintf("Liquidity[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribeCoinLiquidityReplyValidationError{
						field:  fmt.Sprintf("Liquidity[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribeCoinLiquidityReplyValidationError{
					field:  fmt.Sprintf("Liquidity[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return DescribeCoinLiquidityReplyMultiError(errors)
	}

	return nil
}

// DescribeCoinLiquidityReplyMultiError is an error wrapping multiple
// validation errors returned by DescribeCoinLiquidityReply.ValidateAll() if
// the designated constraints aren't met.
type DescribeCoinLiquidityReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinLiquidityReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinLiquidityReplyMultiError) AllErrors() []error { return m }

// DescribeCoinLiquidityReplyValidationError is the validation error returned
// by DescribeCoinLiquidityReply.Validate if the designated constraints aren't met.
type DescribeCoinLiquidityReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinLiquidityReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinLiquidityReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinLiquidityReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinLiquidityReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinLiquidityReplyValidationError) ErrorName() string {
	return "DescribeCoinLiquidityReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinLiquidityReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinLiquidityReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinLiquidityReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinLiquidityReplyValidationError{}

// Validate checks the field values on DescribeCoinLiquidityChartRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DescribeCoinLiquidityChartRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCoinLiquidityChartRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DescribeCoinLiquidityChartRequestMultiError, or nil if none found.
func (m *DescribeCoinLiquidityChartRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinLiquidityChartRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if utf8.RuneCountInString(m.GetCoinID()) < 1 {
		err := DescribeCoinLiquidityChartRequestValidationError{
			field:  "CoinID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCurrency()) < 1 {
		err := DescribeCoinLiquidityChartRequestValidationError{
			field:  "Currency",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetDays(); val <= 0 || val > 11430 {
		err := DescribeCoinLiquidityChartRequestValidationError{
			field:  "Days",
			reason: "value must be inside range (0, 11430]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DescribeCoinLiquidityChartRequestMultiError(errors)
	}

	return nil
}

// DescribeCoinLiquidityChartRequestMultiError is an error wrapping multiple
// validation errors returned by
// DescribeCoinLiquidityChartRequest.ValidateAll() if the designated
// constraints aren't met.
type DescribeCoinLiquidityChartRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinLiquidityChartRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinLiquidityChartRequestMultiError) AllErrors() []error { return m }

// DescribeCoinLiquidityChartRequestValidationError is the validation error
// returned by DescribeCoinLiquidityChartRequest.Validate if the designated
// constraints aren't met.
type DescribeCoinLiquidityChartRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinLiquidityChartRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinLiquidityChartRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinLiquidityChartRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinLiquidityChartRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinLiquidityChartRequestValidationError) ErrorName() string {
	return "DescribeCoinLiquidityChartRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinLiquidityChartRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinLiquidityChartRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinLiquidityChartRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinLiquidityChartRequestValidationError{}

// Validate checks the field values on DescribeCoinLiquidityChartReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCoinLiquidityChartReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCoinLiquidityChartReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DescribeCoinLiquidityChartReplyMultiError, or nil if none found.
func (m *DescribeCoinLiquidityChartReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinLiquidityChartReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLiquidity() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribeCoinLiquidityChartReplyValidationError{
						field:  fmt.Sprintf("Liquidity[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribeCoinLiquidityChartReplyValidationError{
						field:  fmt.Sprintf("Liquidity[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribeCoinLiquidityChartReplyValidationError{
					field:  fmt.Sprintf("Liquidity[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DescribeCoinLiquidityChartReplyMultiError(errors)
	}

	return nil
}

// DescribeCoinLiquidityChartReplyMultiError is an error wrapping multiple
// validation errors returned by DescribeCoinLiquidityChartReply.ValidateAll()
// if the designated constraints aren't met.
type DescribeCoinLiquidityChartReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinLiquidityChartReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinLiquidityChartReplyMultiError) AllErrors() []error { return m }

// DescribeCoinLiquidityChartReplyValidationError is the validation error
// returned by DescribeCoinLiquidityChartReply.Validate if the designated
// constraints aren't met.
type DescribeCoinLiquidityChartReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinLiquidityChartReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinLiquidityChartReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinLiquidityChartReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinLiquidityChartReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinLiquidityChartReplyValidationError) ErrorName() string {
	return "DescribeCoinLiquidityChartReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinLiquidityChartReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinLiquidityChartReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinLiquidityChartReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinLiquidityChartReplyValidationError{}

// Validate checks the field values on DescribeCoinUserChartRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCoinUserChartRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCoinUserChartRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeCoinUserChartRequestMultiError, or nil if none found.
func (m *DescribeCoinUserChartRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinUserChartRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if utf8.RuneCountInString(m.GetCoinID()) < 1 {
		err := DescribeCoinUserChartRequestValidationError{
			field:  "CoinID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetDays(); val <= 0 || val > 11430 {
		err := DescribeCoinUserChartRequestValidationError{
			field:  "Days",
			reason: "value must be inside range (0, 11430]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DescribeCoinUserChartRequestMultiError(errors)
	}

	return nil
}

// DescribeCoinUserChartRequestMultiError is an error wrapping multiple
// validation errors returned by DescribeCoinUserChartRequest.ValidateAll() if
// the designated constraints aren't met.
type DescribeCoinUserChartRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinUserChartRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinUserChartRequestMultiError) AllErrors() []error { return m }

// DescribeCoinUserChartRequestValidationError is the validation error returned
// by DescribeCoinUserChartRequest.Validate if the designated constraints
// aren't met.
type DescribeCoinUserChartRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinUserChartRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinUserChartRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinUserChartRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinUserChartRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinUserChartRequestValidationError) ErrorName() string {
	return "DescribeCoinUserChartRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinUserChartRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinUserChartRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinUserChartRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinUserChartRequestValidationError{}

// Validate checks the field values on DescribeCoinUserChartReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCoinUserChartReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCoinUserChartReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeCoinUserChartReplyMultiError, or nil if none found.
func (m *DescribeCoinUserChartReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinUserChartReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribeCoinUserChartReplyValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribeCoinUserChartReplyValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribeCoinUserChartReplyValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DescribeCoinUserChartReplyMultiError(errors)
	}

	return nil
}

// DescribeCoinUserChartReplyMultiError is an error wrapping multiple
// validation errors returned by DescribeCoinUserChartReply.ValidateAll() if
// the designated constraints aren't met.
type DescribeCoinUserChartReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinUserChartReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinUserChartReplyMultiError) AllErrors() []error { return m }

// DescribeCoinUserChartReplyValidationError is the validation error returned
// by DescribeCoinUserChartReply.Validate if the designated constraints aren't met.
type DescribeCoinUserChartReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinUserChartReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinUserChartReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinUserChartReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinUserChartReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinUserChartReplyValidationError) ErrorName() string {
	return "DescribeCoinUserChartReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinUserChartReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinUserChartReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinUserChartReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinUserChartReplyValidationError{}

// Validate checks the field values on DescribeCoinOrderChartRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCoinOrderChartRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCoinOrderChartRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DescribeCoinOrderChartRequestMultiError, or nil if none found.
func (m *DescribeCoinOrderChartRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinOrderChartRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if utf8.RuneCountInString(m.GetCoinID()) < 1 {
		err := DescribeCoinOrderChartRequestValidationError{
			field:  "CoinID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetDays(); val <= 0 || val > 11430 {
		err := DescribeCoinOrderChartRequestValidationError{
			field:  "Days",
			reason: "value must be inside range (0, 11430]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DescribeCoinOrderChartRequestMultiError(errors)
	}

	return nil
}

// DescribeCoinOrderChartRequestMultiError is an error wrapping multiple
// validation errors returned by DescribeCoinOrderChartRequest.ValidateAll()
// if the designated constraints aren't met.
type DescribeCoinOrderChartRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinOrderChartRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinOrderChartRequestMultiError) AllErrors() []error { return m }

// DescribeCoinOrderChartRequestValidationError is the validation error
// returned by DescribeCoinOrderChartRequest.Validate if the designated
// constraints aren't met.
type DescribeCoinOrderChartRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinOrderChartRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinOrderChartRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinOrderChartRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinOrderChartRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinOrderChartRequestValidationError) ErrorName() string {
	return "DescribeCoinOrderChartRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinOrderChartRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinOrderChartRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinOrderChartRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinOrderChartRequestValidationError{}

// Validate checks the field values on DescribeCoinOrderChartReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCoinOrderChartReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCoinOrderChartReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeCoinOrderChartReplyMultiError, or nil if none found.
func (m *DescribeCoinOrderChartReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinOrderChartReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribeCoinOrderChartReplyValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribeCoinOrderChartReplyValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribeCoinOrderChartReplyValidationError{
					field:  fmt.Sprintf("Orders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DescribeCoinOrderChartReplyMultiError(errors)
	}

	return nil
}

// DescribeCoinOrderChartReplyMultiError is an error wrapping multiple
// validation errors returned by DescribeCoinOrderChartReply.ValidateAll() if
// the designated constraints aren't met.
type DescribeCoinOrderChartReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinOrderChartReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinOrderChartReplyMultiError) AllErrors() []error { return m }

// DescribeCoinOrderChartReplyValidationError is the validation error returned
// by DescribeCoinOrderChartReply.Validate if the designated constraints
// aren't met.
type DescribeCoinOrderChartReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinOrderChartReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinOrderChartReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinOrderChartReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinOrderChartReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinOrderChartReplyValidationError) ErrorName() string {
	return "DescribeCoinOrderChartReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinOrderChartReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinOrderChartReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinOrderChartReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinOrderChartReplyValidationError{}

// Validate checks the field values on DescribeCoinVolumeChartRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCoinVolumeChartRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCoinVolumeChartRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DescribeCoinVolumeChartRequestMultiError, or nil if none found.
func (m *DescribeCoinVolumeChartRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinVolumeChartRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if utf8.RuneCountInString(m.GetCoinID()) < 1 {
		err := DescribeCoinVolumeChartRequestValidationError{
			field:  "CoinID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCurrency()) < 1 {
		err := DescribeCoinVolumeChartRequestValidationError{
			field:  "Currency",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetDays(); val <= 0 || val > 11430 {
		err := DescribeCoinVolumeChartRequestValidationError{
			field:  "Days",
			reason: "value must be inside range (0, 11430]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DescribeCoinVolumeChartRequestMultiError(errors)
	}

	return nil
}

// DescribeCoinVolumeChartRequestMultiError is an error wrapping multiple
// validation errors returned by DescribeCoinVolumeChartRequest.ValidateAll()
// if the designated constraints aren't met.
type DescribeCoinVolumeChartRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinVolumeChartRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinVolumeChartRequestMultiError) AllErrors() []error { return m }

// DescribeCoinVolumeChartRequestValidationError is the validation error
// returned by DescribeCoinVolumeChartRequest.Validate if the designated
// constraints aren't met.
type DescribeCoinVolumeChartRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinVolumeChartRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinVolumeChartRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinVolumeChartRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinVolumeChartRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinVolumeChartRequestValidationError) ErrorName() string {
	return "DescribeCoinVolumeChartRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinVolumeChartRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinVolumeChartRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinVolumeChartRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinVolumeChartRequestValidationError{}

// Validate checks the field values on DescribeCoinVolumeChartReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCoinVolumeChartReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCoinVolumeChartReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeCoinVolumeChartReplyMultiError, or nil if none found.
func (m *DescribeCoinVolumeChartReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinVolumeChartReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetVolumes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribeCoinVolumeChartReplyValidationError{
						field:  fmt.Sprintf("Volumes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribeCoinVolumeChartReplyValidationError{
						field:  fmt.Sprintf("Volumes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribeCoinVolumeChartReplyValidationError{
					field:  fmt.Sprintf("Volumes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DescribeCoinVolumeChartReplyMultiError(errors)
	}

	return nil
}

// DescribeCoinVolumeChartReplyMultiError is an error wrapping multiple
// validation errors returned by DescribeCoinVolumeChartReply.ValidateAll() if
// the designated constraints aren't met.
type DescribeCoinVolumeChartReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinVolumeChartReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinVolumeChartReplyMultiError) AllErrors() []error { return m }

// DescribeCoinVolumeChartReplyValidationError is the validation error returned
// by DescribeCoinVolumeChartReply.Validate if the designated constraints
// aren't met.
type DescribeCoinVolumeChartReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinVolumeChartReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinVolumeChartReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinVolumeChartReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinVolumeChartReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinVolumeChartReplyValidationError) ErrorName() string {
	return "DescribeCoinVolumeChartReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinVolumeChartReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinVolumeChartReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinVolumeChartReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinVolumeChartReplyValidationError{}

// Validate checks the field values on DescribeCoinSwapStatsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCoinSwapStatsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCoinSwapStatsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeCoinSwapStatsRequestMultiError, or nil if none found.
func (m *DescribeCoinSwapStatsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinSwapStatsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if utf8.RuneCountInString(m.GetCoinID()) < 1 {
		err := DescribeCoinSwapStatsRequestValidationError{
			field:  "CoinID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCurrency()) < 1 {
		err := DescribeCoinSwapStatsRequestValidationError{
			field:  "Currency",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DescribeCoinSwapStatsRequestMultiError(errors)
	}

	return nil
}

// DescribeCoinSwapStatsRequestMultiError is an error wrapping multiple
// validation errors returned by DescribeCoinSwapStatsRequest.ValidateAll() if
// the designated constraints aren't met.
type DescribeCoinSwapStatsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinSwapStatsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinSwapStatsRequestMultiError) AllErrors() []error { return m }

// DescribeCoinSwapStatsRequestValidationError is the validation error returned
// by DescribeCoinSwapStatsRequest.Validate if the designated constraints
// aren't met.
type DescribeCoinSwapStatsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinSwapStatsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinSwapStatsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinSwapStatsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinSwapStatsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinSwapStatsRequestValidationError) ErrorName() string {
	return "DescribeCoinSwapStatsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinSwapStatsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinSwapStatsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinSwapStatsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinSwapStatsRequestValidationError{}

// Validate checks the field values on DescribeCoinSwapStatsReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCoinSwapStatsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCoinSwapStatsReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeCoinSwapStatsReplyMultiError, or nil if none found.
func (m *DescribeCoinSwapStatsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinSwapStatsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Liquidity

	if all {
		switch v := interface{}(m.GetVolume24H()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DescribeCoinSwapStatsReplyValidationError{
					field:  "Volume24H",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DescribeCoinSwapStatsReplyValidationError{
					field:  "Volume24H",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVolume24H()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeCoinSwapStatsReplyValidationError{
				field:  "Volume24H",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOrders24H()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DescribeCoinSwapStatsReplyValidationError{
					field:  "Orders24H",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DescribeCoinSwapStatsReplyValidationError{
					field:  "Orders24H",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrders24H()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeCoinSwapStatsReplyValidationError{
				field:  "Orders24H",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUsers24H()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DescribeCoinSwapStatsReplyValidationError{
					field:  "Users24H",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DescribeCoinSwapStatsReplyValidationError{
					field:  "Users24H",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUsers24H()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeCoinSwapStatsReplyValidationError{
				field:  "Users24H",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DescribeCoinSwapStatsReplyMultiError(errors)
	}

	return nil
}

// DescribeCoinSwapStatsReplyMultiError is an error wrapping multiple
// validation errors returned by DescribeCoinSwapStatsReply.ValidateAll() if
// the designated constraints aren't met.
type DescribeCoinSwapStatsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinSwapStatsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinSwapStatsReplyMultiError) AllErrors() []error { return m }

// DescribeCoinSwapStatsReplyValidationError is the validation error returned
// by DescribeCoinSwapStatsReply.Validate if the designated constraints aren't met.
type DescribeCoinSwapStatsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinSwapStatsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinSwapStatsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinSwapStatsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinSwapStatsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinSwapStatsReplyValidationError) ErrorName() string {
	return "DescribeCoinSwapStatsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinSwapStatsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinSwapStatsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinSwapStatsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinSwapStatsReplyValidationError{}

// Validate checks the field values on DescribeDeFiCoinsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeDeFiCoinsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeDeFiCoinsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeDeFiCoinsRequestMultiError, or nil if none found.
func (m *DescribeDeFiCoinsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeDeFiCoinsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if utf8.RuneCountInString(m.GetCurrency()) < 1 {
		err := DescribeDeFiCoinsRequestValidationError{
			field:  "Currency",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPage() <= 0 {
		err := DescribeDeFiCoinsRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val > 100 {
		err := DescribeDeFiCoinsRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := DescribeDeFiCoinsRequest_SortFieldDefine_name[int32(m.GetSortField())]; !ok {
		err := DescribeDeFiCoinsRequestValidationError{
			field:  "SortField",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for SortType

	// no validation rules for Category

	// no validation rules for CoinID

	// no validation rules for ColumnID

	if len(errors) > 0 {
		return DescribeDeFiCoinsRequestMultiError(errors)
	}

	return nil
}

// DescribeDeFiCoinsRequestMultiError is an error wrapping multiple validation
// errors returned by DescribeDeFiCoinsRequest.ValidateAll() if the designated
// constraints aren't met.
type DescribeDeFiCoinsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeDeFiCoinsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeDeFiCoinsRequestMultiError) AllErrors() []error { return m }

// DescribeDeFiCoinsRequestValidationError is the validation error returned by
// DescribeDeFiCoinsRequest.Validate if the designated constraints aren't met.
type DescribeDeFiCoinsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeDeFiCoinsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeDeFiCoinsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeDeFiCoinsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeDeFiCoinsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeDeFiCoinsRequestValidationError) ErrorName() string {
	return "DescribeDeFiCoinsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeDeFiCoinsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeDeFiCoinsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeDeFiCoinsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeDeFiCoinsRequestValidationError{}

// Validate checks the field values on DescribeDeFiCoinsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeDeFiCoinsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeDeFiCoinsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeDeFiCoinsReplyMultiError, or nil if none found.
func (m *DescribeDeFiCoinsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeDeFiCoinsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCoins() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribeDeFiCoinsReplyValidationError{
						field:  fmt.Sprintf("Coins[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribeDeFiCoinsReplyValidationError{
						field:  fmt.Sprintf("Coins[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribeDeFiCoinsReplyValidationError{
					field:  fmt.Sprintf("Coins[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return DescribeDeFiCoinsReplyMultiError(errors)
	}

	return nil
}

// DescribeDeFiCoinsReplyMultiError is an error wrapping multiple validation
// errors returned by DescribeDeFiCoinsReply.ValidateAll() if the designated
// constraints aren't met.
type DescribeDeFiCoinsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeDeFiCoinsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeDeFiCoinsReplyMultiError) AllErrors() []error { return m }

// DescribeDeFiCoinsReplyValidationError is the validation error returned by
// DescribeDeFiCoinsReply.Validate if the designated constraints aren't met.
type DescribeDeFiCoinsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeDeFiCoinsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeDeFiCoinsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeDeFiCoinsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeDeFiCoinsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeDeFiCoinsReplyValidationError) ErrorName() string {
	return "DescribeDeFiCoinsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeDeFiCoinsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeDeFiCoinsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeDeFiCoinsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeDeFiCoinsReplyValidationError{}

// Validate checks the field values on DescribeCoinSimplesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCoinSimplesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCoinSimplesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeCoinSimplesRequestMultiError, or nil if none found.
func (m *DescribeCoinSimplesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinSimplesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if len(m.GetCoinIDs()) < 1 {
		err := DescribeCoinSimplesRequestValidationError{
			field:  "CoinIDs",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DescribeCoinSimplesRequestMultiError(errors)
	}

	return nil
}

// DescribeCoinSimplesRequestMultiError is an error wrapping multiple
// validation errors returned by DescribeCoinSimplesRequest.ValidateAll() if
// the designated constraints aren't met.
type DescribeCoinSimplesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinSimplesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinSimplesRequestMultiError) AllErrors() []error { return m }

// DescribeCoinSimplesRequestValidationError is the validation error returned
// by DescribeCoinSimplesRequest.Validate if the designated constraints aren't met.
type DescribeCoinSimplesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinSimplesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinSimplesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinSimplesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinSimplesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinSimplesRequestValidationError) ErrorName() string {
	return "DescribeCoinSimplesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinSimplesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinSimplesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinSimplesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinSimplesRequestValidationError{}

// Validate checks the field values on DescribeCoinSimplesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCoinSimplesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCoinSimplesReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeCoinSimplesReplyMultiError, or nil if none found.
func (m *DescribeCoinSimplesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinSimplesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCoins() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribeCoinSimplesReplyValidationError{
						field:  fmt.Sprintf("Coins[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribeCoinSimplesReplyValidationError{
						field:  fmt.Sprintf("Coins[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribeCoinSimplesReplyValidationError{
					field:  fmt.Sprintf("Coins[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DescribeCoinSimplesReplyMultiError(errors)
	}

	return nil
}

// DescribeCoinSimplesReplyMultiError is an error wrapping multiple validation
// errors returned by DescribeCoinSimplesReply.ValidateAll() if the designated
// constraints aren't met.
type DescribeCoinSimplesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinSimplesReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinSimplesReplyMultiError) AllErrors() []error { return m }

// DescribeCoinSimplesReplyValidationError is the validation error returned by
// DescribeCoinSimplesReply.Validate if the designated constraints aren't met.
type DescribeCoinSimplesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinSimplesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinSimplesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinSimplesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinSimplesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinSimplesReplyValidationError) ErrorName() string {
	return "DescribeCoinSimplesReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinSimplesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinSimplesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinSimplesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinSimplesReplyValidationError{}

// Validate checks the field values on SearchCoinsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchCoinsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchCoinsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchCoinsRequestMultiError, or nil if none found.
func (m *SearchCoinsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchCoinsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if utf8.RuneCountInString(m.GetKeyword()) < 1 {
		err := SearchCoinsRequestValidationError{
			field:  "Keyword",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val > 100 {
		err := SearchCoinsRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SearchCoinsRequestMultiError(errors)
	}

	return nil
}

// SearchCoinsRequestMultiError is an error wrapping multiple validation errors
// returned by SearchCoinsRequest.ValidateAll() if the designated constraints
// aren't met.
type SearchCoinsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchCoinsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchCoinsRequestMultiError) AllErrors() []error { return m }

// SearchCoinsRequestValidationError is the validation error returned by
// SearchCoinsRequest.Validate if the designated constraints aren't met.
type SearchCoinsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchCoinsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchCoinsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchCoinsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchCoinsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchCoinsRequestValidationError) ErrorName() string {
	return "SearchCoinsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchCoinsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchCoinsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchCoinsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchCoinsRequestValidationError{}

// Validate checks the field values on SearchCoinsReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SearchCoinsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchCoinsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchCoinsReplyMultiError, or nil if none found.
func (m *SearchCoinsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchCoinsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCoins() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchCoinsReplyValidationError{
						field:  fmt.Sprintf("Coins[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchCoinsReplyValidationError{
						field:  fmt.Sprintf("Coins[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchCoinsReplyValidationError{
					field:  fmt.Sprintf("Coins[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchCoinsReplyMultiError(errors)
	}

	return nil
}

// SearchCoinsReplyMultiError is an error wrapping multiple validation errors
// returned by SearchCoinsReply.ValidateAll() if the designated constraints
// aren't met.
type SearchCoinsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchCoinsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchCoinsReplyMultiError) AllErrors() []error { return m }

// SearchCoinsReplyValidationError is the validation error returned by
// SearchCoinsReply.Validate if the designated constraints aren't met.
type SearchCoinsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchCoinsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchCoinsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchCoinsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchCoinsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchCoinsReplyValidationError) ErrorName() string { return "SearchCoinsReplyValidationError" }

// Error satisfies the builtin error interface
func (e SearchCoinsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchCoinsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchCoinsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchCoinsReplyValidationError{}

// Validate checks the field values on DescribeTokensRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeTokensRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeTokensRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeTokensRequestMultiError, or nil if none found.
func (m *DescribeTokensRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeTokensRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	// no validation rules for CoinID

	// no validation rules for Symbol

	// no validation rules for Address

	// no validation rules for Chain

	if m.GetPage() <= 0 {
		err := DescribeTokensRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val > 100 {
		err := DescribeTokensRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DescribeTokensRequestMultiError(errors)
	}

	return nil
}

// DescribeTokensRequestMultiError is an error wrapping multiple validation
// errors returned by DescribeTokensRequest.ValidateAll() if the designated
// constraints aren't met.
type DescribeTokensRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeTokensRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeTokensRequestMultiError) AllErrors() []error { return m }

// DescribeTokensRequestValidationError is the validation error returned by
// DescribeTokensRequest.Validate if the designated constraints aren't met.
type DescribeTokensRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeTokensRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeTokensRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeTokensRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeTokensRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeTokensRequestValidationError) ErrorName() string {
	return "DescribeTokensRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeTokensRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeTokensRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeTokensRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeTokensRequestValidationError{}

// Validate checks the field values on DescribeTokensReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeTokensReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeTokensReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeTokensReplyMultiError, or nil if none found.
func (m *DescribeTokensReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeTokensReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetTokens() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribeTokensReplyValidationError{
						field:  fmt.Sprintf("Tokens[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribeTokensReplyValidationError{
						field:  fmt.Sprintf("Tokens[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribeTokensReplyValidationError{
					field:  fmt.Sprintf("Tokens[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DescribeTokensReplyMultiError(errors)
	}

	return nil
}

// DescribeTokensReplyMultiError is an error wrapping multiple validation
// errors returned by DescribeTokensReply.ValidateAll() if the designated
// constraints aren't met.
type DescribeTokensReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeTokensReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeTokensReplyMultiError) AllErrors() []error { return m }

// DescribeTokensReplyValidationError is the validation error returned by
// DescribeTokensReply.Validate if the designated constraints aren't met.
type DescribeTokensReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeTokensReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeTokensReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeTokensReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeTokensReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeTokensReplyValidationError) ErrorName() string {
	return "DescribeTokensReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeTokensReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeTokensReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeTokensReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeTokensReplyValidationError{}

// Validate checks the field values on DescribeGuruChainsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeGuruChainsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeGuruChainsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeGuruChainsRequestMultiError, or nil if none found.
func (m *DescribeGuruChainsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeGuruChainsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if len(errors) > 0 {
		return DescribeGuruChainsRequestMultiError(errors)
	}

	return nil
}

// DescribeGuruChainsRequestMultiError is an error wrapping multiple validation
// errors returned by DescribeGuruChainsRequest.ValidateAll() if the
// designated constraints aren't met.
type DescribeGuruChainsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeGuruChainsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeGuruChainsRequestMultiError) AllErrors() []error { return m }

// DescribeGuruChainsRequestValidationError is the validation error returned by
// DescribeGuruChainsRequest.Validate if the designated constraints aren't met.
type DescribeGuruChainsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeGuruChainsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeGuruChainsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeGuruChainsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeGuruChainsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeGuruChainsRequestValidationError) ErrorName() string {
	return "DescribeGuruChainsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeGuruChainsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeGuruChainsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeGuruChainsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeGuruChainsRequestValidationError{}

// Validate checks the field values on DescribeGuruChainsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeGuruChainsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeGuruChainsReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeGuruChainsReplyMultiError, or nil if none found.
func (m *DescribeGuruChainsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeGuruChainsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetChains() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribeGuruChainsReplyValidationError{
						field:  fmt.Sprintf("Chains[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribeGuruChainsReplyValidationError{
						field:  fmt.Sprintf("Chains[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribeGuruChainsReplyValidationError{
					field:  fmt.Sprintf("Chains[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DescribeGuruChainsReplyMultiError(errors)
	}

	return nil
}

// DescribeGuruChainsReplyMultiError is an error wrapping multiple validation
// errors returned by DescribeGuruChainsReply.ValidateAll() if the designated
// constraints aren't met.
type DescribeGuruChainsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeGuruChainsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeGuruChainsReplyMultiError) AllErrors() []error { return m }

// DescribeGuruChainsReplyValidationError is the validation error returned by
// DescribeGuruChainsReply.Validate if the designated constraints aren't met.
type DescribeGuruChainsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeGuruChainsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeGuruChainsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeGuruChainsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeGuruChainsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeGuruChainsReplyValidationError) ErrorName() string {
	return "DescribeGuruChainsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeGuruChainsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeGuruChainsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeGuruChainsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeGuruChainsReplyValidationError{}

// Validate checks the field values on DescribeSwapConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeSwapConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeSwapConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeSwapConfigRequestMultiError, or nil if none found.
func (m *DescribeSwapConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeSwapConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if utf8.RuneCountInString(m.GetCoinID()) < 1 {
		err := DescribeSwapConfigRequestValidationError{
			field:  "CoinID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _DescribeSwapConfigRequest_Client_InLookup[m.GetClient()]; !ok {
		err := DescribeSwapConfigRequestValidationError{
			field:  "Client",
			reason: "value must be in list [1 2]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DescribeSwapConfigRequestMultiError(errors)
	}

	return nil
}

// DescribeSwapConfigRequestMultiError is an error wrapping multiple validation
// errors returned by DescribeSwapConfigRequest.ValidateAll() if the
// designated constraints aren't met.
type DescribeSwapConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeSwapConfigRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeSwapConfigRequestMultiError) AllErrors() []error { return m }

// DescribeSwapConfigRequestValidationError is the validation error returned by
// DescribeSwapConfigRequest.Validate if the designated constraints aren't met.
type DescribeSwapConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeSwapConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeSwapConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeSwapConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeSwapConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeSwapConfigRequestValidationError) ErrorName() string {
	return "DescribeSwapConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeSwapConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeSwapConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeSwapConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeSwapConfigRequestValidationError{}

var _DescribeSwapConfigRequest_Client_InLookup = map[int32]struct{}{
	1: {},
	2: {},
}

// Validate checks the field values on DescribeSwapConfigReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeSwapConfigReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeSwapConfigReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeSwapConfigReplyMultiError, or nil if none found.
func (m *DescribeSwapConfigReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeSwapConfigReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Category

	// no validation rules for Config

	if len(errors) > 0 {
		return DescribeSwapConfigReplyMultiError(errors)
	}

	return nil
}

// DescribeSwapConfigReplyMultiError is an error wrapping multiple validation
// errors returned by DescribeSwapConfigReply.ValidateAll() if the designated
// constraints aren't met.
type DescribeSwapConfigReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeSwapConfigReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeSwapConfigReplyMultiError) AllErrors() []error { return m }

// DescribeSwapConfigReplyValidationError is the validation error returned by
// DescribeSwapConfigReply.Validate if the designated constraints aren't met.
type DescribeSwapConfigReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeSwapConfigReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeSwapConfigReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeSwapConfigReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeSwapConfigReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeSwapConfigReplyValidationError) ErrorName() string {
	return "DescribeSwapConfigReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeSwapConfigReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeSwapConfigReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeSwapConfigReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeSwapConfigReplyValidationError{}

// Validate checks the field values on DescribeCoinsByFieldsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCoinsByFieldsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCoinsByFieldsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeCoinsByFieldsRequestMultiError, or nil if none found.
func (m *DescribeCoinsByFieldsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinsByFieldsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if l := len(m.GetCoinIDs()); l < 1 || l > 100 {
		err := DescribeCoinsByFieldsRequestValidationError{
			field:  "CoinIDs",
			reason: "value must contain between 1 and 100 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetFields()) < 1 {
		err := DescribeCoinsByFieldsRequestValidationError{
			field:  "Fields",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DescribeCoinsByFieldsRequestMultiError(errors)
	}

	return nil
}

// DescribeCoinsByFieldsRequestMultiError is an error wrapping multiple
// validation errors returned by DescribeCoinsByFieldsRequest.ValidateAll() if
// the designated constraints aren't met.
type DescribeCoinsByFieldsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinsByFieldsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinsByFieldsRequestMultiError) AllErrors() []error { return m }

// DescribeCoinsByFieldsRequestValidationError is the validation error returned
// by DescribeCoinsByFieldsRequest.Validate if the designated constraints
// aren't met.
type DescribeCoinsByFieldsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinsByFieldsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinsByFieldsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinsByFieldsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinsByFieldsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinsByFieldsRequestValidationError) ErrorName() string {
	return "DescribeCoinsByFieldsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinsByFieldsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinsByFieldsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinsByFieldsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinsByFieldsRequestValidationError{}

// Validate checks the field values on DescribeCoinsByFieldsReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCoinsByFieldsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCoinsByFieldsReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeCoinsByFieldsReplyMultiError, or nil if none found.
func (m *DescribeCoinsByFieldsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinsByFieldsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCoins() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribeCoinsByFieldsReplyValidationError{
						field:  fmt.Sprintf("Coins[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribeCoinsByFieldsReplyValidationError{
						field:  fmt.Sprintf("Coins[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribeCoinsByFieldsReplyValidationError{
					field:  fmt.Sprintf("Coins[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DescribeCoinsByFieldsReplyMultiError(errors)
	}

	return nil
}

// DescribeCoinsByFieldsReplyMultiError is an error wrapping multiple
// validation errors returned by DescribeCoinsByFieldsReply.ValidateAll() if
// the designated constraints aren't met.
type DescribeCoinsByFieldsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinsByFieldsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinsByFieldsReplyMultiError) AllErrors() []error { return m }

// DescribeCoinsByFieldsReplyValidationError is the validation error returned
// by DescribeCoinsByFieldsReply.Validate if the designated constraints aren't met.
type DescribeCoinsByFieldsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinsByFieldsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinsByFieldsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinsByFieldsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinsByFieldsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinsByFieldsReplyValidationError) ErrorName() string {
	return "DescribeCoinsByFieldsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinsByFieldsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinsByFieldsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinsByFieldsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinsByFieldsReplyValidationError{}

// Validate checks the field values on DescribeTokensByFieldsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeTokensByFieldsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeTokensByFieldsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DescribeTokensByFieldsRequestMultiError, or nil if none found.
func (m *DescribeTokensByFieldsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeTokensByFieldsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	if l := len(m.GetAddress()); l < 1 || l > 100 {
		err := DescribeTokensByFieldsRequestValidationError{
			field:  "Address",
			reason: "value must contain between 1 and 100 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetFields()) < 1 {
		err := DescribeTokensByFieldsRequestValidationError{
			field:  "Fields",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DescribeTokensByFieldsRequestMultiError(errors)
	}

	return nil
}

// DescribeTokensByFieldsRequestMultiError is an error wrapping multiple
// validation errors returned by DescribeTokensByFieldsRequest.ValidateAll()
// if the designated constraints aren't met.
type DescribeTokensByFieldsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeTokensByFieldsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeTokensByFieldsRequestMultiError) AllErrors() []error { return m }

// DescribeTokensByFieldsRequestValidationError is the validation error
// returned by DescribeTokensByFieldsRequest.Validate if the designated
// constraints aren't met.
type DescribeTokensByFieldsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeTokensByFieldsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeTokensByFieldsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeTokensByFieldsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeTokensByFieldsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeTokensByFieldsRequestValidationError) ErrorName() string {
	return "DescribeTokensByFieldsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeTokensByFieldsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeTokensByFieldsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeTokensByFieldsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeTokensByFieldsRequestValidationError{}

// Validate checks the field values on DescribeTokensByFieldsReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeTokensByFieldsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeTokensByFieldsReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeTokensByFieldsReplyMultiError, or nil if none found.
func (m *DescribeTokensByFieldsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeTokensByFieldsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTokens() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DescribeTokensByFieldsReplyValidationError{
						field:  fmt.Sprintf("Tokens[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DescribeTokensByFieldsReplyValidationError{
						field:  fmt.Sprintf("Tokens[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribeTokensByFieldsReplyValidationError{
					field:  fmt.Sprintf("Tokens[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DescribeTokensByFieldsReplyMultiError(errors)
	}

	return nil
}

// DescribeTokensByFieldsReplyMultiError is an error wrapping multiple
// validation errors returned by DescribeTokensByFieldsReply.ValidateAll() if
// the designated constraints aren't met.
type DescribeTokensByFieldsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeTokensByFieldsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeTokensByFieldsReplyMultiError) AllErrors() []error { return m }

// DescribeTokensByFieldsReplyValidationError is the validation error returned
// by DescribeTokensByFieldsReply.Validate if the designated constraints
// aren't met.
type DescribeTokensByFieldsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeTokensByFieldsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeTokensByFieldsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeTokensByFieldsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeTokensByFieldsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeTokensByFieldsReplyValidationError) ErrorName() string {
	return "DescribeTokensByFieldsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeTokensByFieldsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeTokensByFieldsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeTokensByFieldsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeTokensByFieldsReplyValidationError{}

// Validate checks the field values on Currency with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Currency) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Currency with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CurrencyMultiError, or nil
// if none found.
func (m *Currency) ValidateAll() error {
	return m.validate(true)
}

func (m *Currency) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Cny

	// no validation rules for Usd

	if len(errors) > 0 {
		return CurrencyMultiError(errors)
	}

	return nil
}

// CurrencyMultiError is an error wrapping multiple validation errors returned
// by Currency.ValidateAll() if the designated constraints aren't met.
type CurrencyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CurrencyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CurrencyMultiError) AllErrors() []error { return m }

// CurrencyValidationError is the validation error returned by
// Currency.Validate if the designated constraints aren't met.
type CurrencyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CurrencyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CurrencyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CurrencyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CurrencyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CurrencyValidationError) ErrorName() string { return "CurrencyValidationError" }

// Error satisfies the builtin error interface
func (e CurrencyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCurrency.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CurrencyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CurrencyValidationError{}

// Validate checks the field values on DescribeColumnListReply_Column with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeColumnListReply_Column) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeColumnListReply_Column with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DescribeColumnListReply_ColumnMultiError, or nil if none found.
func (m *DescribeColumnListReply_Column) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeColumnListReply_Column) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ColumnID

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for Weight

	// no validation rules for Valid

	if len(errors) > 0 {
		return DescribeColumnListReply_ColumnMultiError(errors)
	}

	return nil
}

// DescribeColumnListReply_ColumnMultiError is an error wrapping multiple
// validation errors returned by DescribeColumnListReply_Column.ValidateAll()
// if the designated constraints aren't met.
type DescribeColumnListReply_ColumnMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeColumnListReply_ColumnMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeColumnListReply_ColumnMultiError) AllErrors() []error { return m }

// DescribeColumnListReply_ColumnValidationError is the validation error
// returned by DescribeColumnListReply_Column.Validate if the designated
// constraints aren't met.
type DescribeColumnListReply_ColumnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeColumnListReply_ColumnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeColumnListReply_ColumnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeColumnListReply_ColumnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeColumnListReply_ColumnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeColumnListReply_ColumnValidationError) ErrorName() string {
	return "DescribeColumnListReply_ColumnValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeColumnListReply_ColumnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeColumnListReply_Column.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeColumnListReply_ColumnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeColumnListReply_ColumnValidationError{}

// Validate checks the field values on DescribeCexCoinsReply_Coin with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCexCoinsReply_Coin) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCexCoinsReply_Coin with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeCexCoinsReply_CoinMultiError, or nil if none found.
func (m *DescribeCexCoinsReply_Coin) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCexCoinsReply_Coin) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Rank

	// no validation rules for CoinID

	// no validation rules for Price

	// no validation rules for Delta1H

	// no validation rules for Delta24H

	// no validation rules for Delta7D

	// no validation rules for Delta30D

	// no validation rules for Delta1Y

	// no validation rules for Volume24H

	// no validation rules for MarketCap

	// no validation rules for FullyDilutedValuation

	// no validation rules for TotalSupply

	// no validation rules for MaxSupply

	// no validation rules for CirculatingSupply

	// no validation rules for High24

	// no validation rules for Low24

	// no validation rules for Sparkline7D

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return DescribeCexCoinsReply_CoinMultiError(errors)
	}

	return nil
}

// DescribeCexCoinsReply_CoinMultiError is an error wrapping multiple
// validation errors returned by DescribeCexCoinsReply_Coin.ValidateAll() if
// the designated constraints aren't met.
type DescribeCexCoinsReply_CoinMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCexCoinsReply_CoinMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCexCoinsReply_CoinMultiError) AllErrors() []error { return m }

// DescribeCexCoinsReply_CoinValidationError is the validation error returned
// by DescribeCexCoinsReply_Coin.Validate if the designated constraints aren't met.
type DescribeCexCoinsReply_CoinValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCexCoinsReply_CoinValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCexCoinsReply_CoinValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCexCoinsReply_CoinValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCexCoinsReply_CoinValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCexCoinsReply_CoinValidationError) ErrorName() string {
	return "DescribeCexCoinsReply_CoinValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCexCoinsReply_CoinValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCexCoinsReply_Coin.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCexCoinsReply_CoinValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCexCoinsReply_CoinValidationError{}

// Validate checks the field values on
// DescribeMarketExtraDetailReply_ChainAddress with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DescribeMarketExtraDetailReply_ChainAddress) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DescribeMarketExtraDetailReply_ChainAddress with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// DescribeMarketExtraDetailReply_ChainAddressMultiError, or nil if none found.
func (m *DescribeMarketExtraDetailReply_ChainAddress) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeMarketExtraDetailReply_ChainAddress) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Chain

	// no validation rules for Address

	if len(errors) > 0 {
		return DescribeMarketExtraDetailReply_ChainAddressMultiError(errors)
	}

	return nil
}

// DescribeMarketExtraDetailReply_ChainAddressMultiError is an error wrapping
// multiple validation errors returned by
// DescribeMarketExtraDetailReply_ChainAddress.ValidateAll() if the designated
// constraints aren't met.
type DescribeMarketExtraDetailReply_ChainAddressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeMarketExtraDetailReply_ChainAddressMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeMarketExtraDetailReply_ChainAddressMultiError) AllErrors() []error { return m }

// DescribeMarketExtraDetailReply_ChainAddressValidationError is the validation
// error returned by DescribeMarketExtraDetailReply_ChainAddress.Validate if
// the designated constraints aren't met.
type DescribeMarketExtraDetailReply_ChainAddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeMarketExtraDetailReply_ChainAddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeMarketExtraDetailReply_ChainAddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeMarketExtraDetailReply_ChainAddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeMarketExtraDetailReply_ChainAddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeMarketExtraDetailReply_ChainAddressValidationError) ErrorName() string {
	return "DescribeMarketExtraDetailReply_ChainAddressValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeMarketExtraDetailReply_ChainAddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeMarketExtraDetailReply_ChainAddress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeMarketExtraDetailReply_ChainAddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeMarketExtraDetailReply_ChainAddressValidationError{}

// Validate checks the field values on
// DescribeMarketExtraDetailReply_SocialLink with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DescribeMarketExtraDetailReply_SocialLink) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DescribeMarketExtraDetailReply_SocialLink with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// DescribeMarketExtraDetailReply_SocialLinkMultiError, or nil if none found.
func (m *DescribeMarketExtraDetailReply_SocialLink) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeMarketExtraDetailReply_SocialLink) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Twitter

	// no validation rules for Facebook

	// no validation rules for Reddit

	// no validation rules for Telegram

	if len(errors) > 0 {
		return DescribeMarketExtraDetailReply_SocialLinkMultiError(errors)
	}

	return nil
}

// DescribeMarketExtraDetailReply_SocialLinkMultiError is an error wrapping
// multiple validation errors returned by
// DescribeMarketExtraDetailReply_SocialLink.ValidateAll() if the designated
// constraints aren't met.
type DescribeMarketExtraDetailReply_SocialLinkMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeMarketExtraDetailReply_SocialLinkMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeMarketExtraDetailReply_SocialLinkMultiError) AllErrors() []error { return m }

// DescribeMarketExtraDetailReply_SocialLinkValidationError is the validation
// error returned by DescribeMarketExtraDetailReply_SocialLink.Validate if the
// designated constraints aren't met.
type DescribeMarketExtraDetailReply_SocialLinkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeMarketExtraDetailReply_SocialLinkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeMarketExtraDetailReply_SocialLinkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeMarketExtraDetailReply_SocialLinkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeMarketExtraDetailReply_SocialLinkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeMarketExtraDetailReply_SocialLinkValidationError) ErrorName() string {
	return "DescribeMarketExtraDetailReply_SocialLinkValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeMarketExtraDetailReply_SocialLinkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeMarketExtraDetailReply_SocialLink.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeMarketExtraDetailReply_SocialLinkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeMarketExtraDetailReply_SocialLinkValidationError{}

// Validate checks the field values on DescribeCoinPriceChartReply_PriceChart
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DescribeCoinPriceChartReply_PriceChart) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DescribeCoinPriceChartReply_PriceChart with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// DescribeCoinPriceChartReply_PriceChartMultiError, or nil if none found.
func (m *DescribeCoinPriceChartReply_PriceChart) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinPriceChartReply_PriceChart) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Timestamp

	// no validation rules for Price

	if len(errors) > 0 {
		return DescribeCoinPriceChartReply_PriceChartMultiError(errors)
	}

	return nil
}

// DescribeCoinPriceChartReply_PriceChartMultiError is an error wrapping
// multiple validation errors returned by
// DescribeCoinPriceChartReply_PriceChart.ValidateAll() if the designated
// constraints aren't met.
type DescribeCoinPriceChartReply_PriceChartMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinPriceChartReply_PriceChartMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinPriceChartReply_PriceChartMultiError) AllErrors() []error { return m }

// DescribeCoinPriceChartReply_PriceChartValidationError is the validation
// error returned by DescribeCoinPriceChartReply_PriceChart.Validate if the
// designated constraints aren't met.
type DescribeCoinPriceChartReply_PriceChartValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinPriceChartReply_PriceChartValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinPriceChartReply_PriceChartValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinPriceChartReply_PriceChartValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinPriceChartReply_PriceChartValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinPriceChartReply_PriceChartValidationError) ErrorName() string {
	return "DescribeCoinPriceChartReply_PriceChartValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinPriceChartReply_PriceChartValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinPriceChartReply_PriceChart.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinPriceChartReply_PriceChartValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinPriceChartReply_PriceChartValidationError{}

// Validate checks the field values on DescribeCoinPriceChartReply_CapChart
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DescribeCoinPriceChartReply_CapChart) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCoinPriceChartReply_CapChart
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DescribeCoinPriceChartReply_CapChartMultiError, or nil if none found.
func (m *DescribeCoinPriceChartReply_CapChart) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinPriceChartReply_CapChart) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Timestamp

	// no validation rules for Cap

	if len(errors) > 0 {
		return DescribeCoinPriceChartReply_CapChartMultiError(errors)
	}

	return nil
}

// DescribeCoinPriceChartReply_CapChartMultiError is an error wrapping multiple
// validation errors returned by
// DescribeCoinPriceChartReply_CapChart.ValidateAll() if the designated
// constraints aren't met.
type DescribeCoinPriceChartReply_CapChartMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinPriceChartReply_CapChartMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinPriceChartReply_CapChartMultiError) AllErrors() []error { return m }

// DescribeCoinPriceChartReply_CapChartValidationError is the validation error
// returned by DescribeCoinPriceChartReply_CapChart.Validate if the designated
// constraints aren't met.
type DescribeCoinPriceChartReply_CapChartValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinPriceChartReply_CapChartValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinPriceChartReply_CapChartValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinPriceChartReply_CapChartValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinPriceChartReply_CapChartValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinPriceChartReply_CapChartValidationError) ErrorName() string {
	return "DescribeCoinPriceChartReply_CapChartValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinPriceChartReply_CapChartValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinPriceChartReply_CapChart.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinPriceChartReply_CapChartValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinPriceChartReply_CapChartValidationError{}

// Validate checks the field values on DescribeCoinPriceChartReply_VolumeChart
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DescribeCoinPriceChartReply_VolumeChart) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DescribeCoinPriceChartReply_VolumeChart with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// DescribeCoinPriceChartReply_VolumeChartMultiError, or nil if none found.
func (m *DescribeCoinPriceChartReply_VolumeChart) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinPriceChartReply_VolumeChart) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Timestamp

	// no validation rules for Volume

	if len(errors) > 0 {
		return DescribeCoinPriceChartReply_VolumeChartMultiError(errors)
	}

	return nil
}

// DescribeCoinPriceChartReply_VolumeChartMultiError is an error wrapping
// multiple validation errors returned by
// DescribeCoinPriceChartReply_VolumeChart.ValidateAll() if the designated
// constraints aren't met.
type DescribeCoinPriceChartReply_VolumeChartMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinPriceChartReply_VolumeChartMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinPriceChartReply_VolumeChartMultiError) AllErrors() []error { return m }

// DescribeCoinPriceChartReply_VolumeChartValidationError is the validation
// error returned by DescribeCoinPriceChartReply_VolumeChart.Validate if the
// designated constraints aren't met.
type DescribeCoinPriceChartReply_VolumeChartValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinPriceChartReply_VolumeChartValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinPriceChartReply_VolumeChartValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinPriceChartReply_VolumeChartValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinPriceChartReply_VolumeChartValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinPriceChartReply_VolumeChartValidationError) ErrorName() string {
	return "DescribeCoinPriceChartReply_VolumeChartValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinPriceChartReply_VolumeChartValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinPriceChartReply_VolumeChart.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinPriceChartReply_VolumeChartValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinPriceChartReply_VolumeChartValidationError{}

// Validate checks the field values on DescribeCoinSwapsReply_CoinSwapsDetail
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DescribeCoinSwapsReply_CoinSwapsDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DescribeCoinSwapsReply_CoinSwapsDetail with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// DescribeCoinSwapsReply_CoinSwapsDetailMultiError, or nil if none found.
func (m *DescribeCoinSwapsReply_CoinSwapsDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinSwapsReply_CoinSwapsDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UUID

	// no validation rules for Timestamp

	// no validation rules for Amm

	// no validation rules for Chain

	// no validation rules for Price

	// no validation rules for SenderCoinID

	// no validation rules for ReceiverCoinID

	// no validation rules for SenderAddress

	// no validation rules for ReceiverAddress

	// no validation rules for TokenIn

	// no validation rules for TokenOut

	// no validation rules for PairAddress

	// no validation rules for WalletAddress

	// no validation rules for BlockNumber

	// no validation rules for WalletCategory

	// no validation rules for TransType

	// no validation rules for TransAddress

	if len(errors) > 0 {
		return DescribeCoinSwapsReply_CoinSwapsDetailMultiError(errors)
	}

	return nil
}

// DescribeCoinSwapsReply_CoinSwapsDetailMultiError is an error wrapping
// multiple validation errors returned by
// DescribeCoinSwapsReply_CoinSwapsDetail.ValidateAll() if the designated
// constraints aren't met.
type DescribeCoinSwapsReply_CoinSwapsDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinSwapsReply_CoinSwapsDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinSwapsReply_CoinSwapsDetailMultiError) AllErrors() []error { return m }

// DescribeCoinSwapsReply_CoinSwapsDetailValidationError is the validation
// error returned by DescribeCoinSwapsReply_CoinSwapsDetail.Validate if the
// designated constraints aren't met.
type DescribeCoinSwapsReply_CoinSwapsDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinSwapsReply_CoinSwapsDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinSwapsReply_CoinSwapsDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinSwapsReply_CoinSwapsDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinSwapsReply_CoinSwapsDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinSwapsReply_CoinSwapsDetailValidationError) ErrorName() string {
	return "DescribeCoinSwapsReply_CoinSwapsDetailValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinSwapsReply_CoinSwapsDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinSwapsReply_CoinSwapsDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinSwapsReply_CoinSwapsDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinSwapsReply_CoinSwapsDetailValidationError{}

// Validate checks the field values on
// DescribeCoinLiquidityReply_CoinLiquidityDetail with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DescribeCoinLiquidityReply_CoinLiquidityDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DescribeCoinLiquidityReply_CoinLiquidityDetail with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// DescribeCoinLiquidityReply_CoinLiquidityDetailMultiError, or nil if none found.
func (m *DescribeCoinLiquidityReply_CoinLiquidityDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinLiquidityReply_CoinLiquidityDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UUID

	// no validation rules for Timestamp

	// no validation rules for Amm

	// no validation rules for Chain

	// no validation rules for Price

	// no validation rules for Token1CoinID

	// no validation rules for Token2CoinID

	// no validation rules for Token1Address

	// no validation rules for Token2Address

	// no validation rules for Token1

	// no validation rules for Token2

	// no validation rules for PairAddress

	// no validation rules for WalletAddress

	// no validation rules for BlockNumber

	// no validation rules for TransType

	// no validation rules for TransAddress

	if len(errors) > 0 {
		return DescribeCoinLiquidityReply_CoinLiquidityDetailMultiError(errors)
	}

	return nil
}

// DescribeCoinLiquidityReply_CoinLiquidityDetailMultiError is an error
// wrapping multiple validation errors returned by
// DescribeCoinLiquidityReply_CoinLiquidityDetail.ValidateAll() if the
// designated constraints aren't met.
type DescribeCoinLiquidityReply_CoinLiquidityDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinLiquidityReply_CoinLiquidityDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinLiquidityReply_CoinLiquidityDetailMultiError) AllErrors() []error { return m }

// DescribeCoinLiquidityReply_CoinLiquidityDetailValidationError is the
// validation error returned by
// DescribeCoinLiquidityReply_CoinLiquidityDetail.Validate if the designated
// constraints aren't met.
type DescribeCoinLiquidityReply_CoinLiquidityDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinLiquidityReply_CoinLiquidityDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinLiquidityReply_CoinLiquidityDetailValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e DescribeCoinLiquidityReply_CoinLiquidityDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinLiquidityReply_CoinLiquidityDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinLiquidityReply_CoinLiquidityDetailValidationError) ErrorName() string {
	return "DescribeCoinLiquidityReply_CoinLiquidityDetailValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinLiquidityReply_CoinLiquidityDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinLiquidityReply_CoinLiquidityDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinLiquidityReply_CoinLiquidityDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinLiquidityReply_CoinLiquidityDetailValidationError{}

// Validate checks the field values on
// DescribeCoinLiquidityChartReply_LiquidityChart with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DescribeCoinLiquidityChartReply_LiquidityChart) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DescribeCoinLiquidityChartReply_LiquidityChart with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// DescribeCoinLiquidityChartReply_LiquidityChartMultiError, or nil if none found.
func (m *DescribeCoinLiquidityChartReply_LiquidityChart) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinLiquidityChartReply_LiquidityChart) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Timestamp

	// no validation rules for Price

	if len(errors) > 0 {
		return DescribeCoinLiquidityChartReply_LiquidityChartMultiError(errors)
	}

	return nil
}

// DescribeCoinLiquidityChartReply_LiquidityChartMultiError is an error
// wrapping multiple validation errors returned by
// DescribeCoinLiquidityChartReply_LiquidityChart.ValidateAll() if the
// designated constraints aren't met.
type DescribeCoinLiquidityChartReply_LiquidityChartMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinLiquidityChartReply_LiquidityChartMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinLiquidityChartReply_LiquidityChartMultiError) AllErrors() []error { return m }

// DescribeCoinLiquidityChartReply_LiquidityChartValidationError is the
// validation error returned by
// DescribeCoinLiquidityChartReply_LiquidityChart.Validate if the designated
// constraints aren't met.
type DescribeCoinLiquidityChartReply_LiquidityChartValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinLiquidityChartReply_LiquidityChartValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinLiquidityChartReply_LiquidityChartValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e DescribeCoinLiquidityChartReply_LiquidityChartValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinLiquidityChartReply_LiquidityChartValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinLiquidityChartReply_LiquidityChartValidationError) ErrorName() string {
	return "DescribeCoinLiquidityChartReply_LiquidityChartValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinLiquidityChartReply_LiquidityChartValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinLiquidityChartReply_LiquidityChart.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinLiquidityChartReply_LiquidityChartValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinLiquidityChartReply_LiquidityChartValidationError{}

// Validate checks the field values on DescribeCoinUserChartReply_UserChart
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DescribeCoinUserChartReply_UserChart) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCoinUserChartReply_UserChart
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DescribeCoinUserChartReply_UserChartMultiError, or nil if none found.
func (m *DescribeCoinUserChartReply_UserChart) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinUserChartReply_UserChart) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Timestamp

	// no validation rules for Buy

	// no validation rules for Sell

	// no validation rules for Total

	if len(errors) > 0 {
		return DescribeCoinUserChartReply_UserChartMultiError(errors)
	}

	return nil
}

// DescribeCoinUserChartReply_UserChartMultiError is an error wrapping multiple
// validation errors returned by
// DescribeCoinUserChartReply_UserChart.ValidateAll() if the designated
// constraints aren't met.
type DescribeCoinUserChartReply_UserChartMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinUserChartReply_UserChartMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinUserChartReply_UserChartMultiError) AllErrors() []error { return m }

// DescribeCoinUserChartReply_UserChartValidationError is the validation error
// returned by DescribeCoinUserChartReply_UserChart.Validate if the designated
// constraints aren't met.
type DescribeCoinUserChartReply_UserChartValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinUserChartReply_UserChartValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinUserChartReply_UserChartValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinUserChartReply_UserChartValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinUserChartReply_UserChartValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinUserChartReply_UserChartValidationError) ErrorName() string {
	return "DescribeCoinUserChartReply_UserChartValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinUserChartReply_UserChartValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinUserChartReply_UserChart.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinUserChartReply_UserChartValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinUserChartReply_UserChartValidationError{}

// Validate checks the field values on DescribeCoinOrderChartReply_OrderChart
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DescribeCoinOrderChartReply_OrderChart) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DescribeCoinOrderChartReply_OrderChart with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// DescribeCoinOrderChartReply_OrderChartMultiError, or nil if none found.
func (m *DescribeCoinOrderChartReply_OrderChart) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinOrderChartReply_OrderChart) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Timestamp

	// no validation rules for Buy

	// no validation rules for Sell

	// no validation rules for Total

	if len(errors) > 0 {
		return DescribeCoinOrderChartReply_OrderChartMultiError(errors)
	}

	return nil
}

// DescribeCoinOrderChartReply_OrderChartMultiError is an error wrapping
// multiple validation errors returned by
// DescribeCoinOrderChartReply_OrderChart.ValidateAll() if the designated
// constraints aren't met.
type DescribeCoinOrderChartReply_OrderChartMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinOrderChartReply_OrderChartMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinOrderChartReply_OrderChartMultiError) AllErrors() []error { return m }

// DescribeCoinOrderChartReply_OrderChartValidationError is the validation
// error returned by DescribeCoinOrderChartReply_OrderChart.Validate if the
// designated constraints aren't met.
type DescribeCoinOrderChartReply_OrderChartValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinOrderChartReply_OrderChartValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinOrderChartReply_OrderChartValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinOrderChartReply_OrderChartValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinOrderChartReply_OrderChartValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinOrderChartReply_OrderChartValidationError) ErrorName() string {
	return "DescribeCoinOrderChartReply_OrderChartValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinOrderChartReply_OrderChartValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinOrderChartReply_OrderChart.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinOrderChartReply_OrderChartValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinOrderChartReply_OrderChartValidationError{}

// Validate checks the field values on DescribeCoinVolumeChartReply_VolumeChart
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DescribeCoinVolumeChartReply_VolumeChart) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DescribeCoinVolumeChartReply_VolumeChart with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// DescribeCoinVolumeChartReply_VolumeChartMultiError, or nil if none found.
func (m *DescribeCoinVolumeChartReply_VolumeChart) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinVolumeChartReply_VolumeChart) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Timestamp

	// no validation rules for Buy

	// no validation rules for Sell

	// no validation rules for Total

	if len(errors) > 0 {
		return DescribeCoinVolumeChartReply_VolumeChartMultiError(errors)
	}

	return nil
}

// DescribeCoinVolumeChartReply_VolumeChartMultiError is an error wrapping
// multiple validation errors returned by
// DescribeCoinVolumeChartReply_VolumeChart.ValidateAll() if the designated
// constraints aren't met.
type DescribeCoinVolumeChartReply_VolumeChartMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinVolumeChartReply_VolumeChartMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinVolumeChartReply_VolumeChartMultiError) AllErrors() []error { return m }

// DescribeCoinVolumeChartReply_VolumeChartValidationError is the validation
// error returned by DescribeCoinVolumeChartReply_VolumeChart.Validate if the
// designated constraints aren't met.
type DescribeCoinVolumeChartReply_VolumeChartValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinVolumeChartReply_VolumeChartValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinVolumeChartReply_VolumeChartValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinVolumeChartReply_VolumeChartValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinVolumeChartReply_VolumeChartValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinVolumeChartReply_VolumeChartValidationError) ErrorName() string {
	return "DescribeCoinVolumeChartReply_VolumeChartValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinVolumeChartReply_VolumeChartValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinVolumeChartReply_VolumeChart.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinVolumeChartReply_VolumeChartValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinVolumeChartReply_VolumeChartValidationError{}

// Validate checks the field values on DescribeCoinSwapStatsReply_SwapStatInt
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DescribeCoinSwapStatsReply_SwapStatInt) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DescribeCoinSwapStatsReply_SwapStatInt with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// DescribeCoinSwapStatsReply_SwapStatIntMultiError, or nil if none found.
func (m *DescribeCoinSwapStatsReply_SwapStatInt) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinSwapStatsReply_SwapStatInt) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	// no validation rules for Buy

	// no validation rules for Sell

	if len(errors) > 0 {
		return DescribeCoinSwapStatsReply_SwapStatIntMultiError(errors)
	}

	return nil
}

// DescribeCoinSwapStatsReply_SwapStatIntMultiError is an error wrapping
// multiple validation errors returned by
// DescribeCoinSwapStatsReply_SwapStatInt.ValidateAll() if the designated
// constraints aren't met.
type DescribeCoinSwapStatsReply_SwapStatIntMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinSwapStatsReply_SwapStatIntMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinSwapStatsReply_SwapStatIntMultiError) AllErrors() []error { return m }

// DescribeCoinSwapStatsReply_SwapStatIntValidationError is the validation
// error returned by DescribeCoinSwapStatsReply_SwapStatInt.Validate if the
// designated constraints aren't met.
type DescribeCoinSwapStatsReply_SwapStatIntValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinSwapStatsReply_SwapStatIntValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinSwapStatsReply_SwapStatIntValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinSwapStatsReply_SwapStatIntValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinSwapStatsReply_SwapStatIntValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinSwapStatsReply_SwapStatIntValidationError) ErrorName() string {
	return "DescribeCoinSwapStatsReply_SwapStatIntValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinSwapStatsReply_SwapStatIntValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinSwapStatsReply_SwapStatInt.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinSwapStatsReply_SwapStatIntValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinSwapStatsReply_SwapStatIntValidationError{}

// Validate checks the field values on
// DescribeCoinSwapStatsReply_SwapStatDouble with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DescribeCoinSwapStatsReply_SwapStatDouble) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DescribeCoinSwapStatsReply_SwapStatDouble with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// DescribeCoinSwapStatsReply_SwapStatDoubleMultiError, or nil if none found.
func (m *DescribeCoinSwapStatsReply_SwapStatDouble) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinSwapStatsReply_SwapStatDouble) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	// no validation rules for Buy

	// no validation rules for Sell

	if len(errors) > 0 {
		return DescribeCoinSwapStatsReply_SwapStatDoubleMultiError(errors)
	}

	return nil
}

// DescribeCoinSwapStatsReply_SwapStatDoubleMultiError is an error wrapping
// multiple validation errors returned by
// DescribeCoinSwapStatsReply_SwapStatDouble.ValidateAll() if the designated
// constraints aren't met.
type DescribeCoinSwapStatsReply_SwapStatDoubleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinSwapStatsReply_SwapStatDoubleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinSwapStatsReply_SwapStatDoubleMultiError) AllErrors() []error { return m }

// DescribeCoinSwapStatsReply_SwapStatDoubleValidationError is the validation
// error returned by DescribeCoinSwapStatsReply_SwapStatDouble.Validate if the
// designated constraints aren't met.
type DescribeCoinSwapStatsReply_SwapStatDoubleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinSwapStatsReply_SwapStatDoubleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinSwapStatsReply_SwapStatDoubleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinSwapStatsReply_SwapStatDoubleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinSwapStatsReply_SwapStatDoubleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinSwapStatsReply_SwapStatDoubleValidationError) ErrorName() string {
	return "DescribeCoinSwapStatsReply_SwapStatDoubleValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinSwapStatsReply_SwapStatDoubleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinSwapStatsReply_SwapStatDouble.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinSwapStatsReply_SwapStatDoubleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinSwapStatsReply_SwapStatDoubleValidationError{}

// Validate checks the field values on DescribeDeFiCoinsReply_DeFiCoin with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeDeFiCoinsReply_DeFiCoin) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeDeFiCoinsReply_DeFiCoin with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DescribeDeFiCoinsReply_DeFiCoinMultiError, or nil if none found.
func (m *DescribeDeFiCoinsReply_DeFiCoin) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeDeFiCoinsReply_DeFiCoin) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CoinID

	// no validation rules for Price

	// no validation rules for PriceDelta24H

	// no validation rules for Liquidity

	// no validation rules for Volume24H

	// no validation rules for Orders24H

	// no validation rules for Users24H

	// no validation rules for Rank

	if len(errors) > 0 {
		return DescribeDeFiCoinsReply_DeFiCoinMultiError(errors)
	}

	return nil
}

// DescribeDeFiCoinsReply_DeFiCoinMultiError is an error wrapping multiple
// validation errors returned by DescribeDeFiCoinsReply_DeFiCoin.ValidateAll()
// if the designated constraints aren't met.
type DescribeDeFiCoinsReply_DeFiCoinMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeDeFiCoinsReply_DeFiCoinMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeDeFiCoinsReply_DeFiCoinMultiError) AllErrors() []error { return m }

// DescribeDeFiCoinsReply_DeFiCoinValidationError is the validation error
// returned by DescribeDeFiCoinsReply_DeFiCoin.Validate if the designated
// constraints aren't met.
type DescribeDeFiCoinsReply_DeFiCoinValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeDeFiCoinsReply_DeFiCoinValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeDeFiCoinsReply_DeFiCoinValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeDeFiCoinsReply_DeFiCoinValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeDeFiCoinsReply_DeFiCoinValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeDeFiCoinsReply_DeFiCoinValidationError) ErrorName() string {
	return "DescribeDeFiCoinsReply_DeFiCoinValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeDeFiCoinsReply_DeFiCoinValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeDeFiCoinsReply_DeFiCoin.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeDeFiCoinsReply_DeFiCoinValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeDeFiCoinsReply_DeFiCoinValidationError{}

// Validate checks the field values on DescribeCoinSimplesReply_CoinSimple with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DescribeCoinSimplesReply_CoinSimple) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCoinSimplesReply_CoinSimple
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DescribeCoinSimplesReply_CoinSimpleMultiError, or nil if none found.
func (m *DescribeCoinSimplesReply_CoinSimple) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinSimplesReply_CoinSimple) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CoinID

	// no validation rules for Name

	// no validation rules for Symbol

	// no validation rules for Image

	if len(errors) > 0 {
		return DescribeCoinSimplesReply_CoinSimpleMultiError(errors)
	}

	return nil
}

// DescribeCoinSimplesReply_CoinSimpleMultiError is an error wrapping multiple
// validation errors returned by
// DescribeCoinSimplesReply_CoinSimple.ValidateAll() if the designated
// constraints aren't met.
type DescribeCoinSimplesReply_CoinSimpleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinSimplesReply_CoinSimpleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinSimplesReply_CoinSimpleMultiError) AllErrors() []error { return m }

// DescribeCoinSimplesReply_CoinSimpleValidationError is the validation error
// returned by DescribeCoinSimplesReply_CoinSimple.Validate if the designated
// constraints aren't met.
type DescribeCoinSimplesReply_CoinSimpleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinSimplesReply_CoinSimpleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinSimplesReply_CoinSimpleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinSimplesReply_CoinSimpleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinSimplesReply_CoinSimpleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinSimplesReply_CoinSimpleValidationError) ErrorName() string {
	return "DescribeCoinSimplesReply_CoinSimpleValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinSimplesReply_CoinSimpleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinSimplesReply_CoinSimple.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinSimplesReply_CoinSimpleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinSimplesReply_CoinSimpleValidationError{}

// Validate checks the field values on SearchCoinsReply_CoinSimple with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchCoinsReply_CoinSimple) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchCoinsReply_CoinSimple with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchCoinsReply_CoinSimpleMultiError, or nil if none found.
func (m *SearchCoinsReply_CoinSimple) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchCoinsReply_CoinSimple) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CoinID

	// no validation rules for Name

	// no validation rules for Symbol

	// no validation rules for Image

	if len(errors) > 0 {
		return SearchCoinsReply_CoinSimpleMultiError(errors)
	}

	return nil
}

// SearchCoinsReply_CoinSimpleMultiError is an error wrapping multiple
// validation errors returned by SearchCoinsReply_CoinSimple.ValidateAll() if
// the designated constraints aren't met.
type SearchCoinsReply_CoinSimpleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchCoinsReply_CoinSimpleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchCoinsReply_CoinSimpleMultiError) AllErrors() []error { return m }

// SearchCoinsReply_CoinSimpleValidationError is the validation error returned
// by SearchCoinsReply_CoinSimple.Validate if the designated constraints
// aren't met.
type SearchCoinsReply_CoinSimpleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchCoinsReply_CoinSimpleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchCoinsReply_CoinSimpleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchCoinsReply_CoinSimpleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchCoinsReply_CoinSimpleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchCoinsReply_CoinSimpleValidationError) ErrorName() string {
	return "SearchCoinsReply_CoinSimpleValidationError"
}

// Error satisfies the builtin error interface
func (e SearchCoinsReply_CoinSimpleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchCoinsReply_CoinSimple.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchCoinsReply_CoinSimpleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchCoinsReply_CoinSimpleValidationError{}

// Validate checks the field values on DescribeTokensReply_Token with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeTokensReply_Token) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeTokensReply_Token with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DescribeTokensReply_TokenMultiError, or nil if none found.
func (m *DescribeTokensReply_Token) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeTokensReply_Token) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Timestamp

	// no validation rules for Name

	// no validation rules for Symbol

	// no validation rules for CoinID

	// no validation rules for Address

	// no validation rules for Liquidity

	// no validation rules for Chain

	if len(errors) > 0 {
		return DescribeTokensReply_TokenMultiError(errors)
	}

	return nil
}

// DescribeTokensReply_TokenMultiError is an error wrapping multiple validation
// errors returned by DescribeTokensReply_Token.ValidateAll() if the
// designated constraints aren't met.
type DescribeTokensReply_TokenMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeTokensReply_TokenMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeTokensReply_TokenMultiError) AllErrors() []error { return m }

// DescribeTokensReply_TokenValidationError is the validation error returned by
// DescribeTokensReply_Token.Validate if the designated constraints aren't met.
type DescribeTokensReply_TokenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeTokensReply_TokenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeTokensReply_TokenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeTokensReply_TokenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeTokensReply_TokenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeTokensReply_TokenValidationError) ErrorName() string {
	return "DescribeTokensReply_TokenValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeTokensReply_TokenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeTokensReply_Token.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeTokensReply_TokenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeTokensReply_TokenValidationError{}

// Validate checks the field values on DescribeGuruChainsReply_Chain with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeGuruChainsReply_Chain) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeGuruChainsReply_Chain with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DescribeGuruChainsReply_ChainMultiError, or nil if none found.
func (m *DescribeGuruChainsReply_Chain) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeGuruChainsReply_Chain) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Chain

	// no validation rules for Name

	// no validation rules for Description

	if len(errors) > 0 {
		return DescribeGuruChainsReply_ChainMultiError(errors)
	}

	return nil
}

// DescribeGuruChainsReply_ChainMultiError is an error wrapping multiple
// validation errors returned by DescribeGuruChainsReply_Chain.ValidateAll()
// if the designated constraints aren't met.
type DescribeGuruChainsReply_ChainMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeGuruChainsReply_ChainMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeGuruChainsReply_ChainMultiError) AllErrors() []error { return m }

// DescribeGuruChainsReply_ChainValidationError is the validation error
// returned by DescribeGuruChainsReply_Chain.Validate if the designated
// constraints aren't met.
type DescribeGuruChainsReply_ChainValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeGuruChainsReply_ChainValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeGuruChainsReply_ChainValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeGuruChainsReply_ChainValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeGuruChainsReply_ChainValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeGuruChainsReply_ChainValidationError) ErrorName() string {
	return "DescribeGuruChainsReply_ChainValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeGuruChainsReply_ChainValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeGuruChainsReply_Chain.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeGuruChainsReply_ChainValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeGuruChainsReply_ChainValidationError{}

// Validate checks the field values on DescribeCoinsByFieldsReply_Coin with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DescribeCoinsByFieldsReply_Coin) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeCoinsByFieldsReply_Coin with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DescribeCoinsByFieldsReply_CoinMultiError, or nil if none found.
func (m *DescribeCoinsByFieldsReply_Coin) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeCoinsByFieldsReply_Coin) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CoinID

	if all {
		switch v := interface{}(m.GetPrice()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DescribeCoinsByFieldsReply_CoinValidationError{
					field:  "Price",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DescribeCoinsByFieldsReply_CoinValidationError{
					field:  "Price",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeCoinsByFieldsReply_CoinValidationError{
				field:  "Price",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Icon

	if len(errors) > 0 {
		return DescribeCoinsByFieldsReply_CoinMultiError(errors)
	}

	return nil
}

// DescribeCoinsByFieldsReply_CoinMultiError is an error wrapping multiple
// validation errors returned by DescribeCoinsByFieldsReply_Coin.ValidateAll()
// if the designated constraints aren't met.
type DescribeCoinsByFieldsReply_CoinMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeCoinsByFieldsReply_CoinMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeCoinsByFieldsReply_CoinMultiError) AllErrors() []error { return m }

// DescribeCoinsByFieldsReply_CoinValidationError is the validation error
// returned by DescribeCoinsByFieldsReply_Coin.Validate if the designated
// constraints aren't met.
type DescribeCoinsByFieldsReply_CoinValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeCoinsByFieldsReply_CoinValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeCoinsByFieldsReply_CoinValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeCoinsByFieldsReply_CoinValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeCoinsByFieldsReply_CoinValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeCoinsByFieldsReply_CoinValidationError) ErrorName() string {
	return "DescribeCoinsByFieldsReply_CoinValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeCoinsByFieldsReply_CoinValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeCoinsByFieldsReply_Coin.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeCoinsByFieldsReply_CoinValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeCoinsByFieldsReply_CoinValidationError{}

// Validate checks the field values on DescribeTokensByFieldsReply_Token with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DescribeTokensByFieldsReply_Token) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DescribeTokensByFieldsReply_Token
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DescribeTokensByFieldsReply_TokenMultiError, or nil if none found.
func (m *DescribeTokensByFieldsReply_Token) ValidateAll() error {
	return m.validate(true)
}

func (m *DescribeTokensByFieldsReply_Token) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CoinID

	// no validation rules for Address

	if all {
		switch v := interface{}(m.GetPrice()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DescribeTokensByFieldsReply_TokenValidationError{
					field:  "Price",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DescribeTokensByFieldsReply_TokenValidationError{
					field:  "Price",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeTokensByFieldsReply_TokenValidationError{
				field:  "Price",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Icon

	if len(errors) > 0 {
		return DescribeTokensByFieldsReply_TokenMultiError(errors)
	}

	return nil
}

// DescribeTokensByFieldsReply_TokenMultiError is an error wrapping multiple
// validation errors returned by
// DescribeTokensByFieldsReply_Token.ValidateAll() if the designated
// constraints aren't met.
type DescribeTokensByFieldsReply_TokenMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DescribeTokensByFieldsReply_TokenMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DescribeTokensByFieldsReply_TokenMultiError) AllErrors() []error { return m }

// DescribeTokensByFieldsReply_TokenValidationError is the validation error
// returned by DescribeTokensByFieldsReply_Token.Validate if the designated
// constraints aren't met.
type DescribeTokensByFieldsReply_TokenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeTokensByFieldsReply_TokenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeTokensByFieldsReply_TokenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeTokensByFieldsReply_TokenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeTokensByFieldsReply_TokenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeTokensByFieldsReply_TokenValidationError) ErrorName() string {
	return "DescribeTokensByFieldsReply_TokenValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeTokensByFieldsReply_TokenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeTokensByFieldsReply_Token.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeTokensByFieldsReply_TokenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeTokensByFieldsReply_TokenValidationError{}

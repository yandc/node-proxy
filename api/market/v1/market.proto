syntax = "proto3";

package api.market.v1;
import "validate/validate.proto";

option go_package = "datacenter/api/market/v1;v1";
option java_multiple_files = true;
option java_package = "api.market.v1";

service Market {
  rpc DescribeHotCoins (DescribeHotCoinsRequest) returns (DescribeHotCoinsReply);
  rpc DescribeHotCoinsV2 (DescribeHotCoinsRequest) returns (DescribeHotCoinsV2Reply);
  rpc DescribeChainsSupport (DescribeChainsSupportRequest) returns (DescribeChainsSupportReply);
  rpc DescribeAlerts (DescribeAlertsRequest) returns (DescribeAlertsReply);
  rpc CreateAlert (CreateAlertRequest) returns (CreateAlertReply);
  rpc ModifyAlert (ModifyAlertRequest) returns (ModifyAlertReply);
  rpc RemoveAlert (RemoveAlertRequest) returns (RemoveAlertReply);
  rpc DescribeCollectionGuideList (DescribeCollectionGuideListRequest) returns (DescribeCollectionGuideListReply);
  rpc DescribeCollectionGuides (DescribeCollectionGuidesRequest) returns (DescribeCollectionGuidesReply);
  rpc DescribeCoinSwaps (DescribeCoinSwapsRequest) returns (DescribeCoinSwapsReply);
  rpc DescribeCoinLiquidity (DescribeCoinLiquidityRequest) returns (DescribeCoinLiquidityReply);
  rpc DescribeCoinSwapStats (DescribeCoinSwapStatsRequest) returns (DescribeCoinSwapStatsReply);
  rpc DescribeCoinPriceChart (DescribeCoinPriceChartRequest) returns (DescribeCoinPriceChartReply);
  rpc DescribeCoinPriceByRange (DescribeCoinPriceByRangeRequest) returns (DescribeCoinPriceByRangeReply);
  rpc DescribeCoinPriceByTimestamp (DescribeCoinPriceByTimestampRequest) returns (DescribeCoinPriceByTimestampReply);
  rpc DescribeCexCoins(DescribeCexCoinsRequest) returns (DescribeCexCoinsReply);
  rpc DescribeAllExtraDetail (DescribeAllExtraDetailRequest) returns (DescribeAllExtraDetailReply);
  rpc DescribeMarketExtraDetail (DescribeMarketExtraDetailRequest) returns (DescribeMarketExtraDetailReply);
  rpc DescribeMenuCategory (DescribeMenuCategoryRequest) returns (DescribeMenuCategoryReply);
  rpc ModifyMenuCategory (ModifyMenuCategoryRequest) returns (ModifyMenuCategoryReply);
  rpc DescribeCategoryList (DescribeCategoryListRequest) returns (DescribeCategoryListReply);
  rpc ModifyCoinDescription (ModifyCoinDescriptionRequest) returns (ModifyCoinDescriptionReply);
  rpc ModifyCoinCategory (ModifyCoinCategoryRequest) returns (ModifyCoinCategoryReply);
  rpc DescribeColumnList (DescribeColumnListRequest) returns (DescribeColumnListReply);
  rpc CreateColumn (CreateColumnRequest) returns (CreateColumnReply);
  rpc RemoveColumn (RemoveColumnRequest) returns (RemoveColumnReply);
  rpc ModifyColumn (ModifyColumnRequest) returns (ModifyColumnReply);
  rpc CreateCoinCategory(CreateCoinCategoryRequest) returns (CreateCoinCategoryReply);
  rpc DescribeCoinUserChart (DescribeCoinUserChartRequest) returns (DescribeCoinUserChartReply);
  rpc DescribeCoinOrderChart (DescribeCoinOrderChartRequest) returns (DescribeCoinOrderChartReply);
  rpc DescribeCoinVolumeChart (DescribeCoinVolumeChartRequest) returns (DescribeCoinVolumeChartReply);
  rpc DescribeCoinLiquidityChart (DescribeCoinLiquidityChartRequest) returns (DescribeCoinLiquidityChartReply);
  rpc DescribeDeFiCoins (DescribeDeFiCoinsRequest) returns (DescribeDeFiCoinsReply);
  rpc DescribeCoinSimples (DescribeCoinSimplesRequest) returns (DescribeCoinSimplesReply);
  rpc SearchCoins (SearchCoinsRequest) returns (SearchCoinsReply);
  rpc DescribeTokens (DescribeTokensRequest) returns (DescribeTokensReply);
  rpc DescribeGuruChains (DescribeGuruChainsRequest) returns (DescribeGuruChainsReply);
  rpc DescribeSwapConfig (DescribeSwapConfigRequest) returns (DescribeSwapConfigReply);
  rpc DescribeCoinsByFields (DescribeCoinsByFieldsRequest) returns (DescribeCoinsByFieldsReply);
  rpc DescribeTokensByFields (DescribeTokensByFieldsRequest) returns (DescribeTokensByFieldsReply);
  rpc DescribePriceByCoinAddress (DescribePriceByCoinAddressRequest) returns (DescribePriceByCoinAddressReply);
  rpc DescribeCoinIDByTokens (DescribeCoinIDByTokensRequest) returns (DescribeCoinIDByTokensReply);
  rpc CreateCoinGuide (CreateCoinGuideRequest) returns (CreateCoinGuideReply);
  rpc DeleteCoinGuide (DeleteCoinGuideRequest) returns (DeleteCoinGuideReply);
  rpc ModifyCoinGuide (ModifyCoinGuideRequest) returns (ModifyCoinGuideReply);
  rpc DescribeWhiteTokens (DescribeWhiteTokensRequest) returns (DescribeWhiteTokensReply);
  rpc CreateChain (CreateChainRequest) returns (CreateChainReply);
  rpc ModifyChain (ModifyChainRequest) returns (NoneReply);
  rpc DeleteChain (DeleteChainRequest) returns (NoneReply);
  rpc CreateChainRelation (CreateChainRelationRequest) returns (NoneReply);
  rpc DeleteChainRelation (DeleteChainRelationRequest) returns (NoneReply);
  rpc CheckCoins (CheckCoinsRequest) returns (CheckCoinsReply);
  rpc DescribeDex (DescribeDexRequest) returns (DescribeDexReply);
  rpc DescribePairs (DescribePairsRequest) returns (DescribePairsReply);
  rpc DescribePair (DescribePairRequest) returns (DescribePairReply);
  rpc DescribePairTrends (DescribePairTrendsRequest) returns (DescribePairTrendsReply);
  rpc DescribePairTrendsV2 (DescribePairTrendsV2Request) returns (DescribePairTrendsV2Reply);
  rpc SearchCoinAndPair (SearchCoinAndPairRequest) returns (SearchCoinAndPairReply);
  rpc AddCollection(AddCollectionRequest) returns (AddCollectionReply);
  rpc RemoveCollection(RemoveCollectionRequest) returns (RemoveCollectionReply);
  rpc DescribeCollections(DescribeCollectionsRequest) returns (DescribeCollectionsReply);
  rpc CreateDex (CreateDexRequest) returns (CreateDexReply);
  rpc ModifyDex (ModifyDexRequest) returns (NoneReply);
  rpc DeleteDex (DeleteDexRequest) returns (NoneReply);
  rpc DescribeRate (DescribeRateRequest) returns (DescribeRateReply);
  rpc DescribePairGuides (DescribePairGuidesRequest) returns (DescribePairGuidesReply);
  rpc DescribeCoinsByChain(DescribeCoinsByChainRequest) returns (DescribeCoinsByChainReply);
}

message AddCollectionRequest {
  string eventId = 1;
  string userID = 2 [(validate.rules).string.min_len = 1];
  repeated string coinIDs = 3 [(validate.rules).repeated = {min_items: 1}];
  int32 type = 4 [(validate.rules).int32 = {in:[1, 2]}];
}
message AddCollectionReply {
  string code = 1;
  string message = 2;
  string eventId = 3;
}

message RemoveCollectionRequest {
  string eventId = 1;
  string userID = 2 [(validate.rules).string.min_len = 1];
  string coinID = 3 [(validate.rules).string.min_len = 1];
}
message RemoveCollectionReply {
  string code = 1;
  string message = 2;
  string eventId = 3;
}

message DescribeCollectionsRequest {
  enum SortFieldEnum {
    Price = 0;
    PriceDelta24h = 1;
    Volume24h = 2;
    MarketCap = 3;
    PriceDelta7d = 4;

    PairPriceDelta5m = 5;
    PairPriceDelta1h = 6;
    PairPriceDelta6h = 7;
    PairPriceDelta24h = 8;
    PairVolume24h = 9;
    PairOrders24h = 10;
    PairFdv = 11;
    PairLiquidity = 12;
    PairPrice = 13;
  }
  string eventId = 1;
  string userID = 2 [(validate.rules).string.min_len = 1];
  int32 type = 3 [(validate.rules).int32 = {in:[1, 2]}];
  string currency = 4 [(validate.rules).string.min_len = 1];
  int32 page = 5 [(validate.rules).int32 = {gt: 0}];
  int32 pageSize = 6 [(validate.rules).int32 = {gt: 0, lte:100}];
  SortFieldEnum sortField = 7;
  string sortType = 8 [(validate.rules).string = {in:["", "asc", "desc"]}];
}

message DescribeCollectionsReply {
  int32 total = 1;
  int32 type = 2 [(validate.rules).int32 = {in:[1, 2]}];
  repeated  Coin coins = 3;
  message Coin {
    int32 rank = 1;
    string coinID = 2;
    double price = 6;
    double delta1h = 7;
    double delta24h = 8;
    double delta7d = 9;
    double delta30d = 10;
    double delta1y = 11;
    double volume24h = 12;
    double marketCap = 13;
    double fullyDilutedValuation = 14;
    double totalSupply = 15;
    double maxSupply = 16;
    double circulatingSupply = 17;
    double high24 = 18;
    double low24 = 19;
    string sparkline7d = 20;
    repeated string category = 21;
    string updatedAt = 22;
    string image = 23;
    string name = 24;
    string symbol = 25;
    int32  isFocus = 26;
  }
  repeated Pair pairs = 4;
  message Pair {
    string address = 1;
    string chain = 2;
    string dexID = 3;
    string dexIcon = 4;
    string baseToken = 5;
    string quoteToken = 6;
    string stat5m = 7;
    string stat1h = 8;
    string stat6h = 9;
    string stat24h = 10;
    double fdv = 11;
    double liquidity = 12;
    double price = 13;
    int32 isFocus = 14;
    uint32 createdAt = 15;
  }
}

message SearchCoinAndPairRequest {
  string eventId = 1;
  string keyword = 2 [(validate.rules).string.min_len = 1];
  int32 pageSize = 3 [(validate.rules).int32 = {gt: 0, lte:100}];
}

message SearchCoinAndPairReply {
  repeated CoinAndPair coins = 1;
}
message CoinAndPair {
  string coinID = 1;
  string name = 2;
  string symbol = 3;
  string image = 4;
  int32 type = 5;
  string chainIcon = 6;
  string dexIcon = 7;
  float price = 8;
  float priceDelta = 9;
  float liquidity = 10;
  float volume = 11;
  int32 createdAt = 12;
  string pairAddress = 13;
  Token baseToken = 14;
  Token quoteToken = 15;
  string chain = 16;
  string dexID = 17;
  message Token {
    string name = 1;
    string symbol = 2;
    string address = 3;
  }
}

message DescribeDexRequest {
  string eventId = 1;
  optional string chain = 2;
}
message DescribeDexReply {
  repeated Dex dexes = 1;
  message Dex {
    string dexID = 1;
    string name = 2;
    int64 weight = 3;
    string image = 4;
  }
}

message DescribeHotCoinsRequest {
  string eventId = 1;
  int32 limit = 2;
  string currency = 3 [(validate.rules).string.min_len = 1];
}
message DescribeHotCoinsReply {
  repeated HotCoin coins = 1;
  message HotCoin {
    string coinID = 1;
    string name = 2;
    string symbol = 3;
    string image = 4;
    float priceDelta = 5;
    float price = 6;
  }
}

message DescribeHotCoinsV2Reply{
  repeated HotCoin coins = 1;
  message HotCoin {
    string coinID = 1;
    string name = 2;
    string symbol = 3;
    string image = 4;
    double delta24h = 5;
    double price = 6;
    double volume24h = 7;
    double marketCap = 8;
    string sparkline7d = 9;
  }
}

message DescribeChainsSupportRequest {
  string eventId = 1;
  int32 type = 2 [(validate.rules).int32 = {in:[1, 2]}];
}

message DescribeChainsSupportReply {
  repeated Chain chains = 1;
  message Chain {
    string chain = 1;
    string name = 2;
    string icon = 3;
  }
}

message ModifyAlertRequest {
  string eventId = 1;
  int32 alertID = 2;
  int32 alertType = 3 [(validate.rules).int32 = {in:[1, 2, 3]}];
  string currency = 4 [(validate.rules).string.min_len = 1];
  string value = 5;
  int32 frequency = 6 [(validate.rules).int32 = {in:[1, 2]}];
}
message ModifyAlertReply {
  string code = 1;
  string message = 2;
  string eventId = 3;
}

message DescribeAlertsRequest {
  string eventId = 1;
  string userID = 2 [(validate.rules).string.min_len = 1];
}
message DescribeAlertsReply {
  repeated CoinAlerts coinAlerts = 1;
  message CoinAlerts {
    string coinID = 1;
    repeated Alerts alerts = 2;
    int32 Type = 3;
    message Alerts{
      int32 alertID = 1;
      int32 alertType = 2 [(validate.rules).int32 = {in:[1, 2, 3]}];
      string value = 3;
      int32 frequency = 4 [(validate.rules).int32 = {in:[1, 2]}];
      string currency = 5 [(validate.rules).string.min_len = 1];
      int32 type = 6 [(validate.rules).int32 = {in:[1, 2]}];
    }
  }
}

message CreateAlertRequest {
  string eventId = 1;
  int32 alertID = 2;
  string userID = 3 [(validate.rules).string.min_len = 1];
  string coinID = 4 [(validate.rules).string.min_len = 1];
  int32 alertType = 5 [(validate.rules).int32 = {in:[1, 2, 3]}];
  string currency = 6 [(validate.rules).string.min_len = 1];
  string value = 7;
  int32 frequency = 8 [(validate.rules).int32 = {in:[1, 2]}];
  int32 type = 9 [(validate.rules).int32 = {in:[1, 2]}];
}

message CreateAlertReply {
  string code = 1;
  string message = 2;
  string eventId = 3;
}

message RemoveAlertRequest {
  string eventId = 1;
  int32 alertID = 2;
}
message RemoveAlertReply {
  string code = 1;
  string message = 2;
  string eventId = 3;
}

message DescribeCollectionGuideListRequest {
  string eventId = 1;
  int32 coinType = 2 [(validate.rules).int32 = {in:[1, 2]}];
}

message DescribeCollectionGuideListReply {
  repeated Guide guideList = 1;
  message Guide{
    string coinID = 1;
    int32 weight = 2;
  }
}

message ModifyColumnRequest {
  string eventId = 1;
  int32 columnID = 2;
  map<string, string> name = 3;
  repeated string category = 4;
  int32 type = 5 [(validate.rules).int32 = {in:[1, 2]}];
  int32 weight = 6;
  optional bool valid = 7;
}
message ModifyColumnReply {
  string code = 1;
  string message = 2;
  string eventId = 3;
}
message RemoveColumnRequest {
  string eventId = 1;
  repeated int32 columnIDs = 2;
}

message RemoveColumnReply {
  string code = 1;
  string message = 2;
  string eventId = 3;
}

message CreateColumnRequest {
  string eventId = 1;
  map<string, string> name = 2;
  repeated string category = 3;
  int32 type = 4;
  int32 weight = 5;
  optional bool valid = 6;
}

message CreateColumnReply {
  string code = 1;
  string message = 2;
  string eventId = 3;
}

message DescribeColumnListRequest {
  string eventId = 1;
  string name = 2;
  int32 type = 3;
  string category = 4;
  optional bool valid = 5;
  int32 page = 6 [(validate.rules).int32 = {gt: 0}];
  int32 pageSize = 7 [(validate.rules).int32 = {gt: 0, lte:100}];
}
message DescribeColumnListReply {
  int32 total = 1;
  repeated Column columns = 2;
  message Column {
    int32 columnID = 1;
    map<string, string> name = 2;
    int32 type = 4;
    repeated string category = 7;
    int32 weight = 8;
    bool valid = 9;
  }
}

message DescribeAllExtraDetailRequest {
  string eventId = 1;
  string coinID = 2 [(validate.rules).string.min_len = 1];
}

message DescribeAllExtraDetailReply {
  string coinID = 1;
  repeated string homePage = 2;
  repeated string blockChainSite = 3;
  string genesisDate = 4;
  repeated string dexCategory = 5;
  map<string, string> desc = 6;
}

message DescribeCategoryListRequest {
  string eventId = 1;
}
message DescribeCategoryListReply {
  repeated string category = 1;
}

message ModifyMenuCategoryRequest {
  string eventId = 1;
  int32 type = 2 [(validate.rules).int32 = {in:[1, 2]}];
  repeated string category = 3;
}
message ModifyMenuCategoryReply {
  string code = 1;
  string message = 2;
  string eventId = 3;
}

message CreateCoinCategoryRequest {
  string eventId = 1;
  string category = 2 [(validate.rules).string.min_len = 1];
}
message CreateCoinCategoryReply {
  string code = 1;
  string message = 2;
  string eventId = 3;
}

message ModifyCoinDescriptionRequest {
  string eventId = 1;
  string coinID = 2 [(validate.rules).string.min_len = 1];
  map<string, string> desc = 3;
}

message ModifyCoinDescriptionReply {
  string code = 1;
  string message = 2;
  string eventId = 3;
  string coinID = 4;
}

message DescribeCexCoinsRequest{
  enum SortFieldEnum {
    Price = 0;
    PriceDelta24h = 1;
    Volume24h = 2;
    MarketCap = 3;
    PriceDelta7d = 4;
  }
  string eventId = 1;
  repeated string coinIDs = 2;
  string currency = 3 [(validate.rules).string.min_len = 1];
  optional string category = 4 [(validate.rules).string.min_len = 1];
  int32 page = 5 [(validate.rules).int32 = {gt: 0}];
  int32 pageSize = 6 [(validate.rules).int32 = {gt: 0, lte:100}];
  SortFieldEnum sortField = 7 [(validate.rules).enum = {defined_only: true}];
  string sortType = 8;
  int32 columnID = 9;
  string chain = 10;
  string range = 11;
  string rangeWithTime = 12;
  repeated Sort sort = 13;
  message Sort {
    SortFieldEnum sortField = 1 [(validate.rules).enum = {defined_only: true}];
    string sortType = 2;
  }
}

message DescribeCexCoinsReply{
  repeated Coin coins = 1;
  int32 total = 2;
  message Coin {
    int32 rank = 1;
    string coinID = 2;
    double price = 6;
    double delta1h = 7;
    double delta24h = 8;
    double delta7d = 9;
    double delta30d = 10;
    double delta1y = 11;
    double volume24h = 12;
    double marketCap = 13;
    double fullyDilutedValuation = 14;
    double totalSupply = 15;
    double maxSupply = 16;
    double circulatingSupply = 17;
    double high24 = 18;
    double low24 = 19;
    string sparkline7d = 20;
    repeated string category = 21;
    string updatedAt = 22;
    string image = 23;
    string name = 24;
    string symbol = 25;
  }
}


message ModifyCoinCategoryRequest {
  string eventId = 1;
  string coinID = 2 [(validate.rules).string.min_len = 1];
  int32 type = 3 [(validate.rules).int32 = {in:[1, 2]}];
  repeated string category = 4;
}
message ModifyCoinCategoryReply {
  string code = 1;
  string message = 2;
  string eventId = 3;
  string coinID = 4;
}

message DescribeMenuCategoryRequest {
  string eventId = 1;
  int32 type = 2 [(validate.rules).int32 = {in:[1, 2]}];
}
message DescribeMenuCategoryReply {
  repeated string category = 1;
}

message DescribeMarketExtraDetailRequest {
  string eventId = 1;
  string currency = 2 [(validate.rules).string.min_len = 1];
  string coinID = 3 [(validate.rules).string.min_len = 1];
  string lang = 4 [(validate.rules).string.min_len = 1];
}

message DescribeMarketExtraDetailReply {
  string coinID = 1;
  string genesisDate = 2;
  string description = 3;
  repeated string homePage = 4;
  repeated string blockChainSite = 5;
  repeated ChainAddress chainAddress = 6;
  message ChainAddress {
    string chain = 1;
    string address = 2;
    string icon = 3;
  }
  SocialLink socialLink = 7;
  message SocialLink {
    string twitter = 1;
    string facebook = 2;
    string reddit = 3;
    string telegram = 4;
  }
}

message DescribeCoinPriceChartRequest {
  string eventId = 1;
  string coinID = 2;
  string vsCurrency = 3 [(validate.rules).string.min_len = 1];
  int32 days = 4 [(validate.rules).int32 = {gt: 0, lte:11430}];
  string chain = 5;
  string tokenAddress = 6;
}

message DescribeCoinPriceChartReply {
  repeated PriceChart prices = 1;
  message PriceChart {
    uint32 timestamp = 1;
    double price = 2;
  }
  repeated CapChart market_caps = 2;
  message CapChart {
    uint32 timestamp = 1;
    double cap = 2;
  }
  repeated VolumeChart total_volumes = 3;
  message VolumeChart {
    uint32 timestamp = 1;
    double volume = 2;
  }
}

message DescribeCoinPriceByRangeRequest {
  string eventId = 1;
  string coinID = 2;
  string currency = 3 [(validate.rules).string.min_len = 1];
  uint32 from = 4;
  uint32 to = 5;
  string chain = 6;
  string tokenAddress = 7;
}

message DescribeCoinPriceByRangeReply {
  repeated Price prices = 1;
  message Price {
    uint32 timestamp = 1;
    double price = 2;
  }
}

message DescribeCoinPriceByTimestampRequest {
  string eventId = 1;
  string coinID = 2;
  uint32 timestamp = 4;
  string chain = 5;
  string tokenAddress = 6;
}

message DescribeCoinPriceByTimestampReply {
  Currency price = 1;
}

message DescribeCoinSwapsRequest {
  string eventId = 1;
  string coinID = 2 [(validate.rules).string.min_len = 1];
  string currency = 3 [(validate.rules).string.min_len = 1];
  uint32 beginTimestamp = 4;
  uint32 endTimestamp = 5;
  int32 page = 6 [(validate.rules).int32 = {gt: 0}];
  int32 pageSize = 7 [(validate.rules).int32 = {gt: 0, lte:500}];
}

message DescribeCoinSwapsReply {
  repeated CoinSwapsDetail swaps = 1;
  message CoinSwapsDetail {
    string UUID = 1;
    uint32 timestamp = 2;
    string amm = 3;
    string chain = 4;
    double price = 5;
    string senderCoinID = 6;
    string receiverCoinID = 7;
    string senderAddress = 8;
    string receiverAddress = 9;
    string tokenIn = 10;
    string tokenOut = 11;
    string pairAddress = 12;
    string walletAddress = 13;
    uint32 blockNumber = 14;
    string walletCategory = 15;
    string transType = 16;
    string transAddress = 17;
  }
  uint64 total = 2;
}

message DescribeCoinLiquidityRequest {
  string eventId = 1;
  string coinID = 2 [(validate.rules).string.min_len = 1];
  string currency = 3 [(validate.rules).string.min_len = 1];
  uint32 beginTimestamp = 4;
  uint32 endTimestamp = 5;
  int32 page = 6 [(validate.rules).int32 = {gt: 0}];
  int32 pageSize = 7 [(validate.rules).int32 = {gt: 0, lte:500}];
}

message DescribeCoinLiquidityReply {
  repeated CoinLiquidityDetail liquidity = 1;
  message CoinLiquidityDetail {
    string UUID = 1;
    uint32 timestamp = 2;
    string amm = 3;
    string chain = 4;
    double price = 5;
    string token1CoinID = 6;
    string token2CoinID = 7;
    string token1Address = 8;
    string token2Address = 9;
    string token1 = 10;
    string token2 = 11;
    string pairAddress = 12;
    string walletAddress = 13;
    uint32 blockNumber = 14;
    string transType = 15;
    string transAddress = 16;
  }
  uint64 total = 2;
}

message DescribeCoinLiquidityChartRequest {
  string eventId = 1;
  string coinID = 2 [(validate.rules).string.min_len = 1];
  string currency = 3 [(validate.rules).string.min_len = 1];
  int32 days = 4 [(validate.rules).int32 = {gt: 0, lte:11430}];
}

message DescribeCoinLiquidityChartReply {
  repeated LiquidityChart liquidity = 1;
  message LiquidityChart {
    uint32 timestamp = 1;
    double price = 2;
  }
}

message DescribeCoinUserChartRequest {
  string eventId = 1;
  string coinID = 2 [(validate.rules).string.min_len = 1];
  int32 days = 3 [(validate.rules).int32 = {gt: 0, lte:11430}];
}

message DescribeCoinUserChartReply {
  repeated UserChart users = 1;
  message UserChart {
    uint32 timestamp = 1;
    int32 buy = 2;
    int32 sell = 3;
    int32 total = 4;
  }
}

message DescribeCoinOrderChartRequest {
  string eventId = 1;
  string coinID = 2 [(validate.rules).string.min_len = 1];
  int32 days = 3 [(validate.rules).int32 = {gt: 0, lte:11430}];
}

message DescribeCoinOrderChartReply {
  repeated OrderChart orders = 1;
  message OrderChart {
    uint32 timestamp = 1;
    int32 buy = 2;
    int32 sell = 3;
    int32 total = 4;
  }
}

message DescribeCoinVolumeChartRequest {
  string eventId = 1;
  string coinID = 2 [(validate.rules).string.min_len = 1];
  string currency = 3 [(validate.rules).string.min_len = 1];
  int32 days = 4 [(validate.rules).int32 = {gt: 0, lte:11430}];
}

message DescribeCoinVolumeChartReply {
  repeated VolumeChart volumes = 1;
  message VolumeChart {
    uint32 timestamp = 1;
    double buy = 2;
    double sell = 3;
    double total = 4;
  }
}

message DescribeCoinSwapStatsRequest {
  string eventId = 1;
  string coinID = 2 [(validate.rules).string.min_len = 1];
  string currency = 3 [(validate.rules).string.min_len = 1];
}

message DescribeCoinSwapStatsReply {
  message SwapStatInt {
    int32 total = 1;
    int32 buy = 2;
    int32 sell = 3;
  }
  message SwapStatDouble {
    double total = 1;
    double buy = 2;
    double sell = 3;
  }
  double liquidity = 1;
  SwapStatDouble volume24h = 2;
  SwapStatInt orders24h = 3;
  SwapStatInt users24h = 4;
}

message DescribeDeFiCoinsRequest {
  enum SortFieldDefine {
    Liquidity = 0;
    Volume24h = 1;
    Orders24h = 2;
    Users24h = 3;
    Price = 4;
    PriceDelta24h = 5;
    Name = 6;
  }
  string eventId = 1;
  string currency = 2 [(validate.rules).string.min_len = 1];
  int32 page = 3 [(validate.rules).int32 = {gt: 0}];
  int32 pageSize = 4 [(validate.rules).int32 = {gt: 0, lte:100}];
  SortFieldDefine sortField = 5 [(validate.rules).enum = {defined_only: true}];
  string sortType = 6;
  string category = 7;
  string coinID = 8;
  repeated string coinIDs = 9;
  int32 columnID = 10;
  string chain = 11;
  string range = 12;
  string rangeWithTime = 13;
}

message DescribeDeFiCoinsReply {
  repeated DeFiCoin coins = 1;
  int32 total = 2;

  message DeFiCoin {
    string coinID = 1;
    double price = 2;
    double priceDelta24h = 3;
    double liquidity = 4;
    double volume24h = 5;
    int32 orders24h = 6;
    int32 users24h = 7;
    repeated string category = 8;
    int32 rank = 9;
  }
}

message DescribeCoinSimplesRequest {
  string eventId = 1;
  repeated string coinIDs = 2 [(validate.rules).repeated = {min_items: 1}];
}

message DescribeCoinSimplesReply {
  repeated CoinSimple coins = 1;
}

message SearchCoinsRequest {
  string eventId = 1;
  string keyword = 2 [(validate.rules).string.min_len = 1];
  int32 pageSize = 3 [(validate.rules).int32 = {gt: 0, lte:100}];
}

message SearchCoinsReply {
  repeated CoinSimple coins = 1;
}

message DescribeTokensRequest {
  string eventId = 1;
  string coinID = 2;
  string symbol = 3;
  string address = 4;
  string chain = 5;
  int32 page = 6 [(validate.rules).int32 = {gt: 0}];
  int32 pageSize = 7 [(validate.rules).int32 = {gt: 0, lte:100}];
}

message DescribeTokensReply {
  int32 total = 1;
  repeated Token tokens = 2;
  message Token {
    uint32 timestamp = 1;
    string name = 2;
    string symbol = 3;
    string coinID = 4;
    string address = 5;
    double liquidity = 6;
    string chain = 7;
  }
}

message DescribeGuruChainsRequest {
  string eventId = 1;
}

message DescribeGuruChainsReply {
  repeated Chain chains = 1;
  message Chain {
    string chain = 1;
    string name = 2;
    string description = 3;
  }
}

message DescribeSwapConfigRequest {
  string eventId = 1;
  string coinID = 2 [(validate.rules).string.min_len = 1];
  int32 client = 3 [(validate.rules).int32 = {in:[1, 2]}];
}

message DescribeSwapConfigReply {
  int32 category = 1;
  string config = 2;
}

message DescribeCoinsByFieldsRequest {
  string eventId = 1;
  repeated string coinIDs = 2 [(validate.rules).repeated = {min_items: 1, max_items: 100}];
  repeated string fields = 3 [(validate.rules).repeated = {min_items: 1}];
}

message DescribeCoinsByFieldsReply {
  repeated Coin coins = 1;
  message Coin {
    string coinID = 1;
    Currency price = 2;
    string icon = 3;
  }
}

message DescribeTokensByFieldsRequest {
  string eventId = 1;
  repeated string address = 2 [(validate.rules).repeated = {min_items: 1, max_items: 100}];
  repeated string fields = 3 [(validate.rules).repeated = {min_items: 1}];
}

message DescribeTokensByFieldsReply {
  repeated Token tokens = 1;
  message Token {
    string coinID = 1;
    string address = 2;
    Currency price = 3;
    string icon = 4;
  }
}

message DescribePriceByCoinAddressRequest {
  string eventId = 1;
  repeated string coinIDs = 2 [(validate.rules).repeated = {min_items: 0, max_items: 1000}];
  repeated Tokens tokens = 3 [(validate.rules).repeated = {min_items: 0, max_items: 1000}];

}

message DescribePriceByCoinAddressReply {
  repeated  CoinCurrency coins = 1;
  repeated Tokens tokens = 2;

  message Tokens {
    Currency price = 1;
    string chain = 2;
    string address = 3;
    string icon = 4;
    string coinID = 5;
    int32 decimalPlace = 6;
  }

  message CoinCurrency {
    Currency price = 1;
    string icon = 2;
    string coinID = 3;
  }
}

message DescribeCoinIDByTokensRequest {
  string eventId = 1;
  repeated Tokens tokens = 2 [(validate.rules).repeated = {min_items: 1, max_items: 1000}];
}

message DescribeCoinIDByTokensReply {
  repeated Coin coins = 1;

  message Coin {
    string coinID = 1;
    string chain = 2;
    string address = 3;
  }
}

message Currency {
  double cny = 1;
  double usd = 2;
}

message Tokens {
  string chain = 1 [(validate.rules).string.min_len = 1];
  string address = 2 [(validate.rules).string.min_len = 1];
}

message CreateCoinGuideRequest {
  string eventId = 1;
  string coinID = 2 [(validate.rules).string.min_len = 1];
  int32 weight = 3 [(validate.rules).int32 = {gte: 0}];
}

message CreateCoinGuideReply {
  int32 id = 1;
}

message ModifyCoinGuideRequest {
  string eventId = 1;
  string coinID = 2 [(validate.rules).string.min_len = 1];
  int32 weight = 3 [(validate.rules).int32 = {gte: 0}];
}

message ModifyCoinGuideReply {
}

message DeleteCoinGuideRequest {
  string eventId = 1;
  string coinID = 2 [(validate.rules).string.min_len = 1];
}

message DeleteCoinGuideReply {
}

message DescribeWhiteTokensRequest {
  string eventId = 1;
  string chain = 2 [(validate.rules).string.min_len = 1];
  int32 limit = 3 [(validate.rules).int32 = {gte: 0}];
  string currency = 4 [(validate.rules).string.min_len = 1];
}

message DescribeWhiteTokensReply {
  repeated Coin coins = 1;
  message Coin {
    string coinID = 1;
    string address = 2;
    string symbol = 3;
    string icon = 4;
    double price = 5;
  }
}

message CreateChainRequest {
  string eventId = 1;
  string chain = 2 [(validate.rules).string.min_len = 1];
  string name = 3 [(validate.rules).string.min_len = 1];
  int32 weight = 4 [(validate.rules).int32 = {gte: 0}];
  string icon = 5;
}

message CreateChainReply {
  int32 id = 1;
}

message ModifyChainRequest{
  string eventId = 1;
  int32 id = 2 [(validate.rules).int32 = {gt: 0}];
  string name = 3 [(validate.rules).string.min_len = 1];
  int32 weight = 4 [(validate.rules).int32 = {gte: 0}];
  string icon = 5;
}

message DeleteChainRequest {
  string eventId = 1;
  int32 id = 2;
}

message CreateChainRelationRequest{
  string eventId = 1;
  string chain = 2 [(validate.rules).string.min_len = 1];
  string trdChain = 3 [(validate.rules).string.min_len = 1];
  int32 trdType = 4 [(validate.rules).int32 = {in:[1, 2, 3]}];
}

message DeleteChainRelationRequest{
  string eventId = 1;
  int32 id = 2 [(validate.rules).int32.gt = 0];
}

message DescribeCollectionGuidesRequest{
  string eventId = 1;
  int32 pageSize = 2 [(validate.rules).int32 = {gt: 0, lte:50}];
}

message DescribeCollectionGuidesReply{
  repeated CoinSimple coins = 1;
}

message CheckCoinsRequest {
  string eventId = 1;
  repeated string coinIDs = 2 [(validate.rules).repeated = {min_items: 1, max_items: 100}];
}

message CheckCoinsReply {
  repeated Coin coins = 1;
  message Coin {
    string coinID = 1;
    int32 isCex = 2;
    int32 isDex = 3;
  }
}

message CoinSimple {
  string coinID = 1;
  string name = 2;
  string symbol = 3;
  string image = 4;
}

message PairSimple {
  string chain = 1;
  string address = 2;
  string dexID = 3;
  string dexIcon = 4;
  string baseToken = 5;
  string quoteToken = 6;
}

message NoneReply{
}

message DescribePairsRequest {
  string eventId = 1;
  string chain = 2;
  string address = 3;
  string currency = 4 [(validate.rules).string = {in:["usd", "cny"]}];
  string dexID = 5;
  string userID = 6;
  int32 page = 7 [(validate.rules).int32 = {gt: 0}];
  int32 pageSize = 8 [(validate.rules).int32 = {gt: 0, lte:100}];
  string sortField = 9 [(validate.rules).string = {in:["", "price_delta.5m", "price_delta.1h", "price_delta.6h", "price_delta.24h", "volume_24h", "orders_24h", "fdv", "liquidity", "price"]}];
  string sortType = 10 [(validate.rules).string = {in:["", "asc", "desc"]}];
}

message DescribePairsReply {
  repeated Pair pairs = 1;
  int32 total = 2;
}

message Pair {
  string address = 1;
  string chain = 2;
  string dexID = 3;
  string dexIcon = 4;
  string baseToken = 5;
  string quoteToken = 6;
  string stat5m = 7;
  string stat1h = 8;
  string stat6h = 9;
  string stat24h = 10;
  double fdv = 11;
  double liquidity = 12;
  double price = 13;
  int32 isFocus = 14;
}

message DescribePairRequest {
  string eventId = 1;
  string chain = 2 [(validate.rules).string.min_len = 1];
  string address = 3 [(validate.rules).string.min_len = 1];
  string currency = 4 [(validate.rules).string = {in:["usd", "cny"]}];
  string userID = 5;
}

message DescribePairReply {
  Pair pair = 1;
  message Pair {
    string address = 1;
    string chain = 2;
    string dexID = 3;
    string dexIcon = 4;
    string baseToken = 5;
    string quoteToken = 6;
    string stat5m = 7;
    string stat1h = 8;
    string stat6h = 9;
    string stat24h = 10;
    double fdv = 11;
    double liquidity = 12;
    double price = 13;
    int32 isFocus = 14;
    string dexScreenerChain = 15;
    uint32 createdAt = 16;
  }
}

message DescribePairTrendsRequest {
  string eventId = 1;
  int32 limit = 2 [(validate.rules).int32 = {gte: 0, lte:100}];
  int32 type = 3 [(validate.rules).int32 = {in:[1, 2]}];
  string currency = 4 [(validate.rules).string = {in:["usd", "cny"]}];
  string userID = 5;
}

message DescribePairTrendsReply {
  repeated PairTrend pairs = 1;
  message PairTrend {
    string address = 1;
    string chain = 2;
    string dexIcon = 3;
    string baseToken = 4;
    string quoteToken = 5;
    double price = 6;
    double priceDelta = 7;
    string dexID = 8;
    int32 isFocus = 9;
  }
}

message DescribePairTrendsV2Request {
  string eventId = 1;
  int32 limit = 2 [(validate.rules).int32 = {gte: 0, lte:100}];
  string currency = 3 [(validate.rules).string = {in:["usd", "cny"]}];
  string userID = 4;
}

message DescribePairTrendsV2Reply {
  repeated Pair pairs = 1;
}

message CreateDexRequest {
  string eventId = 1;
  string dexID = 2 [(validate.rules).string.min_len = 1];
  string name = 3 [(validate.rules).string.min_len = 1];
  int32 weight = 4 [(validate.rules).int32 = {gte: 0}];
  string icon = 5;
}

message CreateDexReply {
  int32 id = 1;
}

message ModifyDexRequest {
  string eventId = 1;
  int32 id = 2 [(validate.rules).int32 = {gt: 0}];
  string name = 3 [(validate.rules).string.min_len = 1];
  int32 weight = 4 [(validate.rules).int32 = {gte: 0}];
  string icon = 5;
}

message DeleteDexRequest {
  string eventId = 1;
  int32 id = 2;
}

message DescribeRateRequest {
  string eventId = 1;
  string currency = 2 [(validate.rules).string = {in: ["cny", "usd"]}];
}

message DescribeRateReply {
  double rate = 1;
}

message DescribePairGuidesRequest {
  string eventId = 1;
  int32 pageSize = 2 [(validate.rules).int32 = {gt: 0, lte:50}];
}

message DescribePairGuidesReply {
  repeated PairSimple pairs = 1;
}

message DescribeCoinsByChainRequest{
  string eventId = 1;
  string chain = 2;
  int32 page = 3 [(validate.rules).int32 = {gt: 0}];
  int32 pageSize = 4 [(validate.rules).int32 = {gt: 0, lte:500}];
}

message DescribeCoinsByChainReply{
  repeated Coin coins = 1;
  message Coin {
    string coinID = 1;
    string address = 2;
    string symbol = 3;
    string icon = 4;
    string description = 5;
    repeated string homepage = 6;
    int32 decimalPlace = 7;
    string name = 8;
  }
}
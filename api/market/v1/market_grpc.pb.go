// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: api/market/v1/market.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MarketClient is the client API for Market service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarketClient interface {
	DescribeCoinSwaps(ctx context.Context, in *DescribeCoinSwapsRequest, opts ...grpc.CallOption) (*DescribeCoinSwapsReply, error)
	DescribeCoinLiquidity(ctx context.Context, in *DescribeCoinLiquidityRequest, opts ...grpc.CallOption) (*DescribeCoinLiquidityReply, error)
	DescribeCoinSwapStats(ctx context.Context, in *DescribeCoinSwapStatsRequest, opts ...grpc.CallOption) (*DescribeCoinSwapStatsReply, error)
	DescribeCoinPriceChart(ctx context.Context, in *DescribeCoinPriceChartRequest, opts ...grpc.CallOption) (*DescribeCoinPriceChartReply, error)
	DescribeCexCoins(ctx context.Context, in *DescribeCexCoinsRequest, opts ...grpc.CallOption) (*DescribeCexCoinsReply, error)
	DescribeAllExtraDetail(ctx context.Context, in *DescribeAllExtraDetailRequest, opts ...grpc.CallOption) (*DescribeAllExtraDetailReply, error)
	DescribeMarketExtraDetail(ctx context.Context, in *DescribeMarketExtraDetailRequest, opts ...grpc.CallOption) (*DescribeMarketExtraDetailReply, error)
	DescribeMenuCategory(ctx context.Context, in *DescribeMenuCategoryRequest, opts ...grpc.CallOption) (*DescribeMenuCategoryReply, error)
	ModifyMenuCategory(ctx context.Context, in *ModifyMenuCategoryRequest, opts ...grpc.CallOption) (*ModifyMenuCategoryReply, error)
	DescribeCategoryList(ctx context.Context, in *DescribeCategoryListRequest, opts ...grpc.CallOption) (*DescribeCategoryListReply, error)
	ModifyCoinDescription(ctx context.Context, in *ModifyCoinDescriptionRequest, opts ...grpc.CallOption) (*ModifyCoinDescriptionReply, error)
	ModifyCoinCategory(ctx context.Context, in *ModifyCoinCategoryRequest, opts ...grpc.CallOption) (*ModifyCoinCategoryReply, error)
	DescribeColumnList(ctx context.Context, in *DescribeColumnListRequest, opts ...grpc.CallOption) (*DescribeColumnListReply, error)
	CreateColumn(ctx context.Context, in *CreateColumnRequest, opts ...grpc.CallOption) (*CreateColumnReply, error)
	RemoveColumn(ctx context.Context, in *RemoveColumnRequest, opts ...grpc.CallOption) (*RemoveColumnReply, error)
	ModifyColumn(ctx context.Context, in *ModifyColumnRequest, opts ...grpc.CallOption) (*ModifyColumnReply, error)
	CreateCoinCategory(ctx context.Context, in *CreateCoinCategoryRequest, opts ...grpc.CallOption) (*CreateCoinCategoryReply, error)
	DescribeCoinUserChart(ctx context.Context, in *DescribeCoinUserChartRequest, opts ...grpc.CallOption) (*DescribeCoinUserChartReply, error)
	DescribeCoinOrderChart(ctx context.Context, in *DescribeCoinOrderChartRequest, opts ...grpc.CallOption) (*DescribeCoinOrderChartReply, error)
	DescribeCoinVolumeChart(ctx context.Context, in *DescribeCoinVolumeChartRequest, opts ...grpc.CallOption) (*DescribeCoinVolumeChartReply, error)
	DescribeCoinLiquidityChart(ctx context.Context, in *DescribeCoinLiquidityChartRequest, opts ...grpc.CallOption) (*DescribeCoinLiquidityChartReply, error)
	DescribeDeFiCoins(ctx context.Context, in *DescribeDeFiCoinsRequest, opts ...grpc.CallOption) (*DescribeDeFiCoinsReply, error)
	DescribeCoinSimples(ctx context.Context, in *DescribeCoinSimplesRequest, opts ...grpc.CallOption) (*DescribeCoinSimplesReply, error)
	SearchCoins(ctx context.Context, in *SearchCoinsRequest, opts ...grpc.CallOption) (*SearchCoinsReply, error)
	DescribeTokens(ctx context.Context, in *DescribeTokensRequest, opts ...grpc.CallOption) (*DescribeTokensReply, error)
	DescribeGuruChains(ctx context.Context, in *DescribeGuruChainsRequest, opts ...grpc.CallOption) (*DescribeGuruChainsReply, error)
	DescribeSwapConfig(ctx context.Context, in *DescribeSwapConfigRequest, opts ...grpc.CallOption) (*DescribeSwapConfigReply, error)
	DescribeCoinsByFields(ctx context.Context, in *DescribeCoinsByFieldsRequest, opts ...grpc.CallOption) (*DescribeCoinsByFieldsReply, error)
	DescribeTokensByFields(ctx context.Context, in *DescribeTokensByFieldsRequest, opts ...grpc.CallOption) (*DescribeTokensByFieldsReply, error)
	DescribePriceByCoinAddress(ctx context.Context, in *DescribePriceByCoinAddressRequest, opts ...grpc.CallOption) (*DescribePriceByCoinAddressReply, error)
}

type marketClient struct {
	cc grpc.ClientConnInterface
}

func NewMarketClient(cc grpc.ClientConnInterface) MarketClient {
	return &marketClient{cc}
}

func (c *marketClient) DescribeCoinSwaps(ctx context.Context, in *DescribeCoinSwapsRequest, opts ...grpc.CallOption) (*DescribeCoinSwapsReply, error) {
	out := new(DescribeCoinSwapsReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeCoinSwaps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeCoinLiquidity(ctx context.Context, in *DescribeCoinLiquidityRequest, opts ...grpc.CallOption) (*DescribeCoinLiquidityReply, error) {
	out := new(DescribeCoinLiquidityReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeCoinLiquidity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeCoinSwapStats(ctx context.Context, in *DescribeCoinSwapStatsRequest, opts ...grpc.CallOption) (*DescribeCoinSwapStatsReply, error) {
	out := new(DescribeCoinSwapStatsReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeCoinSwapStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeCoinPriceChart(ctx context.Context, in *DescribeCoinPriceChartRequest, opts ...grpc.CallOption) (*DescribeCoinPriceChartReply, error) {
	out := new(DescribeCoinPriceChartReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeCoinPriceChart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeCexCoins(ctx context.Context, in *DescribeCexCoinsRequest, opts ...grpc.CallOption) (*DescribeCexCoinsReply, error) {
	out := new(DescribeCexCoinsReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeCexCoins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeAllExtraDetail(ctx context.Context, in *DescribeAllExtraDetailRequest, opts ...grpc.CallOption) (*DescribeAllExtraDetailReply, error) {
	out := new(DescribeAllExtraDetailReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeAllExtraDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeMarketExtraDetail(ctx context.Context, in *DescribeMarketExtraDetailRequest, opts ...grpc.CallOption) (*DescribeMarketExtraDetailReply, error) {
	out := new(DescribeMarketExtraDetailReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeMarketExtraDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeMenuCategory(ctx context.Context, in *DescribeMenuCategoryRequest, opts ...grpc.CallOption) (*DescribeMenuCategoryReply, error) {
	out := new(DescribeMenuCategoryReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeMenuCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) ModifyMenuCategory(ctx context.Context, in *ModifyMenuCategoryRequest, opts ...grpc.CallOption) (*ModifyMenuCategoryReply, error) {
	out := new(ModifyMenuCategoryReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/ModifyMenuCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeCategoryList(ctx context.Context, in *DescribeCategoryListRequest, opts ...grpc.CallOption) (*DescribeCategoryListReply, error) {
	out := new(DescribeCategoryListReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeCategoryList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) ModifyCoinDescription(ctx context.Context, in *ModifyCoinDescriptionRequest, opts ...grpc.CallOption) (*ModifyCoinDescriptionReply, error) {
	out := new(ModifyCoinDescriptionReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/ModifyCoinDescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) ModifyCoinCategory(ctx context.Context, in *ModifyCoinCategoryRequest, opts ...grpc.CallOption) (*ModifyCoinCategoryReply, error) {
	out := new(ModifyCoinCategoryReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/ModifyCoinCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeColumnList(ctx context.Context, in *DescribeColumnListRequest, opts ...grpc.CallOption) (*DescribeColumnListReply, error) {
	out := new(DescribeColumnListReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeColumnList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) CreateColumn(ctx context.Context, in *CreateColumnRequest, opts ...grpc.CallOption) (*CreateColumnReply, error) {
	out := new(CreateColumnReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/CreateColumn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) RemoveColumn(ctx context.Context, in *RemoveColumnRequest, opts ...grpc.CallOption) (*RemoveColumnReply, error) {
	out := new(RemoveColumnReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/RemoveColumn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) ModifyColumn(ctx context.Context, in *ModifyColumnRequest, opts ...grpc.CallOption) (*ModifyColumnReply, error) {
	out := new(ModifyColumnReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/ModifyColumn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) CreateCoinCategory(ctx context.Context, in *CreateCoinCategoryRequest, opts ...grpc.CallOption) (*CreateCoinCategoryReply, error) {
	out := new(CreateCoinCategoryReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/CreateCoinCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeCoinUserChart(ctx context.Context, in *DescribeCoinUserChartRequest, opts ...grpc.CallOption) (*DescribeCoinUserChartReply, error) {
	out := new(DescribeCoinUserChartReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeCoinUserChart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeCoinOrderChart(ctx context.Context, in *DescribeCoinOrderChartRequest, opts ...grpc.CallOption) (*DescribeCoinOrderChartReply, error) {
	out := new(DescribeCoinOrderChartReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeCoinOrderChart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeCoinVolumeChart(ctx context.Context, in *DescribeCoinVolumeChartRequest, opts ...grpc.CallOption) (*DescribeCoinVolumeChartReply, error) {
	out := new(DescribeCoinVolumeChartReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeCoinVolumeChart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeCoinLiquidityChart(ctx context.Context, in *DescribeCoinLiquidityChartRequest, opts ...grpc.CallOption) (*DescribeCoinLiquidityChartReply, error) {
	out := new(DescribeCoinLiquidityChartReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeCoinLiquidityChart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeDeFiCoins(ctx context.Context, in *DescribeDeFiCoinsRequest, opts ...grpc.CallOption) (*DescribeDeFiCoinsReply, error) {
	out := new(DescribeDeFiCoinsReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeDeFiCoins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeCoinSimples(ctx context.Context, in *DescribeCoinSimplesRequest, opts ...grpc.CallOption) (*DescribeCoinSimplesReply, error) {
	out := new(DescribeCoinSimplesReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeCoinSimples", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) SearchCoins(ctx context.Context, in *SearchCoinsRequest, opts ...grpc.CallOption) (*SearchCoinsReply, error) {
	out := new(SearchCoinsReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/SearchCoins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeTokens(ctx context.Context, in *DescribeTokensRequest, opts ...grpc.CallOption) (*DescribeTokensReply, error) {
	out := new(DescribeTokensReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeGuruChains(ctx context.Context, in *DescribeGuruChainsRequest, opts ...grpc.CallOption) (*DescribeGuruChainsReply, error) {
	out := new(DescribeGuruChainsReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeGuruChains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeSwapConfig(ctx context.Context, in *DescribeSwapConfigRequest, opts ...grpc.CallOption) (*DescribeSwapConfigReply, error) {
	out := new(DescribeSwapConfigReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeSwapConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeCoinsByFields(ctx context.Context, in *DescribeCoinsByFieldsRequest, opts ...grpc.CallOption) (*DescribeCoinsByFieldsReply, error) {
	out := new(DescribeCoinsByFieldsReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeCoinsByFields", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribeTokensByFields(ctx context.Context, in *DescribeTokensByFieldsRequest, opts ...grpc.CallOption) (*DescribeTokensByFieldsReply, error) {
	out := new(DescribeTokensByFieldsReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribeTokensByFields", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) DescribePriceByCoinAddress(ctx context.Context, in *DescribePriceByCoinAddressRequest, opts ...grpc.CallOption) (*DescribePriceByCoinAddressReply, error) {
	out := new(DescribePriceByCoinAddressReply)
	err := c.cc.Invoke(ctx, "/api.market.v1.Market/DescribePriceByCoinAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarketServer is the server API for Market service.
// All implementations must embed UnimplementedMarketServer
// for forward compatibility
type MarketServer interface {
	DescribeCoinSwaps(context.Context, *DescribeCoinSwapsRequest) (*DescribeCoinSwapsReply, error)
	DescribeCoinLiquidity(context.Context, *DescribeCoinLiquidityRequest) (*DescribeCoinLiquidityReply, error)
	DescribeCoinSwapStats(context.Context, *DescribeCoinSwapStatsRequest) (*DescribeCoinSwapStatsReply, error)
	DescribeCoinPriceChart(context.Context, *DescribeCoinPriceChartRequest) (*DescribeCoinPriceChartReply, error)
	DescribeCexCoins(context.Context, *DescribeCexCoinsRequest) (*DescribeCexCoinsReply, error)
	DescribeAllExtraDetail(context.Context, *DescribeAllExtraDetailRequest) (*DescribeAllExtraDetailReply, error)
	DescribeMarketExtraDetail(context.Context, *DescribeMarketExtraDetailRequest) (*DescribeMarketExtraDetailReply, error)
	DescribeMenuCategory(context.Context, *DescribeMenuCategoryRequest) (*DescribeMenuCategoryReply, error)
	ModifyMenuCategory(context.Context, *ModifyMenuCategoryRequest) (*ModifyMenuCategoryReply, error)
	DescribeCategoryList(context.Context, *DescribeCategoryListRequest) (*DescribeCategoryListReply, error)
	ModifyCoinDescription(context.Context, *ModifyCoinDescriptionRequest) (*ModifyCoinDescriptionReply, error)
	ModifyCoinCategory(context.Context, *ModifyCoinCategoryRequest) (*ModifyCoinCategoryReply, error)
	DescribeColumnList(context.Context, *DescribeColumnListRequest) (*DescribeColumnListReply, error)
	CreateColumn(context.Context, *CreateColumnRequest) (*CreateColumnReply, error)
	RemoveColumn(context.Context, *RemoveColumnRequest) (*RemoveColumnReply, error)
	ModifyColumn(context.Context, *ModifyColumnRequest) (*ModifyColumnReply, error)
	CreateCoinCategory(context.Context, *CreateCoinCategoryRequest) (*CreateCoinCategoryReply, error)
	DescribeCoinUserChart(context.Context, *DescribeCoinUserChartRequest) (*DescribeCoinUserChartReply, error)
	DescribeCoinOrderChart(context.Context, *DescribeCoinOrderChartRequest) (*DescribeCoinOrderChartReply, error)
	DescribeCoinVolumeChart(context.Context, *DescribeCoinVolumeChartRequest) (*DescribeCoinVolumeChartReply, error)
	DescribeCoinLiquidityChart(context.Context, *DescribeCoinLiquidityChartRequest) (*DescribeCoinLiquidityChartReply, error)
	DescribeDeFiCoins(context.Context, *DescribeDeFiCoinsRequest) (*DescribeDeFiCoinsReply, error)
	DescribeCoinSimples(context.Context, *DescribeCoinSimplesRequest) (*DescribeCoinSimplesReply, error)
	SearchCoins(context.Context, *SearchCoinsRequest) (*SearchCoinsReply, error)
	DescribeTokens(context.Context, *DescribeTokensRequest) (*DescribeTokensReply, error)
	DescribeGuruChains(context.Context, *DescribeGuruChainsRequest) (*DescribeGuruChainsReply, error)
	DescribeSwapConfig(context.Context, *DescribeSwapConfigRequest) (*DescribeSwapConfigReply, error)
	DescribeCoinsByFields(context.Context, *DescribeCoinsByFieldsRequest) (*DescribeCoinsByFieldsReply, error)
	DescribeTokensByFields(context.Context, *DescribeTokensByFieldsRequest) (*DescribeTokensByFieldsReply, error)
	DescribePriceByCoinAddress(context.Context, *DescribePriceByCoinAddressRequest) (*DescribePriceByCoinAddressReply, error)
	mustEmbedUnimplementedMarketServer()
}

// UnimplementedMarketServer must be embedded to have forward compatible implementations.
type UnimplementedMarketServer struct {
}

func (UnimplementedMarketServer) DescribeCoinSwaps(context.Context, *DescribeCoinSwapsRequest) (*DescribeCoinSwapsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCoinSwaps not implemented")
}
func (UnimplementedMarketServer) DescribeCoinLiquidity(context.Context, *DescribeCoinLiquidityRequest) (*DescribeCoinLiquidityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCoinLiquidity not implemented")
}
func (UnimplementedMarketServer) DescribeCoinSwapStats(context.Context, *DescribeCoinSwapStatsRequest) (*DescribeCoinSwapStatsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCoinSwapStats not implemented")
}
func (UnimplementedMarketServer) DescribeCoinPriceChart(context.Context, *DescribeCoinPriceChartRequest) (*DescribeCoinPriceChartReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCoinPriceChart not implemented")
}
func (UnimplementedMarketServer) DescribeCexCoins(context.Context, *DescribeCexCoinsRequest) (*DescribeCexCoinsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCexCoins not implemented")
}
func (UnimplementedMarketServer) DescribeAllExtraDetail(context.Context, *DescribeAllExtraDetailRequest) (*DescribeAllExtraDetailReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeAllExtraDetail not implemented")
}
func (UnimplementedMarketServer) DescribeMarketExtraDetail(context.Context, *DescribeMarketExtraDetailRequest) (*DescribeMarketExtraDetailReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeMarketExtraDetail not implemented")
}
func (UnimplementedMarketServer) DescribeMenuCategory(context.Context, *DescribeMenuCategoryRequest) (*DescribeMenuCategoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeMenuCategory not implemented")
}
func (UnimplementedMarketServer) ModifyMenuCategory(context.Context, *ModifyMenuCategoryRequest) (*ModifyMenuCategoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyMenuCategory not implemented")
}
func (UnimplementedMarketServer) DescribeCategoryList(context.Context, *DescribeCategoryListRequest) (*DescribeCategoryListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCategoryList not implemented")
}
func (UnimplementedMarketServer) ModifyCoinDescription(context.Context, *ModifyCoinDescriptionRequest) (*ModifyCoinDescriptionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyCoinDescription not implemented")
}
func (UnimplementedMarketServer) ModifyCoinCategory(context.Context, *ModifyCoinCategoryRequest) (*ModifyCoinCategoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyCoinCategory not implemented")
}
func (UnimplementedMarketServer) DescribeColumnList(context.Context, *DescribeColumnListRequest) (*DescribeColumnListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeColumnList not implemented")
}
func (UnimplementedMarketServer) CreateColumn(context.Context, *CreateColumnRequest) (*CreateColumnReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateColumn not implemented")
}
func (UnimplementedMarketServer) RemoveColumn(context.Context, *RemoveColumnRequest) (*RemoveColumnReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveColumn not implemented")
}
func (UnimplementedMarketServer) ModifyColumn(context.Context, *ModifyColumnRequest) (*ModifyColumnReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyColumn not implemented")
}
func (UnimplementedMarketServer) CreateCoinCategory(context.Context, *CreateCoinCategoryRequest) (*CreateCoinCategoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCoinCategory not implemented")
}
func (UnimplementedMarketServer) DescribeCoinUserChart(context.Context, *DescribeCoinUserChartRequest) (*DescribeCoinUserChartReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCoinUserChart not implemented")
}
func (UnimplementedMarketServer) DescribeCoinOrderChart(context.Context, *DescribeCoinOrderChartRequest) (*DescribeCoinOrderChartReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCoinOrderChart not implemented")
}
func (UnimplementedMarketServer) DescribeCoinVolumeChart(context.Context, *DescribeCoinVolumeChartRequest) (*DescribeCoinVolumeChartReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCoinVolumeChart not implemented")
}
func (UnimplementedMarketServer) DescribeCoinLiquidityChart(context.Context, *DescribeCoinLiquidityChartRequest) (*DescribeCoinLiquidityChartReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCoinLiquidityChart not implemented")
}
func (UnimplementedMarketServer) DescribeDeFiCoins(context.Context, *DescribeDeFiCoinsRequest) (*DescribeDeFiCoinsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeDeFiCoins not implemented")
}
func (UnimplementedMarketServer) DescribeCoinSimples(context.Context, *DescribeCoinSimplesRequest) (*DescribeCoinSimplesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCoinSimples not implemented")
}
func (UnimplementedMarketServer) SearchCoins(context.Context, *SearchCoinsRequest) (*SearchCoinsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchCoins not implemented")
}
func (UnimplementedMarketServer) DescribeTokens(context.Context, *DescribeTokensRequest) (*DescribeTokensReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeTokens not implemented")
}
func (UnimplementedMarketServer) DescribeGuruChains(context.Context, *DescribeGuruChainsRequest) (*DescribeGuruChainsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeGuruChains not implemented")
}
func (UnimplementedMarketServer) DescribeSwapConfig(context.Context, *DescribeSwapConfigRequest) (*DescribeSwapConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeSwapConfig not implemented")
}
func (UnimplementedMarketServer) DescribeCoinsByFields(context.Context, *DescribeCoinsByFieldsRequest) (*DescribeCoinsByFieldsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCoinsByFields not implemented")
}
func (UnimplementedMarketServer) DescribeTokensByFields(context.Context, *DescribeTokensByFieldsRequest) (*DescribeTokensByFieldsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeTokensByFields not implemented")
}
func (UnimplementedMarketServer) DescribePriceByCoinAddress(context.Context, *DescribePriceByCoinAddressRequest) (*DescribePriceByCoinAddressReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribePriceByCoinAddress not implemented")
}
func (UnimplementedMarketServer) mustEmbedUnimplementedMarketServer() {}

// UnsafeMarketServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarketServer will
// result in compilation errors.
type UnsafeMarketServer interface {
	mustEmbedUnimplementedMarketServer()
}

func RegisterMarketServer(s grpc.ServiceRegistrar, srv MarketServer) {
	s.RegisterService(&Market_ServiceDesc, srv)
}

func _Market_DescribeCoinSwaps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeCoinSwapsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeCoinSwaps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeCoinSwaps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeCoinSwaps(ctx, req.(*DescribeCoinSwapsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeCoinLiquidity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeCoinLiquidityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeCoinLiquidity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeCoinLiquidity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeCoinLiquidity(ctx, req.(*DescribeCoinLiquidityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeCoinSwapStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeCoinSwapStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeCoinSwapStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeCoinSwapStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeCoinSwapStats(ctx, req.(*DescribeCoinSwapStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeCoinPriceChart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeCoinPriceChartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeCoinPriceChart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeCoinPriceChart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeCoinPriceChart(ctx, req.(*DescribeCoinPriceChartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeCexCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeCexCoinsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeCexCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeCexCoins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeCexCoins(ctx, req.(*DescribeCexCoinsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeAllExtraDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeAllExtraDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeAllExtraDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeAllExtraDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeAllExtraDetail(ctx, req.(*DescribeAllExtraDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeMarketExtraDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeMarketExtraDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeMarketExtraDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeMarketExtraDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeMarketExtraDetail(ctx, req.(*DescribeMarketExtraDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeMenuCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeMenuCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeMenuCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeMenuCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeMenuCategory(ctx, req.(*DescribeMenuCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_ModifyMenuCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyMenuCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).ModifyMenuCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/ModifyMenuCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).ModifyMenuCategory(ctx, req.(*ModifyMenuCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeCategoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeCategoryListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeCategoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeCategoryList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeCategoryList(ctx, req.(*DescribeCategoryListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_ModifyCoinDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyCoinDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).ModifyCoinDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/ModifyCoinDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).ModifyCoinDescription(ctx, req.(*ModifyCoinDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_ModifyCoinCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyCoinCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).ModifyCoinCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/ModifyCoinCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).ModifyCoinCategory(ctx, req.(*ModifyCoinCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeColumnList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeColumnListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeColumnList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeColumnList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeColumnList(ctx, req.(*DescribeColumnListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_CreateColumn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateColumnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).CreateColumn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/CreateColumn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).CreateColumn(ctx, req.(*CreateColumnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_RemoveColumn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveColumnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).RemoveColumn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/RemoveColumn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).RemoveColumn(ctx, req.(*RemoveColumnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_ModifyColumn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyColumnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).ModifyColumn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/ModifyColumn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).ModifyColumn(ctx, req.(*ModifyColumnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_CreateCoinCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCoinCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).CreateCoinCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/CreateCoinCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).CreateCoinCategory(ctx, req.(*CreateCoinCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeCoinUserChart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeCoinUserChartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeCoinUserChart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeCoinUserChart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeCoinUserChart(ctx, req.(*DescribeCoinUserChartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeCoinOrderChart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeCoinOrderChartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeCoinOrderChart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeCoinOrderChart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeCoinOrderChart(ctx, req.(*DescribeCoinOrderChartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeCoinVolumeChart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeCoinVolumeChartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeCoinVolumeChart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeCoinVolumeChart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeCoinVolumeChart(ctx, req.(*DescribeCoinVolumeChartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeCoinLiquidityChart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeCoinLiquidityChartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeCoinLiquidityChart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeCoinLiquidityChart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeCoinLiquidityChart(ctx, req.(*DescribeCoinLiquidityChartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeDeFiCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeDeFiCoinsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeDeFiCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeDeFiCoins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeDeFiCoins(ctx, req.(*DescribeDeFiCoinsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeCoinSimples_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeCoinSimplesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeCoinSimples(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeCoinSimples",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeCoinSimples(ctx, req.(*DescribeCoinSimplesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_SearchCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchCoinsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).SearchCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/SearchCoins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).SearchCoins(ctx, req.(*SearchCoinsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeTokens(ctx, req.(*DescribeTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeGuruChains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeGuruChainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeGuruChains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeGuruChains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeGuruChains(ctx, req.(*DescribeGuruChainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeSwapConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeSwapConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeSwapConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeSwapConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeSwapConfig(ctx, req.(*DescribeSwapConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeCoinsByFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeCoinsByFieldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeCoinsByFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeCoinsByFields",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeCoinsByFields(ctx, req.(*DescribeCoinsByFieldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribeTokensByFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeTokensByFieldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribeTokensByFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribeTokensByFields",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribeTokensByFields(ctx, req.(*DescribeTokensByFieldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_DescribePriceByCoinAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribePriceByCoinAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DescribePriceByCoinAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.market.v1.Market/DescribePriceByCoinAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DescribePriceByCoinAddress(ctx, req.(*DescribePriceByCoinAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Market_ServiceDesc is the grpc.ServiceDesc for Market service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Market_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.market.v1.Market",
	HandlerType: (*MarketServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DescribeCoinSwaps",
			Handler:    _Market_DescribeCoinSwaps_Handler,
		},
		{
			MethodName: "DescribeCoinLiquidity",
			Handler:    _Market_DescribeCoinLiquidity_Handler,
		},
		{
			MethodName: "DescribeCoinSwapStats",
			Handler:    _Market_DescribeCoinSwapStats_Handler,
		},
		{
			MethodName: "DescribeCoinPriceChart",
			Handler:    _Market_DescribeCoinPriceChart_Handler,
		},
		{
			MethodName: "DescribeCexCoins",
			Handler:    _Market_DescribeCexCoins_Handler,
		},
		{
			MethodName: "DescribeAllExtraDetail",
			Handler:    _Market_DescribeAllExtraDetail_Handler,
		},
		{
			MethodName: "DescribeMarketExtraDetail",
			Handler:    _Market_DescribeMarketExtraDetail_Handler,
		},
		{
			MethodName: "DescribeMenuCategory",
			Handler:    _Market_DescribeMenuCategory_Handler,
		},
		{
			MethodName: "ModifyMenuCategory",
			Handler:    _Market_ModifyMenuCategory_Handler,
		},
		{
			MethodName: "DescribeCategoryList",
			Handler:    _Market_DescribeCategoryList_Handler,
		},
		{
			MethodName: "ModifyCoinDescription",
			Handler:    _Market_ModifyCoinDescription_Handler,
		},
		{
			MethodName: "ModifyCoinCategory",
			Handler:    _Market_ModifyCoinCategory_Handler,
		},
		{
			MethodName: "DescribeColumnList",
			Handler:    _Market_DescribeColumnList_Handler,
		},
		{
			MethodName: "CreateColumn",
			Handler:    _Market_CreateColumn_Handler,
		},
		{
			MethodName: "RemoveColumn",
			Handler:    _Market_RemoveColumn_Handler,
		},
		{
			MethodName: "ModifyColumn",
			Handler:    _Market_ModifyColumn_Handler,
		},
		{
			MethodName: "CreateCoinCategory",
			Handler:    _Market_CreateCoinCategory_Handler,
		},
		{
			MethodName: "DescribeCoinUserChart",
			Handler:    _Market_DescribeCoinUserChart_Handler,
		},
		{
			MethodName: "DescribeCoinOrderChart",
			Handler:    _Market_DescribeCoinOrderChart_Handler,
		},
		{
			MethodName: "DescribeCoinVolumeChart",
			Handler:    _Market_DescribeCoinVolumeChart_Handler,
		},
		{
			MethodName: "DescribeCoinLiquidityChart",
			Handler:    _Market_DescribeCoinLiquidityChart_Handler,
		},
		{
			MethodName: "DescribeDeFiCoins",
			Handler:    _Market_DescribeDeFiCoins_Handler,
		},
		{
			MethodName: "DescribeCoinSimples",
			Handler:    _Market_DescribeCoinSimples_Handler,
		},
		{
			MethodName: "SearchCoins",
			Handler:    _Market_SearchCoins_Handler,
		},
		{
			MethodName: "DescribeTokens",
			Handler:    _Market_DescribeTokens_Handler,
		},
		{
			MethodName: "DescribeGuruChains",
			Handler:    _Market_DescribeGuruChains_Handler,
		},
		{
			MethodName: "DescribeSwapConfig",
			Handler:    _Market_DescribeSwapConfig_Handler,
		},
		{
			MethodName: "DescribeCoinsByFields",
			Handler:    _Market_DescribeCoinsByFields_Handler,
		},
		{
			MethodName: "DescribeTokensByFields",
			Handler:    _Market_DescribeTokensByFields_Handler,
		},
		{
			MethodName: "DescribePriceByCoinAddress",
			Handler:    _Market_DescribePriceByCoinAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/market/v1/market.proto",
}
